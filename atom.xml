<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lzy&#39;s space</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lzylzy.cf/"/>
  <updated>2021-07-11T13:40:16.970Z</updated>
  <id>https://lzylzy.cf/</id>
  
  <author>
    <name>lzy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>P1087 [NOIP2004 普及组] FBI 树</title>
    <link href="https://lzylzy.cf/posts/69c73527.html"/>
    <id>https://lzylzy.cf/posts/69c73527.html</id>
    <published>2021-07-11T13:38:53.000Z</published>
    <updated>2021-07-11T13:40:16.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p><a href="https://www.luogu.com.cn/problem/P1087" target="_blank" rel="external nofollow noopener noreferrer">题目链接</a></p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>模拟</p><p>简单构建即可，甚至不用把树建出来</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2500</span></span><br><span class="line"><span class="keyword">char</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">char</span> k;</span><br><span class="line"><span class="keyword">if</span>(s[r]-s[l<span class="number">-1</span>]==<span class="number">0</span>)k=<span class="string">'B'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[r]-s[l<span class="number">-1</span>]==r-l+<span class="number">1</span>)k=<span class="string">'I'</span>;</span><br><span class="line"><span class="keyword">else</span> k=<span class="string">'F'</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r-l+<span class="number">1</span>&lt;=<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">putchar</span>(k);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">dfs(l,mid);</span><br><span class="line">dfs(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">putchar</span>(k);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">1</span>&lt;&lt;n);i++)</span><br><span class="line">{</span><br><span class="line">s[i]=s[i<span class="number">-1</span>]+a[i]-<span class="string">'0'</span>;</span><br><span class="line">}</span><br><span class="line">dfs(<span class="number">1</span>,(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1087&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;模拟&lt;/p&gt;
&lt;p&gt;简单构建即可，甚至不用把树建出来&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="模拟" scheme="https://lzylzy.cf/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>P1383 高级打字机</title>
    <link href="https://lzylzy.cf/posts/7ff6e237.html"/>
    <id>https://lzylzy.cf/posts/7ff6e237.html</id>
    <published>2021-07-11T13:36:41.000Z</published>
    <updated>2021-07-11T13:38:18.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>支持两个操作，在文末添加一个字符，或撤销前x次操作</p><p>可以撤销撤销操作（</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>主席树板子</p><a id="more"></a><p>对于撤销操作，只需要继承前k个节点的根就行</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000009</span></span><br><span class="line"><span class="keyword">int</span> rt[maxn],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> ls,rs;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">}tr[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x=++cnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tr[x].ls=Build(l,mid);</span><br><span class="line">tr[x].rs=Build(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">char</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> root=++cnt;</span><br><span class="line">tr[root]=tr[x];</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">{</span><br><span class="line">tr[root].val+=<span class="number">1</span>;tr[root].data=val;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[root].ls].val!=mid-l+<span class="number">1</span>)tr[root].ls=add(tr[root].ls,l,mid,val);</span><br><span class="line"><span class="keyword">else</span> tr[root].rs=add(tr[root].rs,mid+<span class="number">1</span>,r,val);</span><br><span class="line">tr[root].val=tr[tr[root].ls].val+tr[tr[root].rs].val;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> tr[x].data;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k=tr[tr[x].ls].val;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=val)<span class="keyword">return</span> query(tr[x].ls,l,mid,val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].rs,mid+<span class="number">1</span>,r,val-k);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">Build(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'T'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt);</span><br><span class="line">k++;</span><br><span class="line">rt[k]=add(rt[k<span class="number">-1</span>],<span class="number">1</span>,n,opt[<span class="number">0</span>]);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'U'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">k++;</span><br><span class="line">rt[k]=rt[k-x<span class="number">-1</span>];</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,query(rt[k],<span class="number">1</span>,n,x));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;支持两个操作，在文末添加一个字符，或撤销前x次操作&lt;/p&gt;
&lt;p&gt;可以撤销撤销操作（&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;主席树板子&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="线段树" scheme="https://lzylzy.cf/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="主席树" scheme="https://lzylzy.cf/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P2633 Count on a tree</title>
    <link href="https://lzylzy.cf/posts/f91f2cad.html"/>
    <id>https://lzylzy.cf/posts/f91f2cad.html</id>
    <published>2021-07-11T13:34:41.000Z</published>
    <updated>2021-07-11T13:36:12.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>树上两点间路径第k小</p><p>强制在线</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>主席树大法好</p><a id="more"></a><p>这回的问题从区间变成了树上，但是变化不大</p><p>以前区间我们继承的是前一个节点</p><p>现在只需要继承父亲节点即可</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300009</span></span><br><span class="line"><span class="keyword">int</span> n,m,p;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],dep[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> ls;</span><br><span class="line"><span class="keyword">int</span> rs;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">}tr[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> rt[maxn],fa[maxn][<span class="number">31</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x=++cnt;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> x;</span><br><span class="line">tr[x].ls=Build(l,mid);</span><br><span class="line">tr[x].rs=Build(mid+<span class="number">1</span>,r);</span><br><span class="line">tr[x].val=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> root=++cnt;</span><br><span class="line">tr[root]=tr[x];</span><br><span class="line">tr[root].val++;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">if</span>(val&lt;=mid)tr[root].ls=add(tr[root].ls,l,mid,val);</span><br><span class="line"><span class="keyword">else</span> tr[root].rs=add(tr[root].rs,mid+<span class="number">1</span>,r,val);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> from)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">fa[x][<span class="number">0</span>]=from;</span><br><span class="line">dep[x]=dep[from]+<span class="number">1</span>;</span><br><span class="line">rt[x]=add(rt[from],<span class="number">1</span>,p,b[x]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(to!=from)dfs(to,x);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//a+b-c-d</span></span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> la=tr[tr[a].ls].val;</span><br><span class="line"><span class="keyword">int</span> lb=tr[tr[b].ls].val;</span><br><span class="line"><span class="keyword">int</span> lc=tr[tr[c].ls].val;</span><br><span class="line"><span class="keyword">int</span> ld=tr[tr[d].ls].val;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,k=la+lb-lc-ld;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=val)<span class="keyword">return</span> query(tr[a].ls,tr[b].ls,tr[c].ls,tr[d].ls,l,mid,val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(tr[a].rs,tr[b].rs,tr[c].rs,tr[d].rs,mid+<span class="number">1</span>,r,val-k);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line"><span class="keyword">int</span> k=dep[x]-dep[y],l=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)x=fa[x][l];</span><br><span class="line">l++;k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(fa[x][i]!=fa[y][i])</span><br><span class="line">{</span><br><span class="line">x=fa[x][i];y=fa[y][i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">b[i]=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">son[y].push_back(x);</span><br><span class="line">}</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">p=unique(a+<span class="number">1</span>,a+<span class="number">1</span>+n)-a<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)b[i]=lower_bound(a+<span class="number">1</span>,a+p+<span class="number">1</span>,b[i])-a;</span><br><span class="line">rt[<span class="number">0</span>]=Build(<span class="number">1</span>,p);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line">fa[j][i]=fa[fa[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> u,v,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;k);</span><br><span class="line">u=u^last;</span><br><span class="line"><span class="keyword">int</span> lca=GetLca(u,v);</span><br><span class="line">last=query(rt[u],rt[v],rt[lca],rt[fa[lca][<span class="number">0</span>]],<span class="number">1</span>,p,k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[last]);</span><br><span class="line">last=a[last];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;树上两点间路径第k小&lt;/p&gt;
&lt;p&gt;强制在线&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;主席树大法好&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="线段树" scheme="https://lzylzy.cf/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="主席树" scheme="https://lzylzy.cf/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF487E Tourists</title>
    <link href="https://lzylzy.cf/posts/7d516526.html"/>
    <id>https://lzylzy.cf/posts/7d516526.html</id>
    <published>2021-07-11T13:28:06.000Z</published>
    <updated>2021-07-11T13:33:57.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一张图，求两点间路径权值最小值</p><p>支持修改</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>大恶心题</p><a id="more"></a><p>对于没有修改的部分，用圆方树就能实现。</p><p>然后对于修改操作，利用圆方树是棵树的性质，在方点处用multiset存储所有儿子节点的权值</p><p>这样一来每次只需要修改一个点就能解决问题</p><p>最后的细节是如果LCA是方点需要再次更新答案</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200009</span></span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">int</span> val[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; S[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn];</span><br><span class="line"><span class="keyword">int</span> tp=<span class="number">0</span>,stk[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">dfn[x]=low[x]=num++;</span><br><span class="line">stk[++tp]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[to])</span><br><span class="line">{</span><br><span class="line">tarjan(to);</span><br><span class="line">low[x]=min(low[x],low[to]);</span><br><span class="line"><span class="keyword">if</span>(dfn[x]==low[to])</span><br><span class="line">{</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k!=to;tp--)</span><br><span class="line">{</span><br><span class="line">k=stk[tp];</span><br><span class="line"><span class="comment">//S[cnt].insert(val[k]);</span></span><br><span class="line">t[k].push_back(cnt);</span><br><span class="line">t[cnt].push_back(k);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//S[cnt].insert(val[x]);</span></span><br><span class="line">t[x].push_back(cnt);</span><br><span class="line">t[cnt].push_back(x);</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> low[x]=min(low[x],dfn[to]); </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">}tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> size[maxn*<span class="number">2</span>],fa[maxn*<span class="number">2</span>],Son[maxn*<span class="number">2</span>],top[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">2</span>*maxn],dfk[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dep[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tmk=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">size[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=t[x][i];</span><br><span class="line"><span class="keyword">if</span>(!size[to])</span><br><span class="line">{</span><br><span class="line">fa[to]=x;</span><br><span class="line">dep[to]=dep[x]+<span class="number">1</span>;</span><br><span class="line">dfs1(to);</span><br><span class="line">size[x]+=size[to];</span><br><span class="line"><span class="keyword">if</span>(size[to]&gt;size[Son[x]])Son[x]=to;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">tmk++;</span><br><span class="line">pos[x]=tmk;</span><br><span class="line">dfk[tmk]=x;</span><br><span class="line">top[x]=tp;</span><br><span class="line"><span class="keyword">if</span>(Son[x])dfs2(Son[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=t[x][i];</span><br><span class="line"><span class="keyword">if</span>(to!=fa[x]&amp;&amp;to!=Son[x])dfs2(to,to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">tr[x].l=l;</span><br><span class="line">tr[x].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">{</span><br><span class="line">tr[x].val=val[dfk[l]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(x*<span class="number">2</span>,l,mid);</span><br><span class="line">Build(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">tr[x].val=min(tr[x*<span class="number">2</span>].val,tr[x*<span class="number">2</span>+<span class="number">1</span>].val);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//单点修改 区间查询 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(tr[x].l==tr[x].r&amp;&amp;tr[x].l==pos)</span><br><span class="line">{</span><br><span class="line">tr[x].val=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)add(x*<span class="number">2</span>,pos,val);</span><br><span class="line"><span class="keyword">else</span> add(x*<span class="number">2</span>+<span class="number">1</span>,pos,val);</span><br><span class="line">tr[x].val=min(tr[x*<span class="number">2</span>].val,tr[x*<span class="number">2</span>+<span class="number">1</span>].val);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)<span class="keyword">return</span> tr[x].val;</span><br><span class="line"><span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res=inf;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)res=query(x*<span class="number">2</span>,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)res=min(res,query(x*<span class="number">2</span>+<span class="number">1</span>,l,r));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">cnt=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">son[y].push_back(x);</span><br><span class="line">}</span><br><span class="line">tarjan(<span class="number">1</span>);</span><br><span class="line">dfs1(<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(fa[i])S[fa[i]].insert(val[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">{</span><br><span class="line">val[i]=*S[i].begin();</span><br><span class="line">}</span><br><span class="line">Build(<span class="number">1</span>,<span class="number">1</span>,cnt);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,opt,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'C'</span>)</span><br><span class="line">{</span><br><span class="line">add(<span class="number">1</span>,pos[x],y);</span><br><span class="line"><span class="keyword">if</span>(fa[x])</span><br><span class="line">{</span><br><span class="line">S[fa[x]].erase(S[fa[x]].lower_bound(val[x]));</span><br><span class="line">S[fa[x]].insert(y);</span><br><span class="line"><span class="keyword">if</span>(val[fa[x]]!=*S[fa[x]].begin())</span><br><span class="line">{</span><br><span class="line">val[fa[x]]=*S[fa[x]].begin();</span><br><span class="line">add(<span class="number">1</span>,pos[fa[x]],val[fa[x]]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">val[x]=y;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> Ans=inf;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line">Ans=min(Ans,query(<span class="number">1</span>,pos[top[x]],pos[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(pos[x]&gt;pos[y])swap(x,y);</span><br><span class="line">Ans=min(Ans,query(<span class="number">1</span>,pos[x],pos[y]));</span><br><span class="line"><span class="keyword">if</span>(x&gt;n)</span><br><span class="line">{</span><br><span class="line">Ans=min(Ans,val[fa[x]]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;给定一张图，求两点间路径权值最小值&lt;/p&gt;
&lt;p&gt;支持修改&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;大恶心题&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="强连通分量" scheme="https://lzylzy.cf/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="圆方树" scheme="https://lzylzy.cf/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P3926 SAC E#1 - 一道不可做题 Jelly</title>
    <link href="https://lzylzy.cf/posts/73c8616c.html"/>
    <id>https://lzylzy.cf/posts/73c8616c.html</id>
    <published>2021-07-11T13:23:44.000Z</published>
    <updated>2021-07-11T13:25:20.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>很奇怪的模拟题</p><p><a href="https://www.luogu.com.cn/problem/P3926" target="_blank" rel="external nofollow noopener noreferrer">题目链接</a></p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>懒得写 搬运kkk（</p><a id="more"></a><p>如果 a &gt; c，答案是 a+⌊x r⌋。</p><p>如果 a = c，有两种情况： 如果 x≤q，答案是 c。 如果 x &gt; q，答案是 c+⌊(x−q) / r ⌋。</p><p>如果 a &lt; c，有三种情况： 如果 x≤ (c−a)p，答案是 a+⌊x /p⌋。 如果 (c−a)p≤x≤ (c−a)p+q，答案是 c</p><p>如果 x &gt; (c−a)p+q，答案是 c+⌊(x−(c−a)p−q) / r ⌋</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a,c,p,q,r,x;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>,&amp;a,&amp;c,&amp;p,&amp;q,&amp;r,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=(c-a)*p&amp;&amp;a&lt;c)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x/p+a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(a&lt;c)x-=(c-a)*p,a=c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x&lt;=q&amp;&amp;a==c)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(a==c)x-=q;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x/r+a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;很奇怪的模拟题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3926&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;懒得写 搬运kkk（&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI ， 模拟" scheme="https://lzylzy.cf/tags/OI-%EF%BC%8C-%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>P6166 [IOI2012]scrivener</title>
    <link href="https://lzylzy.cf/posts/bab63e92.html"/>
    <id>https://lzylzy.cf/posts/bab63e92.html</id>
    <published>2021-07-11T13:20:38.000Z</published>
    <updated>2021-07-11T13:38:21.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>支持两个操作，在文末添加一个字符，或撤销前x次操作</p><p>可以撤销撤销操作（</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>看撤销想主席树</p><a id="more"></a><p>然后这就是很简单的主席树板子题</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> ls,rs;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">}tr[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> rt[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x=++cnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tr[x].ls=Build(l,mid);</span><br><span class="line">tr[x].rs=Build(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> tr[x].data;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k=tr[tr[x].ls].val;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=val)<span class="keyword">return</span> query(tr[x].ls,l,mid,val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(tr[x].rs,mid+<span class="number">1</span>,r,val-k);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">char</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> root=++cnt;</span><br><span class="line">tr[root]=tr[x];</span><br><span class="line">tr[root].val++;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">{</span><br><span class="line">tr[root].data=val;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[root].ls].val&lt;mid-l+<span class="number">1</span>)tr[root].ls=add(tr[x].ls,l,mid,val);</span><br><span class="line"><span class="keyword">else</span> tr[root].rs=add(tr[root].rs,mid+<span class="number">1</span>,r,val);</span><br><span class="line">tr[root].val=tr[tr[root].ls].val+tr[tr[root].rs].val;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rt[<span class="number">0</span>]=Build(<span class="number">1</span>,n/<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt);</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'T'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt);</span><br><span class="line">k++;</span><br><span class="line">rt[k]=add(rt[k<span class="number">-1</span>],<span class="number">1</span>,n,opt[<span class="number">0</span>]);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'U'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">k++;</span><br><span class="line">rt[k]=rt[k-x<span class="number">-1</span>];</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">x++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,query(rt[k],<span class="number">1</span>,n,x));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;支持两个操作，在文末添加一个字符，或撤销前x次操作&lt;/p&gt;
&lt;p&gt;可以撤销撤销操作（&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;看撤销想主席树&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="线段树" scheme="https://lzylzy.cf/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="主席树" scheme="https://lzylzy.cf/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P5658 [CSP-S2019] 括号树</title>
    <link href="https://lzylzy.cf/posts/760b4b07.html"/>
    <id>https://lzylzy.cf/posts/760b4b07.html</id>
    <published>2021-07-11T13:12:37.000Z</published>
    <updated>2021-07-11T13:20:04.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一棵树，每个节点有一个左括号或右括号</p><p>求所有节点到根路径上合法子串的数量的异或和</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>思维题，需要一些树的思想。</p><p>我们设F[i]表示根节点到i路径上的答案，考虑如何更新</p><a id="more"></a><p>显然可以继承父亲，然后分类讨论</p><p>如果这个点是右括号，我们得从父亲找出有没有左括号跟它匹配</p><p>所以对于每个点，记last[i]为上一个左括号在哪出现</p><p>还需要标记有几个左括号没被使用 记为flag[i]</p><p>为了计算答案（子串），我们得记录一个Line，表示最多连续有几个配对成功的括号群</p><p>line的更新比较复杂，在右括号时，如果匹配失败，需要清零</p><p>如果右括号在父亲上匹配成功，line需要继承匹配到的那个左括号点的line</p><p>如果是左括号，我们只需要继承答案，修改last为自身，Line清空即可</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">int</span> last[maxn];<span class="comment">//上一个没配对的括号 </span></span><br><span class="line"><span class="keyword">int</span> f[maxn];<span class="comment">//到i的答案 </span></span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="keyword">char</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> line[maxn];<span class="comment">//已经有几个连续的括号 </span></span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line">fa[<span class="number">1</span>]=n+<span class="number">1</span>;</span><br><span class="line">last[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">last[n+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;fa[i]);</span><br><span class="line">last[i]=<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="string">'('</span>)last[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'('</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//左括号 加进去继承 </span></span><br><span class="line">f[i]=f[fa[i]];</span><br><span class="line">last[i]=i;</span><br><span class="line">line[i]=<span class="number">0</span>; </span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(last[fa[i]]==<span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line">f[i]=f[fa[i]];</span><br><span class="line">line[i]=<span class="number">0</span>;<span class="comment">//断了 </span></span><br><span class="line">last[i]=<span class="number">-1</span>;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">line[i]=line[fa[last[fa[i]]]]+<span class="number">1</span>;<span class="comment">//更新line </span></span><br><span class="line">f[i]=f[fa[i]]+line[i];</span><br><span class="line">last[i]=last[fa[last[fa[i]]]];</span><br><span class="line">flag[i]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">ans=ans^(i*f[i]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;f[i]&lt;&lt;" "&lt;&lt;last[i]&lt;&lt;" "&lt;&lt;line[i]&lt;&lt;" "&lt;&lt;flag[i]&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">()(())((())</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;给定一棵树，每个节点有一个左括号或右括号&lt;/p&gt;
&lt;p&gt;求所有节点到根路径上合法子串的数量的异或和&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;思维题，需要一些树的思想。&lt;/p&gt;
&lt;p&gt;我们设F[i]表示根节点到i路径上的答案，考虑如何更新&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="模拟" scheme="https://lzylzy.cf/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>P2543 [AHOI2004]奇怪的字符串</title>
    <link href="https://lzylzy.cf/posts/84fe2a2a.html"/>
    <id>https://lzylzy.cf/posts/84fe2a2a.html</id>
    <published>2021-07-11T13:08:47.000Z</published>
    <updated>2021-07-11T13:09:52.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>上古省选题</p><p>求最长公共子序列。</p><a id="more"></a><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10009</span></span><br><span class="line"><span class="keyword">char</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="comment">//f[i][j]表示a的前i位，b的前j位的LCS </span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> lena=<span class="built_in">strlen</span>(a+<span class="number">1</span>),lenb=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lenb;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j])</span><br><span class="line">{</span><br><span class="line">f[i&amp;<span class="number">1</span>][j]=f[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">f[i&amp;<span class="number">1</span>][j]=max(f[i&amp;<span class="number">1</span>][j],max(f[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j],f[i&amp;<span class="number">1</span>][j<span class="number">-1</span>]));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[lena&amp;<span class="number">1</span>][lenb]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;上古省选题&lt;/p&gt;
&lt;p&gt;求最长公共子序列。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>P1037 [NOIP2002 普及组] 产生数</title>
    <link href="https://lzylzy.cf/posts/8cb1d9bf.html"/>
    <id>https://lzylzy.cf/posts/8cb1d9bf.html</id>
    <published>2021-07-11T13:05:16.000Z</published>
    <updated>2021-07-11T13:07:11.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定k个变化规则和一个整数n</p><p>求能产生多少不同的数字</p><a id="more"></a><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>主要考察高精度</p><p>对于数字的变化，我们可以用佛洛依德求出每个数字有多少种变化，然后再连乘起来就能得到答案。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ex(x) (x==-1?inf:x)</span></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="built_in">string</span> ans=<span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn],y[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">cheng</span><span class="params">(<span class="built_in">string</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> jw=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> now=a[i]-<span class="string">'0'</span>;</span><br><span class="line">now*=b;</span><br><span class="line">now+=jw;</span><br><span class="line">jw=now/<span class="number">10</span>;</span><br><span class="line">now%=<span class="number">10</span>;</span><br><span class="line">a[i]=now+<span class="string">'0'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(jw==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">while</span>(jw)</span><br><span class="line">{</span><br><span class="line">q.push(jw%<span class="number">10</span>);jw/=<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line">s+=(<span class="keyword">char</span>)(q.front()+<span class="string">'0'</span>);</span><br><span class="line">q.pop();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> s+a;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line"><span class="keyword">if</span>(y[i]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">k--,i--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">f[x[i]][y[i]]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)f[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">9</span>;l++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i!=j&amp;&amp;j!=l&amp;&amp;l!=i)</span><br><span class="line">f[i][j]|=f[i][l]&amp;f[l][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(f[a[i]-<span class="string">'0'</span>][j]==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">p++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i]&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="number">0</span>)ans=cheng(ans,p);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i]&lt;&lt;" "&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;给定k个变化规则和一个整数n&lt;/p&gt;
&lt;p&gt;求能产生多少不同的数字&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="高精度" scheme="https://lzylzy.cf/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
      <category term="模拟" scheme="https://lzylzy.cf/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>P5017 [NOIP2018 普及组] 摆渡车</title>
    <link href="https://lzylzy.cf/posts/fa0062c2.html"/>
    <id>https://lzylzy.cf/posts/fa0062c2.html</id>
    <published>2021-07-11T10:43:07.000Z</published>
    <updated>2021-07-11T10:47:19.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>有n名同学要乘坐摆渡车从人大附中前往人民大学，第 i位同学在第 ti有一辆摆渡车在工作，但摆渡车容量可以视为无限大。摆渡车从人大附中出发、 把车上的同学送到人民大学、再回到人大附中（去接其他同学），这样往返一趟总共花费m分钟（同学上下车时间忽略不计）。摆渡车要将所有同学都送到人民大学。</p><p>凯凯很好奇，如果他能任意安排摆渡车出发的时间，那么这些同学的等车时间之和最小为多少呢？</p><a id="more"></a><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>没想到普及T3就是奇奇怪怪的斜率优化</p><p>f[i]表示截止到时刻i车出发总共让学生等待的时间<br>枚举一个j ij差大于m<br>cnt[i]表示截止到时刻i 有cnti个人来等车<br>sum[i]表示截止到时刻i 一个人都没走<br>所有人的等车时间总和<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mi>i</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f[i]=f[j]+i*(cnt[i]-cnt[j])-(sum[i]-sum[j])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4000105</span></span><br><span class="line"><span class="keyword">int</span> t[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">int</span> q[maxn];</span><br><span class="line"><span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn],sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>{ <span class="keyword">return</span> (<span class="keyword">double</span>) (f[v] + sum[v] - f[u] - sum[u]) / (cnt[u] == cnt[v] ? <span class="number">1e-9</span> : cnt[v] - cnt[u]); }</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line">cnt[t[i]]++; sum[t[i]]+= t[i];</span><br><span class="line">}</span><br><span class="line">sort(t+<span class="number">1</span>,t+<span class="number">1</span>+n);<span class="comment">//从小到大 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t[n]+m;i++)</span><br><span class="line">{</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>]; sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=t[n]+m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i-m&gt;=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail&amp;&amp;(slope(q[tail<span class="number">-1</span>],q[tail])&gt;=slope(q[tail],i-m)))tail--;</span><br><span class="line">q[++tail]=i-m;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;=i)head++;</span><br><span class="line"><span class="keyword">int</span> j=q[head];</span><br><span class="line">f[i]=cnt[i]*i-sum[i];<span class="comment">//不发车，发不出去 </span></span><br><span class="line"><span class="keyword">if</span>(head&lt;=tail)f[i]=min(f[i],f[j]+i*(cnt[i]-cnt[j])-(sum[i]-sum[j]));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=t[n];i&lt;=t[n]+m;i++)ans=min(ans,f[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;有n名同学要乘坐摆渡车从人大附中前往人民大学，第 i位同学在第 ti有一辆摆渡车在工作，但摆渡车容量可以视为无限大。摆渡车从人大附中出发、 把车上的同学送到人民大学、再回到人大附中（去接其他同学），这样往返一趟总共花费m分钟（同学上下车时间忽略不计）。摆渡车要将所有同学都送到人民大学。&lt;/p&gt;
&lt;p&gt;凯凯很好奇，如果他能任意安排摆渡车出发的时间，那么这些同学的等车时间之和最小为多少呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
      <category term="斜率优化" scheme="https://lzylzy.cf/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>P5019 [NOIP2018 提高组] 铺设道路</title>
    <link href="https://lzylzy.cf/posts/46a8d1e6.html"/>
    <id>https://lzylzy.cf/posts/46a8d1e6.html</id>
    <published>2021-07-11T10:25:55.000Z</published>
    <updated>2021-07-11T10:33:02.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>地面上有n个坑，每个坑深度为d[i]</p><p>每次可以选择连续一段深度不为0的坑，使他们的深度-1</p><p>求最少操作数。</p><a id="more"></a><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>贪心题。</p><p>分两种情况讨论</p><ol><li><p>$ d[i]&lt;d[i-1]$ 上一个坑更深。这样当前坑一定可以在上一个坑被填时顺便填满，所以不占操作数。</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mo>=</mo><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d[i]&gt;=d[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 当前坑更深。由于上一个坑已经填满，所以我们把当前坑填满要多用$ a[i]-a[i-1]$次操作。</p></li></ol><p>结束。</p><p>code：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100009</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line">ll ans=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>])ans+=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;地面上有n个坑，每个坑深度为d[i]&lt;/p&gt;
&lt;p&gt;每次可以选择连续一段深度不为0的坑，使他们的深度-1&lt;/p&gt;
&lt;p&gt;求最少操作数。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="贪心" scheme="https://lzylzy.cf/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>P2365 任务安排</title>
    <link href="https://lzylzy.cf/posts/a975b051.html"/>
    <id>https://lzylzy.cf/posts/a975b051.html</id>
    <published>2021-07-11T10:10:42.000Z</published>
    <updated>2021-07-11T10:33:26.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p><em>n</em> 个任务排成一个序列在一台机器上等待完成（顺序不得改变），这 n个任务被分成若干批，每批包含相邻的若干任务。</p><p>从零时刻开始，这些任务被分批加工，第 i个任务单独完成所需的时间为 ti。在每批任务开始前，机器需要启动时间 <em>s</em>，而完成这批任务所需的时间是各个任务需要时间的总和（同一批任务将在同一时刻完成）。</p><p>每个任务的费用是它的完成时刻乘以一个费用系数 fi。请确定一个分组方案，使得总费用最小。</p><a id="more"></a><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>由于n的范围是5000，O(n^2)的算法也能通过，不过这里使用斜率优化。</p><p>先推最朴素的转移式。设F[i]为完成第i个任务所需的总费用</p><p>枚举一个断点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>，从j+i到i为一组进行</p><p>由于开动机器S对以后所有的任务都会有影响，所以这里提前计算开动一次机器对以后的影响</p><p>$ f[i]=f[j]+t[i]<em>(c[i]-c[j])+s</em>(c[n]-c[j])$</p><p>这里t表示时间的前缀和，c表示费用系数的前缀和</p><p>注意我们只需要加上当前任务的花费，而不需要算出这一批所有任务的花费</p><p>接着观察这个式子，套用斜率优化的模板</p><hr><p>我们把式子移项，直到变成y=kx+b的形式</p><p>其中</p><ul><li>y只和j有关</li><li>k只和i有关</li><li>x只和j有关</li><li>b只和i有关</li></ul><p>得到</p><ul><li><p>$ y=f[j]-s*c[j]$</p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">k=t[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>c</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x=c[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mo>∗</mo><mi>c</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">b=f[i]-s*c[n]-t[i]*c[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></p><p>这样就能结束战斗。</p><p>code:</p></li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,s;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5009</span></span><br><span class="line"><span class="keyword">int</span> a[maxn],c[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">int</span> q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(<span class="keyword">int</span> j)</span></span>{<span class="keyword">return</span> c[j];}</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Y</span><span class="params">(<span class="keyword">int</span> j)</span></span>{<span class="keyword">return</span> f[j]-c[j]*s;}</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>*(<span class="keyword">double</span>)(Y(y)-Y(x))/(X(y)-X(x));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t[i],&amp;c[i]);</span><br><span class="line">t[i]+=t[i<span class="number">-1</span>];c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k=t[i];</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;k)head++;</span><br><span class="line"><span class="keyword">int</span> j=q[head];</span><br><span class="line">f[i]=f[j]+t[i]*(c[i]-c[j])+s*(c[n]-c[j]);</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[tail],i)&lt;slope(q[tail<span class="number">-1</span>],i))tail--;</span><br><span class="line">q[++tail]=i;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;n&lt;/em&gt; 个任务排成一个序列在一台机器上等待完成（顺序不得改变），这 n个任务被分成若干批，每批包含相邻的若干任务。&lt;/p&gt;
&lt;p&gt;从零时刻开始，这些任务被分批加工，第 i个任务单独完成所需的时间为 ti。在每批任务开始前，机器需要启动时间 &lt;em&gt;s&lt;/em&gt;，而完成这批任务所需的时间是各个任务需要时间的总和（同一批任务将在同一时刻完成）。&lt;/p&gt;
&lt;p&gt;每个任务的费用是它的完成时刻乘以一个费用系数 fi。请确定一个分组方案，使得总费用最小。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
      <category term="斜率优化" scheme="https://lzylzy.cf/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>P2850 [USACO06DEC]Wormholes G</title>
    <link href="https://lzylzy.cf/posts/549718b.html"/>
    <id>https://lzylzy.cf/posts/549718b.html</id>
    <published>2021-05-29T13:11:46.000Z</published>
    <updated>2021-05-29T13:23:51.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>判断有没有负环，多组数据</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>判断负环的几个思路</p><h3 id="floyd"><a class="markdownIt-Anchor" href="#floyd"></a> Floyd</h3><p>最简单且容易理解的方法</p><a id="more"></a><p>邻接矩阵xy值相同时，如果有点的值为负数，则出现了负环</p><p>因为负数 表示自己可以通过负权边到达自己，也就是说出现了负环</p><h3 id="bellman-ford"><a class="markdownIt-Anchor" href="#bellman-ford"></a> Bellman-ford</h3><p>这个算法通过不断迭代计算最短路，因为每轮迭代扫描所有边，第k轮迭代结束，走过k条边的最短路都会被计算完成</p><p>当某条最短路的长度大于n，那么一定出现了负环</p><h3 id="spfa"><a class="markdownIt-Anchor" href="#spfa"></a> spfa</h3><p>判断一个点的入队次数，如果&gt;=n说明有负环，因为松弛贡献&gt;=n说明这条最短路的长度在n以上</p><p>在判断负环这方面，dfs版的spfa表现更加优秀，因为dfs只需要判断一个节点访问两次就可以发现负环</p><p>更具体地，当一个节点在栈内，证明这个点正在更新别人，而再次访问到自己，证明自己更新自己，则出现负环</p><p>code（dfs-spfa）</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 509</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],val[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,w;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">val[x].push_back(z);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> in[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(in[x])flag=<span class="number">1</span>;<span class="comment">//一个点访问两次就是负环 </span></span><br><span class="line"><span class="keyword">if</span>(flag)<span class="keyword">return</span>;</span><br><span class="line">in[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(dis[to]&gt;dis[x]+val[x][i])</span><br><span class="line">{</span><br><span class="line">dis[to]=dis[x]+val[x][i];</span><br><span class="line">spfa(to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">in[x]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">son[i].clear();val[i].clear();</span><br><span class="line">}</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;w);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">add(x,y,z);add(y,x,z);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">add(x,y,-z);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">spfa(i);</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;判断有没有负环，多组数据&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;判断负环的几个思路&lt;/p&gt;
&lt;h3 id=&quot;floyd&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#floyd&quot;&gt;&lt;/a&gt; Floyd&lt;/h3&gt;
&lt;p&gt;最简单且容易理解的方法&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="SPFA" scheme="https://lzylzy.cf/tags/SPFA/"/>
    
      <category term="最短路" scheme="https://lzylzy.cf/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>P6568 [NOI Online #3 提高组] 水壶</title>
    <link href="https://lzylzy.cf/posts/7ff9b54a.html"/>
    <id>https://lzylzy.cf/posts/7ff9b54a.html</id>
    <published>2021-05-19T12:09:58.000Z</published>
    <updated>2021-05-21T13:56:19.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>有 n个容量无穷大的水壶，它们从 1∼<em>n</em> 编号，初始时 i号水壶中装有 Ai单位的水。</p><p>你可以进行不超过 k次操作，每次操作需要选择一个 的编号 x，然后把 x 号水壶中的水全部倒入 x+1号水壶中。</p><p>最后你可以任意选择恰好一个水壶，并喝掉水壶中所有的水。现在请你求出，你最多能喝到多少单位的水。</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>贪心题，主要是思维</p><a id="more"></a><p>因为只能喝一个壶里的水</p><p>所以想要喝到最多的水 我们肯定把所有k个连续的水壶里的水倒在一起</p><p>于是问题变成给一段数</p><p>求连续k+1个数的和的最大值</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000009</span></span><br><span class="line">ll a[maxn]; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line">ll s=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">s+=a[i];</span><br><span class="line"><span class="keyword">if</span>(i&gt;k)s-=a[i-k];</span><br><span class="line">ans=max(s,ans);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;有 n个容量无穷大的水壶，它们从 1∼&lt;em&gt;n&lt;/em&gt; 编号，初始时 i号水壶中装有 Ai单位的水。&lt;/p&gt;
&lt;p&gt;你可以进行不超过 k次操作，每次操作需要选择一个 的编号 x，然后把 x 号水壶中的水全部倒入 x+1号水壶中。&lt;/p&gt;
&lt;p&gt;最后你可以任意选择恰好一个水壶，并喝掉水壶中所有的水。现在请你求出，你最多能喝到多少单位的水。&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;贪心题，主要是思维&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="贪心" scheme="https://lzylzy.cf/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>P6187 [NOI Online #1 提高组] 最小环</title>
    <link href="https://lzylzy.cf/posts/c3ed7f1a.html"/>
    <id>https://lzylzy.cf/posts/c3ed7f1a.html</id>
    <published>2021-05-18T13:06:25.000Z</published>
    <updated>2021-05-21T13:56:19.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定n个数连成一个环，对于每个k，重新排列这n个数是的任意两个距离为k的数的乘积之和最大</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>NOI OL里很好的一道贪心题目</p><p>首先应该分析如何能使乘积的和最大</p><a id="more"></a><p>这样我们就要让大数和大数乘 小数和小数乘</p><p>观察样例不难发现这个方法</p><p>可以求出n k的gcd记为p 则n/p就是每个<strong>互相独立的环的长度</strong></p><p>我们记n/p为t</p><p>这样把最大的挨着第二大的以此类推放入第一个环</p><p>第t+1大的挨着第t+2大的放入下一个环</p><p>最后进行一下优化 发现n和数字都给定了</p><p>所以t不变，答案就不会变</p><p>记忆化一下 存储算过对应t的答案即可</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400009</span></span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">}</span><br><span class="line">ll vis[maxn];</span><br><span class="line">ll b[maxn];</span><br><span class="line"><span class="function">ll <span class="title">work</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> t=n/gcd(n,k);<span class="comment">//每t个数一个独立的循环节 </span></span><br><span class="line"><span class="keyword">if</span>(vis[t])<span class="keyword">return</span> vis[t];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=t)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t<span class="number">-2</span>;j++)</span><br><span class="line">{</span><br><span class="line">ans+=a[i+j]*a[i+j+<span class="number">2</span>];</span><br><span class="line">}</span><br><span class="line">ans+=a[i]*a[i+<span class="number">1</span>]+a[i+t<span class="number">-1</span>]*a[i+t<span class="number">-2</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> vis[t]=ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">ll s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">s+=a[i]*a[i];</span><br><span class="line">}</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,s);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,work(k));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;给定n个数连成一个环，对于每个k，重新排列这n个数是的任意两个距离为k的数的乘积之和最大&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;NOI OL里很好的一道贪心题目&lt;/p&gt;
&lt;p&gt;首先应该分析如何能使乘积的和最大&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI . 贪心" scheme="https://lzylzy.cf/tags/OI-%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>P5058 [ZJOI2004]嗅探器</title>
    <link href="https://lzylzy.cf/posts/142b1c13.html"/>
    <id>https://lzylzy.cf/posts/142b1c13.html</id>
    <published>2021-05-16T10:39:43.000Z</published>
    <updated>2021-05-16T10:52:31.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一张图和S T，求编号最小的割点 无解输出No Solution</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>应该是圆方树的入门题</p><a id="more"></a><p>首先考虑无解的情况，一种是ST根本不连通，或是ST在同一个点双连通分量中</p><p>接着考虑如何计算答案</p><p>根据圆方树的一个性质 两圆点之间经过的圆点是<strong>两点之间所有路径经过的点的并集</strong></p><p>再通俗一点，两圆点路径上的所有圆点都是割点</p><p>于是我们只需要在树上遍历两个点之间的路径就可以了 可以用倍增 LCA等方法，这时你已经可以拿到满分了</p><p>但是既然都做到这了 我们可以接着想想 如何简化这个求法</p><p>一般我们默认根为1 不过现在可以直接把根指定为S</p><p>经过一遍dfs遍历即可知道每个点的父亲 就可以解决问题</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400009</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> cnt,top=<span class="number">0</span>,stk[maxn];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,dfn[maxn],low[maxn];</span><br><span class="line"><span class="keyword">bool</span> same=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">num++;</span><br><span class="line">dfn[x]=low[x]=num;</span><br><span class="line">stk[++top]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[to])</span><br><span class="line">{</span><br><span class="line">tarjan(to);</span><br><span class="line">low[x]=min(low[x],low[to]);</span><br><span class="line"><span class="keyword">if</span>(low[to]==dfn[x])</span><br><span class="line">{</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k!=to;top--)</span><br><span class="line">{</span><br><span class="line">k=stk[top];</span><br><span class="line">t[cnt].push_back(k);</span><br><span class="line">t[k].push_back(cnt);</span><br><span class="line"><span class="keyword">if</span>(k==S||k==T)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(flag)same=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> flag=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">t[x].push_back(cnt);</span><br><span class="line">t[cnt].push_back(x);</span><br><span class="line"><span class="keyword">if</span>(x==S||x==T)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(flag)same=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> flag=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> low[x]=min(low[x],dfn[to]); </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=t[x][i];</span><br><span class="line"><span class="keyword">if</span>(!fa[to])</span><br><span class="line">{</span><br><span class="line">fa[to]=x;</span><br><span class="line">dfs(to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">cnt=n;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">son[y].push_back(x);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;S,&amp;T);</span><br><span class="line">tarjan(S);</span><br><span class="line"><span class="keyword">if</span>(!dfn[T]||same)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No solution\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">dfs(S);</span><br><span class="line"><span class="keyword">int</span> x=fa[T],ans=inf;</span><br><span class="line"><span class="keyword">while</span>(x!=S)</span><br><span class="line">{</span><br><span class="line">ans=min(ans,x);</span><br><span class="line">x=fa[x];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;给定一张图和S T，求编号最小的割点 无解输出No Solution&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;应该是圆方树的入门题&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="强连通分量" scheme="https://lzylzy.cf/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="圆方树" scheme="https://lzylzy.cf/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P4606 [SDOI2018]战略游戏</title>
    <link href="https://lzylzy.cf/posts/94b375e3.html"/>
    <id>https://lzylzy.cf/posts/94b375e3.html</id>
    <published>2021-05-15T03:13:21.000Z</published>
    <updated>2021-05-16T10:51:55.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个连通图，每次给定一个点集S，求有多少可能的点，删掉后使得S中至少两点不连通</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>圆方树经常用来解决图上路径问题</p><p>我们知道圆方树的一个性质，即<strong>两圆点之间经过的圆点是两点之间所有路径经过的点的并集</strong></p><a id="more"></a><p>更通俗地，两圆点之间的园点都是这两个点的割点</p><p>而这题把两个点扩展到了|S|个，我们的思路还是同样的</p><p>我们对原图建出圆方树，发现答案就是一个最小的覆盖所有给定圆点的集合</p><p>这个集合当中的圆点个数，再减去|S|</p><p><img src="https://i.loli.net/2021/05/15/OqHn6NIdEeU2z4r.png" alt="P4606 [SDOI2018]战略游戏" loading="lazy"></p><p>接下来的问题是如何统计其中的圆点</p><p>我们把每条<strong>从圆点出发向上的</strong>边权值设为1</p><p>更具体地，可以通过一遍dfs 当向下走而目标是圆点时，这条边有权值，否则为0</p><p>接下来按照<strong>dfs序</strong>排序</p><p>排序之后求出所有dfs序相邻点之间路径的权值和</p><p>这个和就是所有边权值和的两倍</p><p>统计完之后，如果深度最小的点是圆点 记得把答案+1</p><p>因为它没有贡献向上的边</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400009</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> low[maxn],dfn[maxn],stk[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line"><span class="keyword">int</span> dfk[maxn],ff=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> top=<span class="number">0</span>,cnt=n;</span><br><span class="line"><span class="keyword">int</span> fa[maxn][<span class="number">20</span>],num=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> s[maxn];<span class="comment">//这个点到根路径上的和 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> dfk[a]&lt;dfk[b];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">stk[++top]=x;</span><br><span class="line">num++;</span><br><span class="line">low[x]=dfn[x]=num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[to])</span><br><span class="line">{</span><br><span class="line">tarjan(to);</span><br><span class="line">low[x]=min(low[x],low[to]);</span><br><span class="line"><span class="keyword">if</span>(low[to]==dfn[x])<span class="comment">//找到一个点双 </span></span><br><span class="line">{</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k!=to;top--)</span><br><span class="line">{</span><br><span class="line">k=stk[top];</span><br><span class="line">t[cnt].push_back(k);</span><br><span class="line">t[k].push_back(cnt);</span><br><span class="line">}</span><br><span class="line">t[x].push_back(cnt);</span><br><span class="line">t[cnt].push_back(x);</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> low[x]=min(low[x],dfn[to]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">dfk[x]=++ff;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=t[x][i];</span><br><span class="line"><span class="keyword">if</span>(!fa[to][<span class="number">0</span>])</span><br><span class="line">{</span><br><span class="line">fa[to][<span class="number">0</span>]=x;</span><br><span class="line">dep[to]=dep[x]+<span class="number">1</span>;</span><br><span class="line">s[to]=s[x];</span><br><span class="line"><span class="keyword">if</span>(to&lt;=n)s[to]++; </span><br><span class="line">dfs(to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> lca;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])swap(x,y);</span><br><span class="line"><span class="keyword">int</span> k=dep[x]-dep[y],l=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans=s[x]+s[y];</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)x=fa[x][l];</span><br><span class="line">l++;k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line">{</span><br><span class="line">lca=x;</span><br><span class="line"><span class="keyword">return</span> ans<span class="number">-2</span>*s[lca];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(fa[x][i]!=fa[y][i])</span><br><span class="line">{</span><br><span class="line">x=fa[x][i],y=fa[y][i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">lca=fa[x][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> ans<span class="number">-2</span>*s[lca];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">num=<span class="number">0</span>;cnt=n;ff=<span class="number">0</span>;top=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low));</span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line"><span class="built_in">memset</span>(dfk,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfk));</span><br><span class="line"><span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line"><span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>*n;i++)</span><br><span class="line">{</span><br><span class="line">son[i].clear();t[i].clear();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">son[y].push_back(x);</span><br><span class="line">}</span><br><span class="line">tarjan(<span class="number">1</span>);</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line">fa[j][i]=fa[fa[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=l;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[j]);</span><br><span class="line">}</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+l,cmp);</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;l;i++)</span><br><span class="line">{</span><br><span class="line">sum+=LCA(a[i],a[i+<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line">sum+=LCA(a[<span class="number">1</span>],a[l]);</span><br><span class="line">sum/=<span class="number">2</span>;</span><br><span class="line">sum-=l;</span><br><span class="line"><span class="keyword">if</span>(lca&lt;=n)sum++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;给定一个连通图，每次给定一个点集S，求有多少可能的点，删掉后使得S中至少两点不连通&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;圆方树经常用来解决图上路径问题&lt;/p&gt;
&lt;p&gt;我们知道圆方树的一个性质，即&lt;strong&gt;两圆点之间经过的圆点是两点之间所有路径经过的点的并集&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="强连通分量" scheme="https://lzylzy.cf/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="圆方树" scheme="https://lzylzy.cf/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"/>
    
      <category term="LCA" scheme="https://lzylzy.cf/tags/LCA/"/>
    
      <category term="倍增" scheme="https://lzylzy.cf/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>圆方树 &amp;&amp; P4630 [APIO2018] Duathlon 铁人两项</title>
    <link href="https://lzylzy.cf/posts/ff118e30.html"/>
    <id>https://lzylzy.cf/posts/ff118e30.html</id>
    <published>2021-05-04T03:18:46.000Z</published>
    <updated>2021-05-04T03:36:46.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一张简单无向图，问有多少对三元组 ⟨s,c,f⟩（s,c,fs,c,f 互不相同）使得存在一条简单路径从 s 出发，经过 c 到达 f。</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p><a href="https://www.cnblogs.com/PinkRabbit/p/10446473.html" target="_blank" rel="external nofollow noopener noreferrer">圆方树入门</a></p><p>兔队讲的超级透彻 建议先去读他的文章（</p><a id="more"></a><p>讲的通俗一点 个人觉得最重要的是下面这句</p><p><strong>即同一个点双中的两不同点 u,v 之间一定存在一条简单路径经过给定的在同一个点双内的另一点 w。</strong></p><p>一个方点表示一个点双，和方点相连的所有点都是点双中的点</p><p>于是对于固定的s f，所有可能c的个数就是路径上经过的圆点 还有所有经过的方点的相邻圆点数量之和</p><blockquote><p>接下来是圆方树的一个常用技巧：路径统计时，点赋上合适的权值。<br>本题中，每个方点的权值为对应点双的大小，而每个圆点权值为 −1。</p><p>这样赋权后则有两圆点间圆方树上路径点权和，恰好等于原图中简单路径并集大小减 2。</p></blockquote><p>圆点赋值都为-1 这样可以在两端都有方点的时候减去重复计算的部分</p><p>还可以在最后减去开始和结尾两个点 恰好算出答案</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200009</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> low[maxn*<span class="number">2</span>],dfn[maxn*<span class="number">2</span>];</span><br><span class="line">ll cnt=<span class="number">0</span>,num=<span class="number">0</span>,dfk=<span class="number">0</span>;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn*<span class="number">2</span>],t[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> stk[maxn],top=<span class="number">0</span>;</span><br><span class="line">ll val[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//构建圆方树，赋值 </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">dfn[x]=low[x]=++dfk;</span><br><span class="line">stk[++top]=x;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[to])</span><br><span class="line">{</span><br><span class="line">tarjan(to);</span><br><span class="line">low[x]=min(low[x],low[to]);</span><br><span class="line"><span class="keyword">if</span>(low[to]==dfn[x])</span><br><span class="line">{</span><br><span class="line"><span class="comment">//出现了一坨点双 </span></span><br><span class="line">cnt++;</span><br><span class="line">val[cnt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x != to; --top) {</span><br><span class="line">x = stk[top];</span><br><span class="line">t[cnt].push_back(x);</span><br><span class="line">t[x].push_back(cnt);</span><br><span class="line">++val[cnt];</span><br><span class="line">}</span><br><span class="line">val[cnt]++;</span><br><span class="line"><span class="keyword">int</span> k=x;</span><br><span class="line">t[k].push_back(cnt);</span><br><span class="line">t[cnt].push_back(k);</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">low[x]=min(low[x],dfn[to]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;dfn[x]&lt;&lt;" "&lt;&lt;low[x]&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> size[maxn*<span class="number">2</span>]; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span><span class="comment">//从x出发 </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//num是圆点 </span></span><br><span class="line"><span class="comment">//size是这个子树里的圆点 </span></span><br><span class="line">size[x]=(x&lt;=n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=t[x][i];</span><br><span class="line"><span class="keyword">if</span>(to==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(to,x);</span><br><span class="line">ans+=<span class="number">2l</span>l*val[x]*size[x]*size[to];</span><br><span class="line">size[x]+=size[to];</span><br><span class="line">}</span><br><span class="line">ans+=<span class="number">2l</span>l*val[x]*size[x]*(num-size[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">cnt=n;</span><br><span class="line"><span class="built_in">memset</span>(val,<span class="number">-1</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">son[y].push_back(x);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!dfn[i])</span><br><span class="line">{</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">tarjan(i);</span><br><span class="line">top=<span class="number">0</span>;<span class="comment">//根节点不会出栈 </span></span><br><span class="line">dfs(i,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;给定一张简单无向图，问有多少对三元组 ⟨s,c,f⟩（s,c,fs,c,f 互不相同）使得存在一条简单路径从 s 出发，经过 c 到达 f。&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题解&quot;&gt;&lt;/a&gt; 题解&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/PinkRabbit/p/10446473.html&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;圆方树入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;兔队讲的超级透彻 建议先去读他的文章（&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="圆方树" scheme="https://lzylzy.cf/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P2986 [USACO10MAR]Great Cow Gathering G</title>
    <link href="https://lzylzy.cf/posts/b8b65d.html"/>
    <id>https://lzylzy.cf/posts/b8b65d.html</id>
    <published>2021-02-28T14:20:17.000Z</published>
    <updated>2021-05-04T03:32:22.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>点有点权边有边权，求树的重心</p><h2 id="暴力"><a class="markdownIt-Anchor" href="#暴力"></a> 暴力</h2><p>最好想的方法是枚举选择的节点，然后挨个计算这个节点的费用</p><p>复杂度是O(n^2)</p><h2 id="正解"><a class="markdownIt-Anchor" href="#正解"></a> 正解</h2><p>暴力需要枚举每一个节点，我们想，如果能从上一个节点的答案推出下一个节点的答案，是不是就能省去一个n的复杂度</p><a id="more"></a><p>于是变成了树形dp问题</p><h4 id="设计状态"><a class="markdownIt-Anchor" href="#设计状态"></a> <strong>设计状态</strong></h4><p>树形dp状态往往跟子树有关</p><p>设size[i]表示以i为根的子树总共有多少头牛</p><p>dis[i]表示i子树<strong>所有的儿子都走到点i的总费用</strong></p><p>f[i]表示以i点作为重心的总费用，最小的f[i]即为答案</p><h4 id="求解方法"><a class="markdownIt-Anchor" href="#求解方法"></a> <strong>求解方法</strong></h4><p>dfs，这里可以两次dfs</p><p>第一次预处理出size和dis数组</p><p>第二次计算f</p><p>当有了f[fa],size和dis数组时可以O(1)转移，读者不妨手推一下式子</p><p>dfs2中有关于转移的注释</p><h4 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf=<span class="number">10000000000000000</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100009</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],val[maxn];</span><br><span class="line"><span class="keyword">int</span> size[maxn];<span class="comment">//以i为根的子树有多少个牛 </span></span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];<span class="comment">//子树i的所有儿子到i的总费用 </span></span><br><span class="line"><span class="keyword">int</span> mindis=inf,ans;</span><br><span class="line"><span class="keyword">int</span> f[maxn];<span class="comment">//选择i的总费用 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">size[x]=c[x];</span><br><span class="line">dis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(to!=fa)</span><br><span class="line">{</span><br><span class="line">dfs(to,x);</span><br><span class="line">size[x]+=size[to];</span><br><span class="line">dis[x]+=dis[to]+val[x][i]*size[to];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;" size:"&lt;&lt;size[x]&lt;&lt;" dis:"&lt;&lt;dis[x]&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> dist)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x!=<span class="number">1</span>)f[x]=f[fa]-dis[x]-size[x]*dist+(sum-size[x])*dist;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对于一个f[i]，大体思路是求出上面的节点走父亲过来的费用</span></span><br><span class="line"><span class="comment">再加上dis[i]</span></span><br><span class="line"><span class="comment">求上面节点的总牛数是(sum-size[x]) 乘以过来的费用dist</span></span><br><span class="line"><span class="comment">再加上上面所有节点到fa的费用,f[fa]-dis[x]-size[x]*dist,</span></span><br><span class="line"><span class="comment">就是父亲的总费用减去自己子树里节点到父亲的费用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">f[x]+=dis[x];</span><br><span class="line"><span class="keyword">if</span>(f[x]&lt;mindis)</span><br><span class="line">{</span><br><span class="line">mindis=f[x];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(to!=fa)</span><br><span class="line">{</span><br><span class="line">dfs2(to,x,val[x][i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//freopen("2986.in","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;c[i]);</span><br><span class="line">sum+=c[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">val[x].push_back(z);<span class="comment">//x-&gt;y</span></span><br><span class="line">son[y].push_back(x);</span><br><span class="line">val[y].push_back(z);</span><br><span class="line">}</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mindis);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;点有点权边有边权，求树的重心&lt;/p&gt;
&lt;h2 id=&quot;暴力&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#暴力&quot;&gt;&lt;/a&gt; 暴力&lt;/h2&gt;
&lt;p&gt;最好想的方法是枚举选择的节点，然后挨个计算这个节点的费用&lt;/p&gt;
&lt;p&gt;复杂度是O(n^2)&lt;/p&gt;
&lt;h2 id=&quot;正解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#正解&quot;&gt;&lt;/a&gt; 正解&lt;/h2&gt;
&lt;p&gt;暴力需要枚举每一个节点，我们想，如果能从上一个节点的答案推出下一个节点的答案，是不是就能省去一个n的复杂度&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>P2120 [ZJOI2007]仓库建设（斜率优化）</title>
    <link href="https://lzylzy.cf/posts/a8ee3eef.html"/>
    <id>https://lzylzy.cf/posts/a8ee3eef.html</id>
    <published>2021-02-24T13:18:25.000Z</published>
    <updated>2021-02-26T04:02:32.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>有N个工厂，第i个有Pi件产品，和第一个工厂的距离是Xi</p><p>现在对于所有工厂i，要么花费Ci建立一个无限容量的仓库，要么把所有产品运送到最近的仓库且 <strong>只能运往编号更大的仓库</strong></p><p>一个产品运送1单位距离的费用是1</p><p>求最小费用</p><p>n \leq 10^6 ，开ll</p><a id="more"></a><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><h3 id="朴素"><a class="markdownIt-Anchor" href="#朴素"></a> 朴素</h3><p>一看是dp题目，不妨先把朴素的式子写出来</p><p>不难想到设Fi表示处理前i个工厂并且在i处建设仓库的最小费用</p><p>枚举一个j</p><p>Fi=Fj+Ci+（运送j+1,j+2…i-1号工厂所有物品到i的费用）</p><p>下面分析括号里的这一部分</p><p>对于一个工厂a，他运送货物到i的费用是 $ (X[a]-X[i])*Pa $</p><p>拆开，得到 $ X[a]*Pa - X[i]*Pa $</p><p>因此我们要做的就是快速求出一段$ X[a]*Pa $ 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">Pa</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">a</span></span></span></span> 的和，这样就能算出连续一段工厂运送物品的费用</p><p>显然可以用前缀和维护，我们设sum[i]表示 X[a]*Pa 的前缀和，sump[i]表示$ Pa $ 的前缀和</p><p>于是得到式子</p><p>[i]=f[j]+c[i]+sum[j]-sum[i]+x[i]*(sump[i]-sump[j]）</p><p>时间复杂度是平方级别，40pts到手</p><h3 id="斜率优化"><a class="markdownIt-Anchor" href="#斜率优化"></a> 斜率优化</h3><p>可能我的方法不大一样，冬令营听来的QwQ</p><p>我们把式子移项，直到变成y=kx+b的形式</p><p>其中</p><ul><li>y只和j有关</li><li>k只和i有关</li><li>x只和j有关</li><li>b只和i有关</li></ul><p>建议手推一下，得到下面的样子</p><p>x[i]* sump[j]    -sump[i]*x[i]+f[i]+sum[i]-c[i]  =   f[j] +sum[j]</p><p>于是</p><p>k=x[i],x=sump[j],b=-sump[i]*x[i]+f[i]+sum[i]-c[i],y=f[j]+sum[j]</p><p>于是可以套上斜率优化的模板了</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10010000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">int</span> sum[maxn],sump[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">int</span> x[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> q[maxn];</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> sump[a];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Y</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> f[a] +sum[a];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>*(<span class="keyword">double</span>)(Y(b)-Y(a))/(<span class="keyword">double</span>)(X(b)-X(a));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> xx,p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;xx,&amp;p,&amp;c[i]);</span><br><span class="line">x[i]=xx;</span><br><span class="line">sum[i]=sum[i<span class="number">-1</span>]+xx*p;</span><br><span class="line">sump[i]=sump[i<span class="number">-1</span>]+p;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//先搞队头 斜率小于k的通通扔掉 </span></span><br><span class="line"><span class="keyword">int</span> k=x[i];</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[head],q[head+<span class="number">1</span>])&lt;k)head++;</span><br><span class="line"><span class="keyword">int</span> j=q[head];</span><br><span class="line">f[i]=f[j]+sum[j]+c[i]-sum[i]+x[i]*(sump[i]-sump[j]);</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail&amp;&amp;slope(q[tail],i)&lt;slope(q[tail<span class="number">-1</span>],i))tail--;</span><br><span class="line">q[++tail]=i;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f[i]表示处理完前i个工厂的费用 </span></span><br><span class="line"><span class="comment">f[i]=f[j]+sum[j]+c[i]+sump[i]*x[i]-sum[i]-x[i]*sump[j]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">x[i]*sump[j]    -sump[i]*x[i]+f[i]+sum[i]-c[i]  =   f[j] +sum[j]</span></span><br><span class="line"><span class="comment">k    x           b                                  y</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一定在第i个工厂建仓库，后面都往下运 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;有N个工厂，第i个有Pi件产品，和第一个工厂的距离是Xi&lt;/p&gt;
&lt;p&gt;现在对于所有工厂i，要么花费Ci建立一个无限容量的仓库，要么把所有产品运送到最近的仓库且 &lt;strong&gt;只能运往编号更大的仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个产品运送1单位距离的费用是1&lt;/p&gt;
&lt;p&gt;求最小费用&lt;/p&gt;
&lt;p&gt;n \leq 10^6 ，开ll&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
      <category term="斜率优化" scheme="https://lzylzy.cf/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>P2922 [USACO08DEC]Secret Message G</title>
    <link href="https://lzylzy.cf/posts/d06a5ae0.html"/>
    <id>https://lzylzy.cf/posts/d06a5ae0.html</id>
    <published>2021-02-15T14:09:33.000Z</published>
    <updated>2021-02-15T14:15:46.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>贝茜正在领导奶牛们逃跑．为了联络，奶牛们互相发送秘密信息．</p><p>信息是二进制的，共有 M条，反间谍能力很强的约翰已经部分拦截了这些信息，知道了第 i 条二进制信息的前 bi位，他同时知道，奶牛使用 N（N≤50000）条暗号．但是，他仅仅知道第 j条暗号的前 cj位。</p><p>对于每条暗号 j，他想知道有多少截得的信息能够和它匹配。也就是说，有多少信息和这条暗号有着相同的前缀。当然，这个前缀长度必须等于暗号和那条信息长度的较小者。</p><p>在输入文件中，位的总数不会超过 500000。</p><a id="more"></a><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>显然是字典树的板子题</p><p>在统计答案时，对于访问到的每一个节点</p><p>加上end[x]，在最后一个节点加上sum[x]</p><p>因为一个串是另一个串的前缀并没有说关系</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500009</span></span><br><span class="line"><span class="keyword">int</span> End[maxn];</span><br><span class="line"><span class="keyword">int</span> ch[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="comment">///ch[u][i]表示节点u的i字符指针指向的节点，若值为0，表示没有这个节点 </span></span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"><span class="comment">//经过这个节点的字符个数 </span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> b[maxn];<span class="comment">//要添加的字符串 </span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!ch[now][b[i]])<span class="comment">//当前节点没有被建立 </span></span><br><span class="line">{</span><br><span class="line">ch[now][b[i]]=++cnt;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//既然访问了now这个点肯定要统计 </span></span><br><span class="line">now=ch[now][b[i]];</span><br><span class="line">sum[now]++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;" and "&lt;&lt;b[i]&lt;&lt;" "&lt;&lt;now&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line">End[now]++;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!ch[now][b[i]])<span class="keyword">return</span> ans;</span><br><span class="line">now=ch[now][b[i]];</span><br><span class="line">ans+=End[now];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans-End[now]+sum[now];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[j]);</span><br><span class="line">add(k);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(k));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;贝茜正在领导奶牛们逃跑．为了联络，奶牛们互相发送秘密信息．&lt;/p&gt;
&lt;p&gt;信息是二进制的，共有 M条，反间谍能力很强的约翰已经部分拦截了这些信息，知道了第 i 条二进制信息的前 bi位，他同时知道，奶牛使用 N（N≤50000）条暗号．但是，他仅仅知道第 j条暗号的前 cj位。&lt;/p&gt;
&lt;p&gt;对于每条暗号 j，他想知道有多少截得的信息能够和它匹配。也就是说，有多少信息和这条暗号有着相同的前缀。当然，这个前缀长度必须等于暗号和那条信息长度的较小者。&lt;/p&gt;
&lt;p&gt;在输入文件中，位的总数不会超过 500000。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="trie树" scheme="https://lzylzy.cf/tags/trie%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>P1344 [USACO4.4]追查坏牛奶Pollutant Control</title>
    <link href="https://lzylzy.cf/posts/a106f089.html"/>
    <id>https://lzylzy.cf/posts/a106f089.html</id>
    <published>2021-01-24T12:02:18.000Z</published>
    <updated>2021-01-24T12:10:09.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>你第一天接手三鹿牛奶公司就发生了一件倒霉的事情：公司不小心发送了一批有三聚氰胺的牛奶。很不幸，你发现这件事的时候，有三聚氰胺的牛奶已经进入了送货网。这个送货网很大，而且关系复杂。你知道这批牛奶要发给哪个零售商，但是要把这批牛奶送到他手中有许多种途径。送货网由一些仓库和运输卡车组成，每辆卡车都在各自固定的两个仓库之间单向运输牛奶。在追查这些有三聚氰胺的牛奶的时候，有必要保证它不被送到零售商手里，所以必须使某些运输卡车停止运输，但是停止每辆卡车都会有一定的经济损失。你的任务是，在保证坏牛奶不送到零售商的前提下，制定出停止卡车运输的方案，使损失最小。</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h2><p>第一行: 两个整数N(2&lt;=N&lt;=32)、M(0&lt;=M&lt;=1000), N表示仓库的数目，M表示运输卡车的数量。仓库1代 表发货工厂，仓库N代表有三聚氰胺的牛奶要发往的零售商。 第2…M+1行: 每行3个整数Si,Ei,Ci。其中Si,Ei表示这 辆卡车的出发仓库，目的仓库。Ci(0 &lt;= C i &lt;= 2,000,000) 表示让这辆卡车停止运输的损失。</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h2><p>两个整数C、T：C表示最小的损失，T表示在损失最小的前提下，最少要停止的卡车数。</p><a id="more"></a><p>典型的最小割题目，但是第二问需要思考一下</p><p>由于最小割=最大流，所以我们可以直接通过 $ Dinic $ 求出最小割</p><p>但如何做到求最小割的时候边数最小？</p><p>一种思路是建一张边权为1的图跑最小割来求得边数</p><p>当然我们完全可以用最大流一次搞定</p><p>我们把所有的边权都加上一个<strong>特别小</strong> 小到不会影响答案的数，例如千分之一或万分之一</p><p>这样最小割的时候就能选出最少的边而答案不会变</p><p>具体地说，在建图时，每条边的边权<strong>W=w*a+1</strong>,a 为大于<strong>M</strong>的数</p><p>在算出答案后,</p><p><strong>ans/a是最小割，ans%a是最少边数</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 10000000000000000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> rev;</span><br><span class="line">}; </span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; son[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">son[x].push_back(node{y,z*maxn+<span class="number">1</span>,son[y].size()});</span><br><span class="line">son[y].push_back(node{x,<span class="number">0</span>,son[x].size()<span class="number">-1</span>});;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">d[S]=<span class="number">0</span>;</span><br><span class="line">q.push(S);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i].to;</span><br><span class="line"><span class="keyword">if</span>(son[x][i].val&amp;&amp;d[to]==<span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line">d[to]=d[x]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(d[T]==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==T||low==<span class="number">0</span>)<span class="keyword">return</span> low;</span><br><span class="line"><span class="keyword">int</span> totflow=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i].to;</span><br><span class="line"><span class="keyword">int</span> rev=son[x][i].rev;</span><br><span class="line"><span class="keyword">int</span> val=son[x][i].val;</span><br><span class="line"><span class="keyword">if</span>(val&amp;&amp;d[to]==d[x]+<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a=dfs(to,min(low,val));</span><br><span class="line">son[x][i].val-=a;</span><br><span class="line">son[to][rev].val+=a;</span><br><span class="line">low-=a;</span><br><span class="line">totflow+=a;</span><br><span class="line"><span class="keyword">if</span>(low==<span class="number">0</span>)<span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low!=<span class="number">0</span>)d[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">add(x,y,z);</span><br><span class="line">}</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line">S=<span class="number">1</span>,T=n;</span><br><span class="line"><span class="keyword">while</span>(bfs())</span><br><span class="line">{</span><br><span class="line">ans+=dfs(S,inf);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ans/maxn,ans%maxn);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;你第一天接手三鹿牛奶公司就发生了一件倒霉的事情：公司不小心发送了一批有三聚氰胺的牛奶。很不幸，你发现这件事的时候，有三聚氰胺的牛奶已经进入了送货网。这个送货网很大，而且关系复杂。你知道这批牛奶要发给哪个零售商，但是要把这批牛奶送到他手中有许多种途径。送货网由一些仓库和运输卡车组成，每辆卡车都在各自固定的两个仓库之间单向运输牛奶。在追查这些有三聚氰胺的牛奶的时候，有必要保证它不被送到零售商手里，所以必须使某些运输卡车停止运输，但是停止每辆卡车都会有一定的经济损失。你的任务是，在保证坏牛奶不送到零售商的前提下，制定出停止卡车运输的方案，使损失最小。&lt;/p&gt;
&lt;h2 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式&lt;/h2&gt;
&lt;p&gt;第一行: 两个整数N(2&amp;lt;=N&amp;lt;=32)、M(0&amp;lt;=M&amp;lt;=1000), N表示仓库的数目，M表示运输卡车的数量。仓库1代 表发货工厂，仓库N代表有三聚氰胺的牛奶要发往的零售商。 第2…M+1行: 每行3个整数Si,Ei,Ci。其中Si,Ei表示这 辆卡车的出发仓库，目的仓库。Ci(0 &amp;lt;= C i &amp;lt;= 2,000,000) 表示让这辆卡车停止运输的损失。&lt;/p&gt;
&lt;h2 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式&lt;/h2&gt;
&lt;p&gt;两个整数C、T：C表示最小的损失，T表示在损失最小的前提下，最少要停止的卡车数。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="网络流" scheme="https://lzylzy.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>ABC187-D Choose Me </title>
    <link href="https://lzylzy.cf/posts/e37a67de.html"/>
    <id>https://lzylzy.cf/posts/e37a67de.html</id>
    <published>2021-01-09T06:20:29.000Z</published>
    <updated>2021-01-09T06:24:08.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem-statement"><a class="markdownIt-Anchor" href="#problem-statement"></a> Problem statement</h2><p>有n个城市，A，T两个人参加竞选</p><p>如果T在i城市进行演讲，则该城市所有人都会给T投票</p><p>否则，A的支持者给A投票，T的支持者不会投票</p><a id="more"></a><hr><p>贪心问题</p><p>显然做出一场演讲会使对手失去ai票</p><p>自己得到(ai+bi)票</p><p>所以每场演讲的贡献是(ai*2+bi)</p><p>按照这个顺序对所有城市排序之后贪心即可</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line">ll a,b;</span><br><span class="line">}a[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp3</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.a*<span class="number">2</span>+a.b==b.a*<span class="number">2</span>+b.b)<span class="keyword">return</span> a.a&gt;b.a;</span><br><span class="line"><span class="keyword">return</span> a.a*<span class="number">2</span>+a.b&gt;b.a*<span class="number">2</span>+b.b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;a[i].a,&amp;a[i].b);</span><br><span class="line">sum+=a[i].a;</span><br><span class="line">}</span><br><span class="line">ll sum2=sum,s=<span class="number">0</span>;;</span><br><span class="line"><span class="keyword">int</span> p1=maxn;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp3);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">sum2-=a[i].a;</span><br><span class="line">s+=a[i].a+a[i].b;</span><br><span class="line"><span class="keyword">if</span>(s&gt;sum2)</span><br><span class="line">{</span><br><span class="line">p1=min(p1,i);<span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,p1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;problem-statement&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#problem-statement&quot;&gt;&lt;/a&gt; Problem statement&lt;/h2&gt;
&lt;p&gt;有n个城市，A，T两个人参加竞选&lt;/p&gt;
&lt;p&gt;如果T在i城市进行演讲，则该城市所有人都会给T投票&lt;/p&gt;
&lt;p&gt;否则，A的支持者给A投票，T的支持者不会投票&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="贪心" scheme="https://lzylzy.cf/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="AT" scheme="https://lzylzy.cf/tags/AT/"/>
    
  </entry>
  
  <entry>
    <title>ABC187-E - Through Path</title>
    <link href="https://lzylzy.cf/posts/3efff2f9.html"/>
    <id>https://lzylzy.cf/posts/3efff2f9.html</id>
    <published>2021-01-09T06:04:42.000Z</published>
    <updated>2021-01-09T06:24:08.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="problem-statement"><a class="markdownIt-Anchor" href="#problem-statement"></a> Problem Statement</h3><p>给定一棵无根树，每次对一条边$ (a,b)$ 进行操作</p><p>让所有a不经过b就能到达的节点权值+k</p><p>或者让所有b不经过a就能到达的节点权值+k</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">2 \le N \le 2 \times 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><a id="more"></a><p>显然是树链剖分的板子</p><p>由于每次操作的都是一条边两端的点 于是可以观察性质</p><p><img src="https://i.loli.net/2021/01/09/258yQHNvjuhBg4D.jpg" alt="" loading="lazy"></p><p>整棵树分为上下两部分 操作是给黄色部分+k或是绿色部分+k</p><p>同样的，无论哪个点为根，能够到达的点不会变化</p><p>所以以1为根，给深度较大的点的子树+k</p><p>或是给整棵树+k，给给深度较大的点的子树-k</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn  600009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 10000000000000000</span></span><br><span class="line"><span class="keyword">int</span> dfn[maxn],cnt,pos[maxn],son[maxn],en[maxn],top[maxn],size1[maxn],fa[maxn],deep[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> val,mark;</span><br><span class="line">}tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">size1[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[rt].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=v[rt][i];</span><br><span class="line"><span class="keyword">if</span>(!size1[to])</span><br><span class="line">{</span><br><span class="line">fa[to]=rt;</span><br><span class="line">deep[to]=deep[rt]+<span class="number">1</span>;</span><br><span class="line">dfs(to);</span><br><span class="line">size1[rt]+=size1[to];</span><br><span class="line"><span class="keyword">if</span>(size1[to]&gt;size1[son[rt]])son[rt]=to;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">top[x]=tp;</span><br><span class="line">cnt++;</span><br><span class="line">pos[x]=cnt;</span><br><span class="line">dfn[cnt]=x;</span><br><span class="line"><span class="keyword">if</span>(son[x]!=<span class="number">0</span>)dfs(son[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=v[x][i];</span><br><span class="line"><span class="keyword">if</span>(!top[to])dfs(to,to);</span><br><span class="line">}</span><br><span class="line">en[x]=cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">tr[x].l=l,tr[x].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">{</span><br><span class="line">tr[x].mark=<span class="number">0</span>;</span><br><span class="line">tr[x].val=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(x*<span class="number">2</span>,l,mid);</span><br><span class="line">Build(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">tr[x].mark=<span class="number">0</span>;</span><br><span class="line">tr[x].val=tr[x*<span class="number">2</span>].val+tr[x*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">tr[x].val%=mod;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">relese</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(tr[x].mark==<span class="number">0</span>||tr[x].l==tr[x].r)<span class="keyword">return</span>;</span><br><span class="line">tr[x*<span class="number">2</span>].val+=(tr[x*<span class="number">2</span>].r-tr[x*<span class="number">2</span>].l+<span class="number">1</span>)*tr[x].mark;</span><br><span class="line">tr[x*<span class="number">2</span>].mark+=tr[x].mark;</span><br><span class="line">tr[x*<span class="number">2</span>+<span class="number">1</span>].val+=(tr[x*<span class="number">2</span>+<span class="number">1</span>].r-tr[x*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>)*tr[x].mark;</span><br><span class="line">tr[x*<span class="number">2</span>+<span class="number">1</span>].mark+=tr[x].mark; </span><br><span class="line">tr[x*<span class="number">2</span>].val%=mod;</span><br><span class="line">tr[x*<span class="number">2</span>].mark%=mod;</span><br><span class="line">tr[x*<span class="number">2</span>+<span class="number">1</span>].mark%=mod;</span><br><span class="line">tr[x*<span class="number">2</span>+<span class="number">1</span>].val%=mod;</span><br><span class="line">tr[x].mark=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">{</span><br><span class="line">tr[x].val+=(tr[x].r-tr[x].l+<span class="number">1</span>)*val;</span><br><span class="line">tr[x].val%=mod;</span><br><span class="line">tr[x].mark+=val;</span><br><span class="line">tr[x].mark%=mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">relese(x);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)Add(x*<span class="number">2</span>,l,r,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)Add(x*<span class="number">2</span>+<span class="number">1</span>,l,r,val);</span><br><span class="line">tr[x].val=tr[x*<span class="number">2</span>].val+tr[x*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">tr[x].val%=mod;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> tr[x].val;</span><br><span class="line">}</span><br><span class="line">relese(x);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans+=Sum(x*<span class="number">2</span>,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) ans+=Sum(x*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">ans%=mod;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCA_add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])swap(x,y);</span><br><span class="line">Add(<span class="number">1</span>,pos[top[x]],pos[x],val);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">}</span><br><span class="line"><span class="comment">//if(x!=y)</span></span><br><span class="line"><span class="comment">//{</span></span><br><span class="line"><span class="keyword">if</span>(pos[x]&gt;pos[y])swap(x,y);</span><br><span class="line">Add(<span class="number">1</span>,pos[x],pos[y],val);</span><br><span class="line"><span class="comment">//}</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA_sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])swap(x,y);</span><br><span class="line">res+=Sum(<span class="number">1</span>,pos[top[x]],pos[x]);</span><br><span class="line">res%=mod;</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(pos[x]&gt;pos[y])swap(x,y);</span><br><span class="line">res+=Sum(<span class="number">1</span>,pos[x],pos[y]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res%mod;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> wped[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line">v[x].push_back(y);</span><br><span class="line">v[y].push_back(x);</span><br><span class="line">a[i]=x,b[i]=y;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> r=<span class="number">1</span>;</span><br><span class="line">dfs(r);</span><br><span class="line">dfs(r,r);</span><br><span class="line">Build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> opt,x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(deep[a[x]]&gt;deep[b[x]])</span><br><span class="line">{</span><br><span class="line">swap(a[x],b[x]);wped[x]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(wped[x]==<span class="number">1</span>)opt++;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>||opt==<span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">Add(<span class="number">1</span>,pos[<span class="number">1</span>],en[<span class="number">1</span>],y);</span><br><span class="line">Add(<span class="number">1</span>,pos[b[x]],en[b[x]],-y);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">Add(<span class="number">1</span>,pos[b[x]],en[b[x]],y);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Sum(<span class="number">1</span>,pos[i],pos[i]));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;problem-statement&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#problem-statement&quot;&gt;&lt;/a&gt; Problem Statement&lt;/h3&gt;
&lt;p&gt;给定一棵无根树，每次对一条边$ (a,b)$ 进行操作&lt;/p&gt;
&lt;p&gt;让所有a不经过b就能到达的节点权值+k&lt;/p&gt;
&lt;p&gt;或者让所有b不经过a就能到达的节点权值+k&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2 \le N \le 2 \times 10^5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8193em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10903em;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="AT" scheme="https://lzylzy.cf/tags/AT/"/>
    
      <category term="线段树" scheme="https://lzylzy.cf/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="树剖" scheme="https://lzylzy.cf/tags/%E6%A0%91%E5%89%96/"/>
    
  </entry>
  
  <entry>
    <title>P4138 [JOISC2014] 挂饰</title>
    <link href="https://lzylzy.cf/posts/7ab2df.html"/>
    <id>https://lzylzy.cf/posts/7ab2df.html</id>
    <published>2021-01-01T14:29:39.000Z</published>
    <updated>2021-01-01T14:58:12.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>JOI君有N个装在手机上的挂饰，编号为1…N。 JOI君可以将其中的一些装在手机上。</p><p>JOI君的挂饰有一些与众不同——其中的一些挂饰附有可以挂其他挂件的挂钩。每个挂件要么直接挂在手机上，要么挂在其他挂件的挂钩上。直接挂在手机上的挂件最多有1个。</p><p>此外，每个挂件有一个安装时会获得的喜悦值，用一个整数来表示。如果JOI君很讨厌某个挂饰，那么这个挂饰的喜悦值就是一个负数。</p><p>JOI君想要最大化所有挂饰的喜悦值之和。注意不必要将所有的挂钩都挂上挂饰，而且一个都不挂也是可以的。</p><a id="more"></a><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h2><p>第一行一个整数N，代表挂饰的个数。</p><p>接下来N行，第i行(1&lt;=i&lt;=N)有两个空格分隔的整数Ai和Bi，表示挂饰i有Ai个挂钩，安装后会获得Bi的喜悦值。</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h2><p>输出一行一个整数，表示手机上连接的挂饰总和的最大值</p><p>1≤<em>N</em>≤2000</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>显然对于传统的背包，本题多了“增加容量”这一选项</p><p>相当于“占用的空间”可以为负数 ，即增加空间</p><p>于是可以先设计出状态，设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 表示前i件物品 <strong>有j个空闲的挂钩</strong></p><p>考虑转移，先枚举每件物品</p><p>还要考虑越界的情况 即 $ j-a[i].num&lt;0$ 表示我们要求的空闲挂钩数太少了 直接跳过即可</p><p>转移方程为</p><p>$ f[i][j]=max(f[i-1][j],f[i-1][max(0,j-a[i].num)+1]+a[i].joy); $</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2009</span></span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f[i][j]表示前i个物品 当前j个挂钩时候的最大值 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> num,joy;</span><br><span class="line">}a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.num&gt;b.num;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].num,&amp;a[i].joy);</span><br><span class="line">f[<span class="number">0</span>][i]=-inf;f[i][n+<span class="number">1</span>]=-inf;</span><br><span class="line">}</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>]=f[<span class="number">0</span>][n+<span class="number">1</span>]=-inf;</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">f[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">{</span><br><span class="line">f[i][j]=max(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][max(<span class="number">0</span>,j-a[i].num)+<span class="number">1</span>]+a[i].joy);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=-inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)ans=max(ans,f[n][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;JOI君有N个装在手机上的挂饰，编号为1…N。 JOI君可以将其中的一些装在手机上。&lt;/p&gt;
&lt;p&gt;JOI君的挂饰有一些与众不同——其中的一些挂饰附有可以挂其他挂件的挂钩。每个挂件要么直接挂在手机上，要么挂在其他挂件的挂钩上。直接挂在手机上的挂件最多有1个。&lt;/p&gt;
&lt;p&gt;此外，每个挂件有一个安装时会获得的喜悦值，用一个整数来表示。如果JOI君很讨厌某个挂饰，那么这个挂饰的喜悦值就是一个负数。&lt;/p&gt;
&lt;p&gt;JOI君想要最大化所有挂饰的喜悦值之和。注意不必要将所有的挂钩都挂上挂饰，而且一个都不挂也是可以的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>ABC180 E - Traveling Salesman among Aerial Cities</title>
    <link href="https://lzylzy.cf/posts/4765f64c.html"/>
    <id>https://lzylzy.cf/posts/4765f64c.html</id>
    <published>2020-12-20T07:59:53.000Z</published>
    <updated>2020-12-20T08:41:44.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h1><p>[传送门][<a href="https://atcoder.jp/contests/abc180/tasks/abc180_e" target="_blank" rel="external nofollow noopener noreferrer">https://atcoder.jp/contests/abc180/tasks/abc180_e</a>]</p><p>在一个三维空间内 任意两点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a,b,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(p,q,r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>的距离定义为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>p</mi><mo>−</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>q</mi><mo>−</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>r</mi><mo>−</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">|p-a|+|q-b|+\max(0,r-c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span></p><p>求从1号点出发 遍历所有点至少一次后再回到一号点的最短距离</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>17</mn></mrow><annotation encoding="application/x-tex">2 \leq N \leq 17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span></span></span></span></p><a id="more"></a><h1 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h1><p>观察n的范围像是状压</p><p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>表示j状态下到达i城市时候的最小花费</p><p>枚举一个点k 若j的二进制中第i位为1且第k位为0，则</p><p>$f[k][j|(1&lt;&lt;k)]=min(f[k][j|(1&lt;&lt;k)],f[i][j]+dis[i][k]);$</p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dis[i][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>表示i到k的最短距离 可以使用Floyd等最短路算法解决</p><p><strong>记得先枚举状态再枚举节点</strong></p><p>最后扫描每个节点的目标状态（全是1）</p><p>找出目标状态再一次回到1号点的最小花费</p><p>此处 因为图上距离的定义 所以我们不必再多枚举其他节点</p><p>code</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20</span></span><br><span class="line"><span class="keyword">int</span> x[maxn],y[maxn],z[maxn];</span><br><span class="line">ll f[maxn][<span class="number">1048579</span>];</span><br><span class="line">ll dis[maxn][maxn];</span><br><span class="line"><span class="function">ll <span class="title">Dis</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll a=x[m],b=y[m],c=z[m];</span><br><span class="line">ll p=x[f],q=y[f],r=z[f];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(p-a)+<span class="built_in">abs</span>(q-b)+max(<span class="number">0l</span>l,r-c);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line">dis[i][j]=Dis(i,j);</span><br><span class="line">}</span><br><span class="line">dis[i][i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i==k)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i!=j&amp;j!=k)</span><br><span class="line">{</span><br><span class="line">dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"> } </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x[i],&amp;y[i],&amp;z[i]);</span><br><span class="line">}</span><br><span class="line">Init();</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;(<span class="number">1</span>&lt;&lt;(n));j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!(j&amp;(<span class="number">1</span>&lt;&lt;i)))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((j&amp;(<span class="number">1</span>&lt;&lt;k)))<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;k&lt;&lt;" "&lt;&lt;dis[i][k]&lt;&lt;endl;</span></span><br><span class="line">f[k][j|(<span class="number">1</span>&lt;&lt;k)]=min(f[k][j|(<span class="number">1</span>&lt;&lt;k)],f[i][j]+dis[i][k]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ll ans=inf;</span><br><span class="line"><span class="keyword">int</span> j=(<span class="number">1</span>&lt;&lt;(n))<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">ans=min(ans,f[i][j]+dis[i][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;f[i][j]&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="官方英文题解"><a class="markdownIt-Anchor" href="#官方英文题解"></a> 官方英文题解</h1><blockquote><p>Since the triangular inequalities hold among the costs of traveling between the cities, so there is no need to travel from one city to another via other cities other than those two cities.</p><p>Searching all the orders of visiting towns requires a total of O(N!∗N)O(N!∗N) time, in which the answer cannot be obtained in time under the constraints this time. The problem can be solved by the following DP:</p><p>DP[i][S]=DP[i][S]= The minimum cost when you are currently at city ii and the set of towns you have already visited is SS</p><p>DP[i][S]=min{DP[j][S∖{i}]+dist(i,j)∣j∈S∖{i}}DP[i][S]=min{DP[j][S∖{i}]+dist(i,j)∣j∈S∖{i}}</p><p>Here, you may hold the set SS itself as a key, but you can treat those sets as integers by associating them with binaries, for example, Associating {0,3,5}{0,3,5} with 20+23+25=4120+23+25=41. That’s why this kind of DP is sometimes called bitDP.</p><p>The integer obtained by the correspondence, f(S)f(S), satisfies the following properties:</p><ul><li>i∈S⟺i∈S⟺ The ii-th bit of f(S)f(S) is 11</li><li>T⊂S⟺(f(T) bitwiseor f(S))=f(S)⟹f(T)≤f(S)T⊂S⟺(f(T) bitwiseor f(S))=f(S)⟹f(T)≤f(S)</li></ul><p>so operations and properties on sets can be represented concisely by bit operations.</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题意&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题意&quot;&gt;&lt;/a&gt; 题意&lt;/h1&gt;
&lt;p&gt;[传送门][&lt;a href=&quot;https://atcoder.jp/contests/abc180/tasks/abc180_e&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://atcoder.jp/contests/abc180/tasks/abc180_e&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;在一个三维空间内 任意两点&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;(a,b,c)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;(p,q,r)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;的距离定义为 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;max&lt;/mi&gt;&lt;mo&gt;⁡&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;|p-a|+|q-b|+\max(0,r-c)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mop&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;求从1号点出发 遍历所有点至少一次后再回到一号点的最短距离&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2 \leq N \leq 17&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8193em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10903em;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="AT" scheme="https://lzylzy.cf/tags/AT/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>P3138 [USACO16FEB]Load Balancing S</title>
    <link href="https://lzylzy.cf/posts/9b7b174.html"/>
    <id>https://lzylzy.cf/posts/9b7b174.html</id>
    <published>2020-12-12T14:03:04.000Z</published>
    <updated>2020-12-12T14:26:48.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Farmer John 的 N(N&lt;=10^5)头奶牛散布在整个农场上。整个农场是一个无限大的二维平面，第 i<em>i</em> 头奶牛的坐标是 xi,yi（保证 均为正奇数，且 x_最大值为1e6），且没有任意两头奶牛在同一位置上。</p><p>FJ 希望修建一条竖直方向的栅栏，它的方程是 x=a，他还希望修建一条水平方向的栅栏，它的方程是 y=b。为了防止栅栏经过奶牛，a,b均要求是偶数。容易发现，这两个栅栏会在 (a,b) 处相交，将整个农场分割为四个区域。</p><p>FJ 希望这四个区域内的奶牛数量较为均衡，尽量避免一个区域奶多而另一个区域奶牛少的情况。令 M<em>M</em> 为四个区域里奶牛最多区域的奶牛数量，请帮 FJ 求出 M 的最小值。</p><a id="more"></a><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h2><p>第一行一个整数 N<em>N</em>。</p><p>接下来 N 行，每行两个整数 x_i,y_i，描述第 i头奶牛的位置。</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h2><p>输出 M 的最小值。</p><h1 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h1><p><strong>最大值最小</strong>是典型的二分描述</p><p>于是初步思路为二分M的值</p><p>接下来的判断操作转化为：给定M 确定是否有两条线把整个图像分成四个矩形 而每个矩形内奶牛数量小于M</p><p>此处利用<strong>双指针法</strong> 即一开始让y为1，尽可能把x变大</p><p>每次让y+1 不断减小x直到(x,y)合法 每次判断复杂度即为O(N)</p><p>如何判断合法？</p><p>简单地说，我们需要在O(logN)或O(1)的时间内 计算一个矩形中点的个数</p><p>此题为弱化版 只有一千个点 但是点的范围为10^6</p><p>所以可以离散化之后使用二维前缀和解决。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">}a[maxn]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.x==b.x)<span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.y==b.y)<span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line"><span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn],maxx,maxy;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> f[x2][y2]+f[x1][y1]-f[x1][y2]-f[x2][y1];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span><span class="comment">//二维前缀和初始化 </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=maxy;j++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//if(f[i][j]==1)cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">f[i][j]+=f[i][j<span class="number">-1</span>]+f[i<span class="number">-1</span>][j]-f[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> lx=<span class="number">1</span>,ly=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">sum=Get(<span class="number">0</span>,<span class="number">0</span>,lx,ly);</span><br><span class="line"><span class="keyword">if</span>(sum&gt;x||lx&gt;maxx)</span><br><span class="line">{</span><br><span class="line">lx--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">lx++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(lx&gt;=<span class="number">1</span>&amp;&amp;ly&lt;=maxy)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//验证lx,ly剩下三块是否符合要求 </span></span><br><span class="line"><span class="keyword">if</span>(Get(lx,<span class="number">0</span>,maxx,ly)&lt;=x&amp;&amp;Get(lx,ly,maxx,maxy)&lt;=x&amp;&amp;Get(<span class="number">0</span>,ly,lx,maxy)&lt;=x)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//cout&lt;&lt;lx&lt;&lt;" "&lt;&lt;ly&lt;&lt;" "&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">ly++;</span><br><span class="line"><span class="keyword">while</span>(Get(<span class="number">0</span>,<span class="number">0</span>,lx,ly)&gt;x&amp;&amp;lx&gt;=<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">lx--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">}</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i].x==last)last=a[i].x,a[i].x=a[i<span class="number">-1</span>].x;</span><br><span class="line"><span class="keyword">else</span> last=a[i].x,a[i].x=a[i<span class="number">-1</span>].x+<span class="number">1</span>;</span><br><span class="line">maxx=max(maxx,a[i].x);</span><br><span class="line">}</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i].y==last)last=a[i].y,a[i].y=a[i<span class="number">-1</span>].y;</span><br><span class="line"><span class="keyword">else</span> last=a[i].y,a[i].y=a[i<span class="number">-1</span>].y+<span class="number">1</span>;</span><br><span class="line">f[a[i].x][a[i].y]=<span class="number">1</span>;</span><br><span class="line">maxy=max(maxy,a[i].y);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//离散化完成 </span></span><br><span class="line">Init();</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=n,ans;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))</span><br><span class="line">{</span><br><span class="line">ans=mid;</span><br><span class="line">r=mid<span class="number">-1</span>;</span><br><span class="line">}<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;Farmer John 的 N(N&amp;lt;=10^5)头奶牛散布在整个农场上。整个农场是一个无限大的二维平面，第 i&lt;em&gt;i&lt;/em&gt; 头奶牛的坐标是 xi,yi（保证 均为正奇数，且 x_最大值为1e6），且没有任意两头奶牛在同一位置上。&lt;/p&gt;
&lt;p&gt;FJ 希望修建一条竖直方向的栅栏，它的方程是 x=a，他还希望修建一条水平方向的栅栏，它的方程是 y=b。为了防止栅栏经过奶牛，a,b均要求是偶数。容易发现，这两个栅栏会在 (a,b) 处相交，将整个农场分割为四个区域。&lt;/p&gt;
&lt;p&gt;FJ 希望这四个区域内的奶牛数量较为均衡，尽量避免一个区域奶多而另一个区域奶牛少的情况。令 M&lt;em&gt;M&lt;/em&gt; 为四个区域里奶牛最多区域的奶牛数量，请帮 FJ 求出 M 的最小值。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="二分" scheme="https://lzylzy.cf/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Atcoder  ABC180游记</title>
    <link href="https://lzylzy.cf/posts/125d13bd.html"/>
    <id>https://lzylzy.cf/posts/125d13bd.html</id>
    <published>2020-10-17T13:00:22.000Z</published>
    <updated>2020-12-20T08:15:04.806Z</updated>
    
    <content type="html"><![CDATA[<p>2020.10.17 纪念人生第一场At</p><p>还是太菜 ABC只写了前四题就走人了</p><hr><h2 id="a-box"><a class="markdownIt-Anchor" href="#a-box"></a> A-box</h2><blockquote><p>从n个球的盒子里拿出来A个 放进去B个 求现在盒子里有多少球</p></blockquote><p>没料到第一题如此良心，是考察基本语法的问题</p><p><s>为啥At不能用万能头啊</s></p><a id="more"></a><p>假装这里有代码</p><h2 id="b-various-distances"><a class="markdownIt-Anchor" href="#b-various-distances"></a> <strong>B - Various distances</strong></h2><blockquote><p>给定n维空间上一个点 求它和源点的曼哈顿距离 欧几里得距离 切比雪夫距离</p></blockquote><p>由于题目给定了计算公式，所以模拟即可 记得开long long</p><p><img src="https://i.loli.net/2020/10/17/2hyf3bnpu97B4VX.jpg" alt="ABC180B" loading="lazy"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">Abs</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">return</span> -x;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line">ll man=<span class="number">0</span>,euc=<span class="number">0</span>,che=-inf;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">ll x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">che=max(che,Abs(x));</span><br><span class="line">man+=<span class="built_in">abs</span>(x);</span><br><span class="line">euc+=x*x;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n%.10lf\n%lld\n"</span>,man,<span class="built_in">sqrt</span>(euc),che);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="c-cream-puff"><a class="markdownIt-Anchor" href="#c-cream-puff"></a> <strong>C - Cream puff</strong></h2><blockquote><p>给定一个数字 求它所有因数 n&lt;=10^12</p></blockquote><p>发现n很大，不能直接枚举</p><p>可以从1到根号n枚举i</p><p>然后使用stack存下来n/i</p><p>倒序输出即可完成后面一半的解</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="built_in">stack</span>&lt;ll&gt; st;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,i);</span><br><span class="line">st.push(n/i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(st.top()*st.top()==n)st.pop();<span class="comment">//细节，平方数要pop一下 </span></span><br><span class="line"><span class="keyword">while</span>(!st.empty())</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,st.top());</span><br><span class="line">st.pop();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="d-takahashi-unevolved"><a class="markdownIt-Anchor" href="#d-takahashi-unevolved"></a> <strong>D - Takahashi Unevolved</strong></h2><p>真正开始有难度的地方</p><blockquote><p>要么让x*a，要么让x+b<br>在X不超过Y的前提下<br>求最大操作次数</p><p>1&lt;x&lt;y&lt;=10^18</p><p>1&lt;A&lt;10^9</p></blockquote><p>发现数据范围超大 不可能枚举</p><p>我们发现，当<strong>X&gt;B</strong>时，做乘法一定时亏损的，因为即使是乘以2也比加上B要差</p><p>所以先一直用乘法，直到X&gt;B的时候就开始一直用加法</p><p>代码有很多细节所以被卡了好久  QwQ</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll x,y,a,b;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;a,&amp;b);</span><br><span class="line">ll step=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=b&amp;&amp;x&lt;y)<span class="comment">//使劲做乘法 </span></span><br><span class="line">{</span><br><span class="line">step++;</span><br><span class="line">x*=a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">if</span>(step)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//这个时候倒退一步 看看做乘法优秀还是加法优秀 </span></span><br><span class="line">x/=a;</span><br><span class="line">x=min(x*a,x+b);</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)<span class="comment">//做乘法的时候就超标了 </span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,step<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ll more=(y-x)/b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,step+more);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要么让x*a，要么让x+b</span></span><br><span class="line"><span class="comment">在X不超过Y的前提下 </span></span><br><span class="line"><span class="comment">求最大操作次数 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">似乎增加一次之后再做乘法就是亏 </span></span><br><span class="line"><span class="comment">所以先乘法 直到亏了之后就一直做加法 </span></span><br><span class="line"><span class="comment">一直做乘法，直到x大于b </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><hr><p>EF看着就没有思路，如果有时间会把题解搬过来的</p><h1 id="e-traveling-salesman-among-aerial-cities"><a class="markdownIt-Anchor" href="#e-traveling-salesman-among-aerial-cities"></a> E - Traveling Salesman among Aerial Cities</h1><p>[传送门][<a href="https://lzylzy.cf/posts/4765f64c.html">https://lzylzy.cf/posts/4765f64c.html</a>]</p><hr><p>于是第一次At就这这样结束了QwQ</p><p>加了56的rating 排名2.3k</p><p>还是太菜 qwq</p><p><img src="https://i.loli.net/2020/10/17/QTX9oqCzMe3ywam.jpg" alt="ABC180" loading="lazy"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020.10.17 纪念人生第一场At&lt;/p&gt;
&lt;p&gt;还是太菜 ABC只写了前四题就走人了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;a-box&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a-box&quot;&gt;&lt;/a&gt; A-box&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;从n个球的盒子里拿出来A个 放进去B个 求现在盒子里有多少球&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没料到第一题如此良心，是考察基本语法的问题&lt;/p&gt;
&lt;p&gt;&lt;s&gt;为啥At不能用万能头啊&lt;/s&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="游记" scheme="https://lzylzy.cf/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>P3387 【模板】缩点</title>
    <link href="https://lzylzy.cf/posts/4796086f.html"/>
    <id>https://lzylzy.cf/posts/4796086f.html</id>
    <published>2020-10-08T08:43:59.000Z</published>
    <updated>2020-10-10T13:20:57.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个 n个点 m条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。</p><p>允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。</p></blockquote><p>算法：Tarjan 缩点 + DAGdp</p><a id="more"></a><p>发现图上可能有环，而重复经过的点只计算一次，我们可以把环缩成点，这样这个点的权值就是环内点权之和</p><p>而环与环之间如何连边呢？扫描原来点连出的每一条边，如果两端的点不在同一个强连通分量里，则把两个强连通分量连边</p><p>这样问题就变成dag（有向无环图）最长路问题</p><p>我们先用拓扑排序找出拓扑序，接着用能到达当前点每一个点来更新当前的答案，所以还要反向建边一次</p><p>写的很丑，还望dalao们多多指教</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100009</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> scc[maxn],scc_cnt=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],st[maxn],top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> val[maxn],in[maxn],l[maxn],f[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],e[maxn],rev[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cnt++;</span><br><span class="line">dfn[x]=low[x]=cnt;</span><br><span class="line">st[++top]=x;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(vis[to])</span><br><span class="line">{</span><br><span class="line">low[x]=min(low[x],dfn[to]);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(!dfn[to])</span><br><span class="line">{</span><br><span class="line">tarjan(to);</span><br><span class="line">low[x]=min(low[x],low[to]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low[x]!=dfn[x])<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">scc_cnt++;</span><br><span class="line"><span class="keyword">do</span>{</span><br><span class="line">k=st[top];</span><br><span class="line">top--;</span><br><span class="line">scc[k]=scc_cnt;</span><br><span class="line">val[scc_cnt]+=a[k];</span><br><span class="line">vis[k]=<span class="number">0</span>;</span><br><span class="line">}<span class="keyword">while</span>(k!=x);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!dfn[i])tarjan(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;son[i].size();j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[i][j];</span><br><span class="line"><span class="keyword">if</span>(scc[i]!=scc[to])</span><br><span class="line">{</span><br><span class="line">e[scc[i]].push_back(scc[to]);</span><br><span class="line">in[scc[to]]++;</span><br><span class="line">rev[scc[to]].push_back(scc[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc_cnt;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>)q.push(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">l[++k]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[now].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[now][i];</span><br><span class="line">in[to]--;</span><br><span class="line"><span class="keyword">if</span>(in[to]==<span class="number">0</span>)q.push(to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc_cnt;i++)</span><br><span class="line">{</span><br><span class="line">f[l[i]]=val[l[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;rev[l[i]].size();j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=rev[l[i]][j];</span><br><span class="line">f[l[i]]=max(f[l[i]],f[to]+val[l[i]]);</span><br><span class="line">}</span><br><span class="line">ans=max(ans,f[l[i]]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给定一个 n个点 m条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。&lt;/p&gt;
&lt;p&gt;允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算法：Tarjan 缩点 + DAGdp&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="强连通分量" scheme="https://lzylzy.cf/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>P1262 间谍网络</title>
    <link href="https://lzylzy.cf/posts/8459da52.html"/>
    <id>https://lzylzy.cf/posts/8459da52.html</id>
    <published>2020-10-03T12:55:34.000Z</published>
    <updated>2020-10-06T11:54:40.623Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一张有向图，可以通过购买一个点解锁它能到达的所有点，求收买整个图的最小花费</p><p>如果无法收买 输出任意一个不能被收买的点</p><p>n&lt;=3000</p></blockquote><a id="more"></a><h3 id="判断可行性"><a class="markdownIt-Anchor" href="#判断可行性"></a> 判断可行性</h3><p>显然我们从可以被收买的点处开始dfs 如果成功遍历整个图 则说明可以完全被收买</p><h3 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h3><p>根据贪心的思想，我们应该优先购买那些入度为0的</p><p>因为如果从其他点可以到达这个点，那么购买前面的点还能省下购买这个点的钱</p><p>而如果出现了环，我们可以用拓展性极强的tarjan解决问题，大体是说<strong>在每个环中找到能够被收买而花费最小的点</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3009</span></span><br><span class="line"><span class="keyword">int</span> dfn[maxn];</span><br><span class="line"><span class="keyword">int</span> low[maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,scc_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> scc[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ok[maxn];</span><br><span class="line"><span class="keyword">int</span> minx[maxn];<span class="comment">//每一个连通块里的最小花费 </span></span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[to])dfs(to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">dfn[x]=++cnt;</span><br><span class="line">low[x]=cnt;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">st[++s]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[to])<span class="comment">//没有被访问 </span></span><br><span class="line">{</span><br><span class="line">tarjan(to);</span><br><span class="line">low[x]=min(low[x],low[to]);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(vis[to])<span class="comment">//成环了 </span></span><br><span class="line">{</span><br><span class="line">low[x]=min(low[x],dfn[to]);</span><br><span class="line">}<span class="comment">//否则是通向了另一个强连通分量 啥也不干 </span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low[x]!=dfn[x])<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">scc_cnt++;</span><br><span class="line">minx[scc_cnt]=inf;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">k=st[s--];</span><br><span class="line">vis[k]=<span class="number">0</span>;</span><br><span class="line">scc[k]=scc_cnt;<span class="comment">//这个点属于scc_cnt个连通块 </span></span><br><span class="line"><span class="keyword">if</span>(ok[k])minx[scc_cnt]=min(minx[scc_cnt],ok[k]);</span><br><span class="line">}<span class="keyword">while</span>(k!=x);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> in[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//freopen("a.in","r",stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">ok[a[i]]=b[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">in[y]++;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//检查连通性 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">{</span><br><span class="line">dfs(a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n%d\n"</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));<span class="comment">//循环利用 </span></span><br><span class="line"><span class="comment">//开始tarjan </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!dfn[i])tarjan(i);</span><br><span class="line"><span class="comment">//统计答案 </span></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));<span class="comment">//循环利用 </span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>&amp;&amp;ok[i])</span><br><span class="line">{</span><br><span class="line">ans+=ok[i];</span><br><span class="line">dfs(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">{</span><br><span class="line">dfs(i);</span><br><span class="line">ans+=minx[scc[i]];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给定一张有向图，可以通过购买一个点解锁它能到达的所有点，求收买整个图的最小花费&lt;/p&gt;
&lt;p&gt;如果无法收买 输出任意一个不能被收买的点&lt;/p&gt;
&lt;p&gt;n&amp;lt;=3000&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="强连通分量" scheme="https://lzylzy.cf/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>P5021 赛道修建</title>
    <link href="https://lzylzy.cf/posts/918782fb.html"/>
    <id>https://lzylzy.cf/posts/918782fb.html</id>
    <published>2020-10-02T12:37:11.000Z</published>
    <updated>2020-10-06T11:55:07.261Z</updated>
    
    <content type="html"><![CDATA[<p>NOIP2018 D1T3</p><blockquote><p>给定一棵带边权的无根树，试找到M条边不重复的路径，使得<strong>长度和最短的路径长度尽量长</strong></p><p>N&lt;=5w</p></blockquote><a id="more"></a><h3 id="转化"><a class="markdownIt-Anchor" href="#转化"></a> 转化</h3><p><strong>长度和最短的路径长度尽量长</strong> 很明显是一个二分答案</p><p>也就是说 我们把问题转化为一个判定问题 只需要求出有没有长度达到mid的M条路径就可以</p><h3 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h3><p>通过递归的方式实现</p><p>考虑一个节点的所有儿子，把他们的边权排序</p><p>我们需要求出的是<strong>儿子中匹配出满足长度的链数</strong> 和 <strong>匹配完成之后剩下的最长边</strong></p><p>显然 我们可以单独选择一条长度大于mid的赛道 而且这是最优秀的选择</p><p>当然我们也可以选择两条边匹配 从而完成一条总和大于mid的赛道</p><p>并且<strong>至多两个</strong>儿子可以拼在一起，因为赛道只能拐一次弯</p><p>而我们在匹配结束后只能留下一条边与他的儿子或者父亲的最大值匹配在一起</p><p>这样有两种方式来构造满足条件的赛道</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NOIP2018 D1T3&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一棵带边权的无根树，试找到M条边不重复的路径，使得&lt;strong&gt;长度和最短的路径长度尽量长&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;N&amp;lt;=5w&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="贪心" scheme="https://lzylzy.cf/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="二分" scheme="https://lzylzy.cf/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>P4310 绝世好题</title>
    <link href="https://lzylzy.cf/posts/434887bc.html"/>
    <id>https://lzylzy.cf/posts/434887bc.html</id>
    <published>2020-10-01T03:57:43.000Z</published>
    <updated>2020-10-01T05:16:12.377Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/10/01/Fny2DhbW65jkEo1.png" alt="image-20201001120143903" loading="lazy"></p><p>一道dp题目</p><a id="more"></a><h2 id="暴力"><a class="markdownIt-Anchor" href="#暴力"></a> 暴力</h2><p>一个比较容易的思路是用f[i]表示以i为结尾的最长长度</p><p>显然$ f[i]=1+max(f[j] \space | \space (j \space and \space i !=0)) $</p><p>这个方程可以使用O(n^2)的复杂度实现</p><h2 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h2><p>为了表述方便   用 <strong>a[i]j</strong> 表示 <strong>a[i]二进制下第j位的值</strong></p><p>这样方程可以转化为</p><p>$ f[i]=1+max(f[j] \space | \space (a[i]k=1,a[j]k=1)) $</p><p>如果先枚举满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi>k</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a[i]k=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的k，那么</p><p>$ f[i]=1+max(f[j] \space | \space (a[j]k=1)) $</p><p>显然后面这项与i无关，可以维护</p><hr><p>我们设数组b</p><p>b[k]表示满足a[j]k=1的f[j]最大值</p><p>b可以用f[i]来更新</p><p>于是方程变为</p><p>$ f[i]=1+max(b[k] \space | \space (a[i]k=1)) $</p><p>解决问题</p><p>细节参考代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int inf=0x7fffffff;</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define maxn 100009</span><br><span class="line">int n;</span><br><span class="line">int f[maxn],b[maxn],a[maxn];</span><br><span class="line">signed main()</span><br><span class="line">{</span><br><span class="line">scanf("%d",&amp;n);</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">scanf("%d",&amp;a[i]);</span><br><span class="line">}</span><br><span class="line">int ans=0;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">for(int k=0;k&lt;=30;k++)</span><br><span class="line">{</span><br><span class="line">if(a[i]&amp;(1&lt;&lt;k))</span><br><span class="line">{</span><br><span class="line">f[i]=max(f[i],1+b[k]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">for(int k=0;k&lt;=30;k++)</span><br><span class="line">{</span><br><span class="line">if(a[i]&amp;(1&lt;&lt;k))</span><br><span class="line">{</span><br><span class="line">b[k]=max(b[k],f[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ans=max(ans,f[i]);</span><br><span class="line">}</span><br><span class="line">printf("%d\n",ans);</span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/10/01/Fny2DhbW65jkEo1.png&quot; alt=&quot;image-20201001120143903&quot;&gt;&lt;/p&gt;
&lt;p&gt;一道dp题目&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF638C Road Improvement</title>
    <link href="https://lzylzy.cf/posts/57405a0b.html"/>
    <id>https://lzylzy.cf/posts/57405a0b.html</id>
    <published>2020-10-01T03:33:40.000Z</published>
    <updated>2020-10-01T04:31:11.270Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述：</h4><p>给定一棵有 <em>N</em> 个节点的树，你可以使用<strong>两支相邻节点的队伍</strong>来修筑它们之间的道路 且 <strong>每支队伍一天只能工作一次</strong>。问最少需要多少天把所有路修完。输出方最短时间和具体方案。<br><em>N</em>≤200000</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>第一行一个整数 N*，表示有 <em>N</em> 个节点，接下来 <em>N</em>-1 行，每行两个整数 <em>u</em> , <em>v</em> ，表示节点 u v 间连有一条路。</p><a id="more"></a><hr><p>题目大意是说维修所有的边，但维修一条边就要占用两端的节点</p><p>也就是说最少的所需天数就是 <strong>节点最大的度数</strong></p><p>如何求出具体的方案呢？</p><p>显然对于每个节点来说，他不可能和他<strong>所有的兄弟和父亲</strong>同一天维修</p><p>根据这个条件dfs就可以给每条边记录下维修顺序了</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200009</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; id[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[maxn]; </span><br><span class="line"><span class="keyword">int</span> md=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vis[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[rt].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[rt][i];</span><br><span class="line"><span class="keyword">if</span>(vis[to])<span class="keyword">continue</span>;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span>(num==last)num++;</span><br><span class="line">ans[num].push_back(id[rt][i]);</span><br><span class="line">dfs(to,num);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">id[x].push_back(i);</span><br><span class="line">son[y].push_back(x);</span><br><span class="line">id[y].push_back(i);</span><br><span class="line">d[x]++;</span><br><span class="line">d[y]++;</span><br><span class="line">md=max(md,max(d[x],d[y]));</span><br><span class="line">}</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,md);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=md;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> l=ans[i].size();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l;j++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述：&lt;/h4&gt;
&lt;p&gt;给定一棵有 &lt;em&gt;N&lt;/em&gt; 个节点的树，你可以使用&lt;strong&gt;两支相邻节点的队伍&lt;/strong&gt;来修筑它们之间的道路 且 &lt;strong&gt;每支队伍一天只能工作一次&lt;/strong&gt;。问最少需要多少天把所有路修完。输出方最短时间和具体方案。&lt;br&gt;
&lt;em&gt;N&lt;/em&gt;≤200000&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;第一行一个整数 N*，表示有 &lt;em&gt;N&lt;/em&gt; 个节点，接下来 &lt;em&gt;N&lt;/em&gt;-1 行，每行两个整数 &lt;em&gt;u&lt;/em&gt; , &lt;em&gt;v&lt;/em&gt; ，表示节点 u v 间连有一条路。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="贪心" scheme="https://lzylzy.cf/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF898D Alarm Clock</title>
    <link href="https://lzylzy.cf/posts/2513c9a5.html"/>
    <id>https://lzylzy.cf/posts/2513c9a5.html</id>
    <published>2020-10-01T03:28:21.000Z</published>
    <updated>2020-10-01T04:10:55.449Z</updated>
    
    <content type="html"><![CDATA[<p>每天晚上Vitalya会设置 n 个闹钟以便明早醒来。每个闹钟都会正好响一分钟，并正好在那一分钟的开始响起，结束停止。给定ai来表示第i个闹钟响起的时间。如果在连续的 m 分钟内有至少 k 个闹钟响起，Vitalya就会醒来。注意Vitalya只会考虑在那一段时间中开始响起的闹钟，即不考虑在之前已经响起而未停止响的闹钟。 Vitalya十分疲劳，他想睡整整一天而不起床。您的任务是计算出需要关掉的闹钟总数的最小值。开始时所有闹钟都是打开状态。</p><a id="more"></a><p>输入输出格式</p><p>输入格式</p><p>第一行包含三个整数 n , m , k (1&lt;=k&lt;=n&lt;=2e5, 1&lt;=m&lt;=1e6)，分别表示闹钟总个数个数和Vitalya醒来的条件中连续时间段的长度和闹钟响起的个数。 第二行包含n个整数a1,a2,…an(1&lt;=ai&lt;=1e6)，分别表示第i个闹钟响起的时间（单位：分钟）。注意ai为乱序。Vitalya的国度一天有1e6分钟。</p><p>输出格式</p><p>输出最少需要关闭的闹钟个数。</p><hr><p>一道贪心题目</p><p>由于不能 <strong>在连续m分钟内响起k个闹钟</strong> ，所以先把闹钟时间排序</p><p>接着看看有没有k个闹钟连续m分钟内出现</p><p>如果有出现，我们关掉最后一个闹钟 这样是最优策略</p><p>因为既可以让前面k-1个闹钟不会吵醒人，而又能最大限度限制后面连续闹钟的出现</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200009</span></span><br><span class="line"><span class="keyword">int</span> a[maxn]; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">q.push(a[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;<span class="number">1000000</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(!q.empty())<span class="keyword">while</span>(!q.empty()&amp;&amp;a[i]-q.front()&gt;=m)q.pop();</span><br><span class="line"><span class="keyword">if</span>(!q.empty()&amp;&amp; q.size()==k<span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">q.push(a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每天晚上Vitalya会设置 n 个闹钟以便明早醒来。每个闹钟都会正好响一分钟，并正好在那一分钟的开始响起，结束停止。给定ai来表示第i个闹钟响起的时间。如果在连续的 m 分钟内有至少 k 个闹钟响起，Vitalya就会醒来。注意Vitalya只会考虑在那一段时间中开始响起的闹钟，即不考虑在之前已经响起而未停止响的闹钟。 Vitalya十分疲劳，他想睡整整一天而不起床。您的任务是计算出需要关掉的闹钟总数的最小值。开始时所有闹钟都是打开状态。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="贪心" scheme="https://lzylzy.cf/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>电磁感应加热在供暖中的应用</title>
    <link href="https://lzylzy.cf/posts/d12f746c.html"/>
    <id>https://lzylzy.cf/posts/d12f746c.html</id>
    <published>2020-10-01T03:26:25.000Z</published>
    <updated>2020-11-15T12:00:12.258Z</updated>
    
    <content type="html"><![CDATA[<p>电磁感应加热器（Electromagnetic induction heater）:基于电磁感应加热原理制造出的加热控制器。</p><p>电磁感应加热来源于<a href="https://baike.baidu.com/item/%E6%B3%95%E6%8B%89%E7%AC%AC/155880" target="_blank" rel="external nofollow noopener noreferrer">法拉第</a>发现的<a href="https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E6%84%9F%E5%BA%94%E7%8E%B0%E8%B1%A1/5976728" target="_blank" rel="external nofollow noopener noreferrer">电磁感应现象</a>，即<a href="https://baike.baidu.com/item/%E4%BA%A4%E5%8F%98/4138609" target="_blank" rel="external nofollow noopener noreferrer">交变</a>的磁场在<a href="https://baike.baidu.com/item/%E5%AF%BC%E4%BD%93/1017277" target="_blank" rel="external nofollow noopener noreferrer">导体</a>中产生<a href="https://baike.baidu.com/item/%E6%84%9F%E5%BA%94%E7%94%B5%E6%B5%81/2734538" target="_blank" rel="external nofollow noopener noreferrer">感应电流</a>，从而导致导体发热。自从发现电流通过导线发生<a href="https://baike.baidu.com/item/%E7%83%AD%E6%95%88%E5%BA%94/1467441" target="_blank" rel="external nofollow noopener noreferrer">热效应</a>后，世界上便出现了很多从事研究制造<a href="https://baike.baidu.com/item/%E7%94%B5%E7%83%AD%E5%99%A8/5451675" target="_blank" rel="external nofollow noopener noreferrer">电热器</a>的发明家。1890年，瑞典技术人员发明了第一台<a href="https://baike.baidu.com/item/%E6%84%9F%E5%BA%94%E7%86%94%E7%82%BC%E7%82%89/3838320" target="_blank" rel="external nofollow noopener noreferrer">感应熔炼炉</a>——开槽式有芯炉；1893年，美国出现了<a href="https://baike.baidu.com/item/%E7%94%B5%E7%86%A8%E6%96%97/2757142" target="_blank" rel="external nofollow noopener noreferrer">电熨斗</a>雏形；1909年，<a href="https://baike.baidu.com/item/%E7%94%B5%E7%81%B6/5307056" target="_blank" rel="external nofollow noopener noreferrer">电灶</a>的出现实现了从电能转化为热能的过程；1916年，美国人发明了闭槽有芯炉，电磁感应技术逐渐进入实用化阶段。</p><a id="more"></a><h2 id="加热原理"><a class="markdownIt-Anchor" href="#加热原理"></a> 加热原理</h2><p>电磁感应加热的原理是感应加热电源产生的<a href="https://baike.baidu.com/item/%E4%BA%A4%E5%8F%98%E7%94%B5%E6%B5%81" target="_blank" rel="external nofollow noopener noreferrer">交变电流</a>通过感应器（即线圈）产生交变磁场，导磁性物体置于其中切割交变磁力线，从而在物体内部产生交变的电流（即涡流），涡流使物体内部的原子高速无规则运动，原子互相碰撞、摩擦而产生热能，从而起到加热物品的效果。即是通过把电能转化为磁能，使被加热钢体感应到磁能而发热的一种加热方式。这种方式它从根本上解决了<a href="https://baike.baidu.com/item/%E7%94%B5%E7%83%AD%E7%89%87" target="_blank" rel="external nofollow noopener noreferrer">电热片</a>，电热圈等电阻式通过<a href="https://baike.baidu.com/item/%E7%83%AD%E4%BC%A0%E5%AF%BC" target="_blank" rel="external nofollow noopener noreferrer">热传导</a>方式加热的效率低下问题。磁电旋热能机组是采用磁场感应电流(又称为涡旋电流)的加热原理；交流工频供电通过控制器产生交变磁场，切割磁力线而在换热器金属部分产生的交变电流(即涡旋电流)，涡旋电流使换热器铁分子高速无规则运动，分子互相碰撞、摩擦而产生热能，如使用石墨钢锅加热温度可以达到1000度以上；特点是加热温度高，换热面积大，转换基本没有流失。</p><p><img src="https://i.loli.net/2020/10/01/aqDeM8QjdZcT3bo.jpg" alt="img" loading="lazy"></p><h2 id="节电原理"><a class="markdownIt-Anchor" href="#节电原理"></a> 节电原理</h2><p>传统的加热行业，普遍采用是的电阻丝和石英加热方式，而这种传统的加热方式，其热效率比较低，电阻丝和石英主要是靠通电后，自身发热然后再把热量传递到料筒上，从而起到加热物品的效果，这种加热效果的热量利用率最高只有50%左右，另外的50%左右的热量都散发到空气中，所有传统的电阻丝加热方式的电能损失高达50%以上。而通过电磁感应加热，是通过电流产生磁场，使得铁质金属管道自身发热，再加上隔热材质，防止管道热量的散发，热利用率高达95%以上，理论上间节电效果可达到50%以上，但考虑到不同质量的电磁感应加热控制器的能量转换效率是不太相同的，以及不同的生产设备和环境，所有电磁加热节能的效果一般至少能够达到30%，最高能够达到70%。</p><h2 id="技术优势"><a class="markdownIt-Anchor" href="#技术优势"></a> 技术优势</h2><p>1.高效节能、快速加热采用内热加热方式，即通过电磁感应使料筒内部金属管自身发热，平均预热时间比电阻圈加热方式缩短2/3，同时热效率高达98%<br>以上，节电效果可达30%-70%。</p><p>2．降低生产成本、提高产品质量加热部分采用特种电缆结构，本身不会产生热量，可承受500℃以上的温度，使用寿命可达5年以上，后期基本无维护费用。因电磁加热是通过电磁感应使料筒自动发热，热利用率高达98%<br>以上，能够充分、均匀的给原料加热，从而提高产品质量。</p><p>3．运行可靠、可控可调主机采用最先进的工业用机板，微电子控制，多路智能闭环系统和完善的保护功能，有效避免了主机老化现象，可充分保证设备长期安全、稳定地运行。</p><p>4．改善工作环境设备表面常温，人体可触摸，大大改善了生产现场的工作环境，有力提高工人生产积极性，减少了传统的降温设施费用。本着“以人为本”的理念，创造更加绿色、节能、安全、舒适的生产环境。</p><p>5.电磁加热机组由于磁力线作用控制水中的Ca(HCO3)2（碳酸氢钙）受热分解析出的CaCO3（方解石）为针状文石结晶，它可在水中任意形成核结晶，不会在受热的金属表面上形成坚硬的水垢。解决了供暖上最难克服的问题。因为不需要软化水，所以不会对水源产生污染。<br>由于磁化水是小分子团，能够进入到已经胶结的水垢层当中去，所以一段时间后磁化水能将原有胶结的水<br>垢分解，达到清理水垢的目。</p><p>6.水电彻底分离。采用电磁感应加热技术，非接触式加热，水电分离，100%解决安全问题。</p><p>7.软启软关。主控电路部分通过软启动软关断技术，解决了开关机瞬间电流过大对设备可</p><p>能造成的损坏。</p><p>8.使用寿命长。磁电旋热能机组所用的大功率模块（IGBT）和控制板均产自德国英飞凌，工作时间达到7万小时，并且该机组产热过程不需要机械做工，因此不会产生机械磨损，所以热效率不会降低，在供暖上均可用40年。</p><h2 id="是否有害"><a class="markdownIt-Anchor" href="#是否有害"></a> 是否有害</h2><p>电磁加热感应节能设备就加热一直受到是否辐射危害人体健康的疑问。电磁感应加热采用磁场感应电流(又称为涡流)的加热原理，它是通过电子线路板组成部分产生交变磁场、当线圈绕在含铁质料筒表面时，料筒即切割交变磁力线而在料筒表面金属部分产生交变的电流(即涡流)，涡流使料筒铁分子高速无规则运动，分子互相碰撞、摩擦而产生热能，使用时会产生一定的辐射。那么，什么频率范围的电磁波对人有害呢?</p><p>单位换算：1MHz=1000KHZ=1000 000Hz ， 电磁加热机芯频率为：20~40KHz<br>IEEE(国际电子电机工程协会)所定对的范围：</p><p>1磁场从0.1MHz左右到300MHz左右的频率范围内，所产生的磁场，其磁场强度超过3毫高斯，即对人体有害，90MHz<br>至300MHz的磁场伤害最大，而愈向上愈接近0.1MHz的磁场<br>伤害愈小，到0.1MHz以下磁场的伤害问题，就更加微不足道了。当然在有害范围其强度在3毫高斯以下，一般而言被视为安全范围。</p><p>2、电场从1.4MHz左右~300MHz的频率范围内所产生的电场，其电场强度超过1mv/m，即对人体有害，强度愈强伤害愈大，而若强度一样，则27MHz左右至300MHz的电场伤害最大，到1.4MHz以下电场的伤害问题，也一样微不足道。又电场与磁场单独存在时，不会像电磁波有向外放射行进的现像，只在其强度范围内有摇摆的波动而已。电</p><p>3、电磁波则90MHz到300MHz的电磁波伤害最大，300MHz以上愈靠近12000MHz，其伤害程度愈小，故由此得知，大哥大之频率900MH及1800MHz，皆在有害范围内。至于工业加热电磁机芯，频率为20~40KHz，属于正常音频信号(20~40kHz范围)，对人体无损。所以请广大用户放心使用电磁加热器。</p><h2 id="应用范围"><a class="markdownIt-Anchor" href="#应用范围"></a> <strong>应用范围</strong></h2><p>学校供暖，泳池加热，生活热水，宿舍供暖，住宅供暖，酒店供暖，会所供暖，商场供暖，健身房洗浴。</p><h1 id="电磁蒸汽机组在工业上的应用"><a class="markdownIt-Anchor" href="#电磁蒸汽机组在工业上的应用"></a> <strong>电磁蒸汽机组在工业上的应用</strong></h1><h2 id="技术原理"><a class="markdownIt-Anchor" href="#技术原理"></a> <strong>技术原理</strong></h2><p>磁电旋热能机组是采用磁场感应电流(又称为涡旋电流)的加热原理；交流工频供电通过控制器产生交变磁场，切割磁力线而在换热器金属部分产生的交变电流(即涡旋电流)，涡旋电流使换热器铁分子高速无规则运动，分子互相碰撞、摩擦而产生热能，如使用石墨钢锅加热温度可以达到1000度以上；特点是加热温度高，换热面积大，转换基本没有流失。</p><h2 id="技术优势-2"><a class="markdownIt-Anchor" href="#技术优势-2"></a> <strong>技术优势</strong></h2><ol><li><p>蒸汽发生器：热媒水小于30升，炉体内部直径小于150mm，无需在锅检所及安检部门办理锅炉登记注册及以后的年检手续</p></li><li><p>安装快捷：可进行分布式安装，安装于用热设备旁边，不受安装环境的限制，有水有电即可，减少系统及管输热损。</p></li><li><p>升温快：基本做到即开即用，无需提前预热。</p></li><li><p>高效节能：根据实验，对比电阻式蒸汽锅炉，节能40-80%</p></li><li><p>绿色环保：无废水，废渣，废气排放。</p></li><li><p>蒸汽品质高：产生过饱和蒸汽,每立方米含水量小于饱和蒸汽标准值。</p></li><li><p>使用寿命长：无机械作功，设备热效率持续稳定。</p></li><li><p>智能控制：实现无人值守，温升、压力、排污均为自动控制，可达到补水不掉压，恒压输出；采用7英寸触摸屏，实现多点保护，保证机组正常运行。</p></li><li><p>水电分离：采用感应加热方式，电感线圈通过射频对炉体进行加热，水电彻底分离，无安全隐患。</p></li><li><p>软启软关：开机定频器无极调整，电流从零至额定功率缓慢上升，<br>无冲击电流，并且电容充电编程启动，对电网无冲击。</p></li><li><p>磁隔离驱动技术，解决了光藕驱动产生的干扰问题。</p></li><li><p>采用高速DSP移相算法，每个输出周期经过精密计算，达到最优节能目的。</p></li><li><p>系统控制采用多级EMI抑制，保证在恶劣电源条件下提供最优质的电源。</p></li></ol><h2 id="与燃气锅炉对比"><a class="markdownIt-Anchor" href="#与燃气锅炉对比"></a> <strong>与燃气锅炉对比</strong></h2><table><thead><tr><th>对比项目</th><th>燃气蒸汽锅炉</th><th>磁电旋蒸汽机组</th></tr></thead><tbody><tr><td>接口费用</td><td>有</td><td>无</td></tr><tr><td>燃料储存场地</td><td>有</td><td>无</td></tr><tr><td>锅炉登记注册</td><td>有</td><td>无</td></tr><tr><td>锅炉年检费用</td><td>有</td><td>无</td></tr><tr><td>消防检查</td><td>有</td><td>无</td></tr><tr><td>司炉工</td><td>有</td><td>无</td></tr><tr><td>污染排放</td><td>废气排放</td><td>无任何排放</td></tr><tr><td>安全性</td><td>有明火燃烧</td><td>无明火燃烧</td></tr><tr><td>分布式安装</td><td>不可以</td><td>可以</td></tr><tr><td>安装距离</td><td>距离车间100米</td><td>车间内就近安装</td></tr><tr><td>热效率</td><td>95%，逐年降低</td><td>97.7%，热效率稳定</td></tr><tr><td>能源品质</td><td>达不到理论值</td><td>电 标准恒定</td></tr><tr><td>蒸汽入力含水量</td><td>较高</td><td>极低</td></tr><tr><td>系统损耗</td><td>较高</td><td>极低</td></tr><tr><td>维护成本</td><td>较高</td><td>极低</td></tr><tr><td>运行成本（燃料）</td><td>价格随行就市</td><td>价格稳定，逐年降低</td></tr><tr><td>对比项目</td><td>燃煤(气)蒸汽锅炉</td><td>磁电旋蒸汽机组</td></tr><tr><td>排烟热损失</td><td>有</td><td>无</td></tr><tr><td>化学燃烧热损失</td><td>有</td><td>无</td></tr><tr><td>机械燃烧热损失</td><td>有</td><td>无</td></tr><tr><td>炉体散热损失</td><td>高</td><td>低</td></tr><tr><td>灰渣物理热损失</td><td>无</td><td>无</td></tr><tr><td>系统热损失</td><td>有</td><td>无</td></tr><tr><td>管输热损失</td><td>有</td><td>无</td></tr></tbody></table><h2 id="与传统锅炉热效率对比"><a class="markdownIt-Anchor" href="#与传统锅炉热效率对比"></a> <strong>与传统锅炉热效率对比</strong></h2><h3 id="工业应用中饱和蒸汽品质及热损分析"><a class="markdownIt-Anchor" href="#工业应用中饱和蒸汽品质及热损分析"></a> <strong>工业应用中“饱和蒸汽”品质及热损分析</strong></h3><ol><li><p>**饱和蒸汽定义：**当液体在密闭空间中蒸发时，液体分子通过液面进入上面空间，成为蒸气分子，由于蒸气分子处于紊乱的热运动之中，它们相互碰撞，和容器壁及液面发生碰撞，在和液面碰撞时，有的分子则被液体分子所吸引，而重新返回液体中成为液体分子，开始蒸发时，进入空间的分子数目多于返回液体中分子的数目，随着蒸发继续进行，空间蒸气分子的密度不断增大，因而返回液体中的分子数目也增多，当单位时间内进入空间的分子数目与返回液体中的分子数目相等时，则蒸发与凝结处于动平衡状态，这时虽然蒸发和凝结仍在进行，但空间中的蒸气分子的密度不再增加，此时的状态称为“饱和状态”。在饱和状态下的液体称为饱和液体，其对应的蒸汽是“饱和蒸汽”。</p></li><li><p><strong>管输过程中蒸汽热损失：</strong></p><p>保温管道散热损失。查表得知在最佳的保温状态下，保温管道（DN50,1Mpa）每100米散热量为3990Kcal/h，按蒸汽经济流速计算，占比约为5%。（如：达不到标准流速，及管道保温达不到理论数值，热损失将按比例加大。）</p><p>系统散热损失。10条生产线开4条，其余6条线的蒸汽管道持续处于高热蒸汽状态，热量损失大。</p><p>蒸汽流量损失。10条生产线开4条，流量由原来的5T/h降至2T/h。蒸汽主管道散热面积不变，散热量不变，管道散热损失由原来的5%增至12.5%。</p><p>疏水阀安装不符合要求。在蒸汽主管道上尤其是在地沟地段，每隔20米左右需正确按装一个疏水阀，增大排水量，提高蒸汽品质。</p><p>冷凝水不回收，排至室外。热量损失约15%。</p></li><li><p><strong>蒸汽在管输中热焓值分析</strong></p></li></ol><p>吨饱和蒸汽在锅炉出力口热焓值为60万大卡，蒸汽分子含量约96%。每公斤水经相变吸收大约在液相下5倍的热量，在蒸汽传输过程中，由于管输散热和系统热损，以及流量热损，使蒸汽分子所含热量损失，损失热量的蒸汽分子相变为水分子（温度相同的过热水），而水分子所含热量为显热，在用热设备入力口处由于含水量的变化，其蒸汽的热焓值会大大降低，如果要准确测量设备实际用热量，需用热计量表。我们在通常使用热量时，通过蒸汽流量计及温度计来计算是不准确的，所以用热设备最终所使用的蒸汽是否每吨含热量为60万大卡就未知可否了。</p><p><img src="https://i.loli.net/2020/10/01/DMybSjT3QOnCmUc.jpg" alt="饱和蒸汽管输含熵值变化示意图" loading="lazy"></p><p>​    4.<strong>电磁蒸汽机组优势</strong></p><p>电磁蒸汽机组可分布式安装，安装于车间用热设备附近，无以上热损失，所以在实际改造中，经常能用小机组替换现有的大锅炉。例如在橡胶内胎企业，用240KW机组(0.33吨)替换原有的4吨锅炉；在保温材料厂用400KW机组(0.6吨)替换原有2吨锅炉。为客户节约生产成本，响应国家节能减排政策。</p><p>技术支持：15898802298@126.COM</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;电磁感应加热器（Electromagnetic induction heater）:基于电磁感应加热原理制造出的加热控制器。&lt;/p&gt;
&lt;p&gt;电磁感应加热来源于&lt;a href=&quot;https://baike.baidu.com/item/%E6%B3%95%E6%8B%89%E7%AC%AC/155880&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;法拉第&lt;/a&gt;发现的&lt;a href=&quot;https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E6%84%9F%E5%BA%94%E7%8E%B0%E8%B1%A1/5976728&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;电磁感应现象&lt;/a&gt;，即&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%A4%E5%8F%98/4138609&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;交变&lt;/a&gt;的磁场在&lt;a href=&quot;https://baike.baidu.com/item/%E5%AF%BC%E4%BD%93/1017277&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;导体&lt;/a&gt;中产生&lt;a href=&quot;https://baike.baidu.com/item/%E6%84%9F%E5%BA%94%E7%94%B5%E6%B5%81/2734538&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;感应电流&lt;/a&gt;，从而导致导体发热。自从发现电流通过导线发生&lt;a href=&quot;https://baike.baidu.com/item/%E7%83%AD%E6%95%88%E5%BA%94/1467441&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;热效应&lt;/a&gt;后，世界上便出现了很多从事研究制造&lt;a href=&quot;https://baike.baidu.com/item/%E7%94%B5%E7%83%AD%E5%99%A8/5451675&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;电热器&lt;/a&gt;的发明家。1890年，瑞典技术人员发明了第一台&lt;a href=&quot;https://baike.baidu.com/item/%E6%84%9F%E5%BA%94%E7%86%94%E7%82%BC%E7%82%89/3838320&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;感应熔炼炉&lt;/a&gt;——开槽式有芯炉；1893年，美国出现了&lt;a href=&quot;https://baike.baidu.com/item/%E7%94%B5%E7%86%A8%E6%96%97/2757142&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;电熨斗&lt;/a&gt;雏形；1909年，&lt;a href=&quot;https://baike.baidu.com/item/%E7%94%B5%E7%81%B6/5307056&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;电灶&lt;/a&gt;的出现实现了从电能转化为热能的过程；1916年，美国人发明了闭槽有芯炉，电磁感应技术逐渐进入实用化阶段。&lt;/p&gt;
    
    </summary>
    
    
      <category term="电磁采暖" scheme="https://lzylzy.cf/categories/%E7%94%B5%E7%A3%81%E9%87%87%E6%9A%96/"/>
    
    
      <category term="电磁" scheme="https://lzylzy.cf/tags/%E7%94%B5%E7%A3%81/"/>
    
      <category term="供暖" scheme="https://lzylzy.cf/tags/%E4%BE%9B%E6%9A%96/"/>
    
  </entry>
  
  <entry>
    <title>【LGR-076】洛谷 ⑨ 月月赛 I &amp; Cnoi2020游记+T1T2题解</title>
    <link href="https://lzylzy.cf/posts/39cc6e8.html"/>
    <id>https://lzylzy.cf/posts/39cc6e8.html</id>
    <published>2020-09-19T08:01:33.000Z</published>
    <updated>2020-09-19T11:36:19.290Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/contest/34123" target="_blank" rel="external nofollow noopener noreferrer">传送门</a></p><p>蒟蒻目前是提高省二菜鸡选手 趁着NOIP前两个月练练手 QwQ</p><p>总体感觉人还是很菜 T1T2写完一共花费1.5h左右，T3T4看了就走人</p><hr><h3 id="t1-cnoi2020子弦"><a class="markdownIt-Anchor" href="#t1-cnoi2020子弦"></a> T1  [Cnoi2020]子弦</h3><blockquote><p>Cirno 有一个字符串 S，并希望你能求出 S 出现次数最多的非空子串的出现次数</p></blockquote><p>观察一分钟发现 子串的长度越长，受到的限制就越多，出现的次数肯定越少</p><a id="more"></a><p>而长度最短的子串出现的次数肯定最多</p><p>长度最短为1，因而题目转化为求给定字符串里出现次数最多的字母的出现次数</p><p>用时：2min</p><p>提交：2</p><hr><h3 id="t2-cnoi2020雷雨"><a class="markdownIt-Anchor" href="#t2-cnoi2020雷雨"></a> T2 [Cnoi2020]雷雨</h3><blockquote><p>幻想乡的纵切面可以抽象成一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的矩形。</p><p>其中每一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的单元格$ (i,j) $都有一个 <strong>电阻计量值</strong>(虚构的概念) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>闪电从<strong>雷雨云</strong>上的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">O</mtext><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\texttt{O}(n,a)O(n,a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord texttt">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span> 发出，击中了<strong>地面</strong>上的 红魔馆 $ \texttt{A}(1,b)A(1,<em>b</em>) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">与</mi><mi mathvariant="normal">迷</mi><mi mathvariant="normal">途</mi><mi mathvariant="normal">竹</mi><mi mathvariant="normal">林</mi></mrow><annotation encoding="application/x-tex">与 迷途竹林</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">与</span><span class="mord cjk_fallback">迷</span><span class="mord cjk_fallback">途</span><span class="mord cjk_fallback">竹</span><span class="mord cjk_fallback">林</span></span></span></span> \texttt{B}(1,c)$。</p><p>雷电是自然的造物，所以覆盖的位置电阻计量值总和最小，即从  O 到 A 与 B 的<strong>两条路径的并集</strong>的电阻计量值的和最小。</p><p>所以在所有位置电阻计量已知的情况下，Cirno 想知道雷电的经过的路径的最小电阻计量值的和。</p><p>$ 0&lt;<em>n</em>,<em>m</em>≤1000,0≤<em>R**i</em>,<em>j</em>≤109,0&lt;<em>a</em>,<em>b</em>,<em>c</em>≤<em>m</em> $</p></blockquote><p>题目大意是给出一个网格图，每个格子都有权值</p><p>从第一行的一个点向最后一行的两个点走最短路径</p><p>特殊的是<strong>两条路径重复的地方只计算一次权值</strong></p><p>容易想到的思路是枚举一个分开的点，先从出发点走到这里，再从这里分开各自走到终点</p><p>于是只要三次Dijkstra就可以实现这个做法</p><p>记得开long long</p><p>另外128的空间用得不能太浪费 比赛大部分时间都卡在空间上。。。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf=<span class="number">100000000000000000</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1001</span></span><br><span class="line"><span class="keyword">int</span> a,b,c,n,m; </span><br><span class="line"><span class="keyword">int</span> r[maxn][maxn];</span><br><span class="line">ll d[maxn*maxn],d1[maxn*maxn],d2[maxn*maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pos(x,y) ((x-1)*m+y)</span></span><br><span class="line"><span class="keyword">int</span> S;</span><br><span class="line"><span class="keyword">int</span> gox[<span class="number">4</span>]={<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>};</span><br><span class="line"><span class="keyword">int</span> goy[<span class="number">4</span>]={<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>};</span><br><span class="line"><span class="keyword">bool</span> vis[maxn*maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">ll dis;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;a)<span class="keyword">const</span>{</span><br><span class="line"><span class="keyword">return</span> dis&gt;a.dis; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(ll d[],<span class="keyword">int</span> sx,<span class="keyword">int</span> sy)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">q.push((node){sx,sy,d[S]});</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> nowx=q.top().x;</span><br><span class="line"><span class="keyword">int</span> nowy=q.top().y;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> now=pos(nowx,nowy);</span><br><span class="line"><span class="keyword">if</span>(vis[now])<span class="keyword">continue</span>;</span><br><span class="line">vis[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> tox=nowx+gox[i];</span><br><span class="line"><span class="keyword">int</span> toy=nowy+goy[i];</span><br><span class="line"><span class="keyword">int</span> to=pos(tox,toy);</span><br><span class="line"><span class="keyword">if</span>(tox&lt;=<span class="number">0</span>||toy&lt;=<span class="number">0</span>||tox&gt;n||toy&gt;m)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(d[to]&gt;d[now]+r[tox][toy])</span><br><span class="line">{</span><br><span class="line">d[to]=d[now]+r[tox][toy];</span><br><span class="line">q.push((node){tox,toy,d[to]});</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;n,&amp;m,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r[i][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">S=pos(n,b);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">d[S]=r[n][b];</span><br><span class="line">dijkstra(d,n,b);</span><br><span class="line"></span><br><span class="line">S=pos(n,c);</span><br><span class="line"><span class="built_in">memset</span>(d1,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d1));</span><br><span class="line">d1[S]=r[n][c];</span><br><span class="line">dijkstra(d1,n,c);</span><br><span class="line"></span><br><span class="line">S=pos(<span class="number">1</span>,a);</span><br><span class="line"><span class="built_in">memset</span>(d2,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(d2));</span><br><span class="line">d2[S]=r[<span class="number">1</span>][a];</span><br><span class="line">dijkstra(d2,<span class="number">1</span>,a);</span><br><span class="line">ll ans=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x=pos(i,j);</span><br><span class="line">ans=min(ans,d[x]+d1[x]+d2[x]<span class="number">-2</span>*r[i][j]);</span><br><span class="line">}</span><br><span class="line"> } </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">网格图上有三个点 从最上面的A出发到下面的B,C </span></span><br><span class="line"><span class="comment">这两条路的交集可以只计算一次长度 </span></span><br><span class="line"><span class="comment">求最短路 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">倒着两边dij </span></span><br><span class="line"><span class="comment">把点权转化成边权 </span></span><br><span class="line"><span class="comment">X-&gt;Y路径的边权是Y点的权值 </span></span><br><span class="line"><span class="comment">初始值不是0 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>耗时：1.5h</p><p>提交：10</p><p>T3T4一打眼就不会所以放弃~</p><p>如果有时间会把赛后题解搬过来的uhhh</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/contest/34123&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蒟蒻目前是提高省二菜鸡选手 趁着NOIP前两个月练练手 QwQ&lt;/p&gt;
&lt;p&gt;总体感觉人还是很菜 T1T2写完一共花费1.5h左右，T3T4看了就走人&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;t1-cnoi2020子弦&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#t1-cnoi2020子弦&quot;&gt;&lt;/a&gt; T1  [Cnoi2020]子弦&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Cirno 有一个字符串 S，并希望你能求出 S 出现次数最多的非空子串的出现次数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;观察一分钟发现 子串的长度越长，受到的限制就越多，出现的次数肯定越少&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>NOIP/CSP c++常用模板</title>
    <link href="https://lzylzy.cf/posts/f974946.html"/>
    <id>https://lzylzy.cf/posts/f974946.html</id>
    <published>2020-09-13T08:33:25.000Z</published>
    <updated>2020-09-13T09:10:20.531Z</updated>
    
    <content type="html"><![CDATA[<p>蒟蒻目前还是提高组选手，模板将会持续更新！目录：<br>线段树 对拍 exgcd st 树状数组 树剖 dijsktra spfa tarjan 匈牙利 埃筛 差分树状数组</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br></pre></td><td class="code"><pre><span class="line">dinic 快速幂取余</span><br><span class="line">Exgcd</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        x=<span class="number">1</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> r=exgcd(b,a%b,x,y);</span><br><span class="line">    <span class="keyword">int</span> t = x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=t-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> p=exgcd(a,b,x,y);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(x+b)%b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">对拍</span><br><span class="line">@echo off</span><br><span class="line">:loop</span><br><span class="line">数据生成器.exe</span><br><span class="line">快速排序.exe</span><br><span class="line">优先队列.exe</span><br><span class="line">fc 快速排序.out 优先队列.out</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> errorlevel <span class="number">1</span> <span class="keyword">goto</span> loop</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">线段树</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>{</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val,mark;</span><br><span class="line">}tr[maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildtree</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    tr[x].l=l;</span><br><span class="line">    tr[x].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    {</span><br><span class="line">        tr[x].val=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> lch=x*<span class="number">2</span>,rch=x*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    buildtree(lch, l, mid);</span><br><span class="line">    buildtree(rch, mid+<span class="number">1</span>, r);</span><br><span class="line">    tr[x].val=tr[x*<span class="number">2</span>].val+tr[x*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(tr[x].mark &amp;&amp; tr[x].l&lt;tr[x].r)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> lch=x*<span class="number">2</span>,rch=x*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        tr[lch].val+=tr[x].mark*((<span class="keyword">long</span> <span class="keyword">long</span>)tr[lch].r-tr[lch].l+<span class="number">1</span>);</span><br><span class="line">        tr[lch].mark+=tr[x].mark;</span><br><span class="line">        tr[rch].val+=tr[x].mark*((<span class="keyword">long</span> <span class="keyword">long</span>)tr[rch].r-tr[rch].l+<span class="number">1</span>);</span><br><span class="line">        tr[rch].mark+=tr[x].mark;</span><br><span class="line">    }</span><br><span class="line">    tr[x].mark=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    release(x);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[x].l &amp;&amp; tr[x].r&lt;=r)</span><br><span class="line">    {</span><br><span class="line">        tr[x].val+=k*((<span class="keyword">long</span> <span class="keyword">long</span>)tr[x].r-tr[x].l+<span class="number">1</span>);</span><br><span class="line">        tr[x].mark+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid=(tr[x].l+tr[x].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">        modify(x*<span class="number">2</span>, l, r, k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r)</span><br><span class="line">        modify(x*<span class="number">2</span>+<span class="number">1</span>, l, r, k);</span><br><span class="line">    tr[x].val=tr[x*<span class="number">2</span>].val+tr[x*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    release(x);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[x].l &amp;&amp; tr[x].r&lt;=r)</span><br><span class="line">        <span class="keyword">return</span> tr[x].val;</span><br><span class="line">    <span class="keyword">int</span> mid=(tr[x].l+tr[x].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">        ans+=query(x*<span class="number">2</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">        ans+=query(x*<span class="number">2</span>+<span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    buildtree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">            modify(<span class="number">1</span>, x, y, k);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(<span class="number">1</span>, x, y));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">树剖</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn  600009</span></span><br><span class="line"><span class="keyword">int</span> dfn[maxn],cnt,pos[maxn],son[maxn],en[maxn],top[maxn],size[maxn],fa[maxn],deep[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> val,mark;</span><br><span class="line">}tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,r,mod;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    size[rt]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[rt].size();i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> to=v[rt][i];</span><br><span class="line">        <span class="keyword">if</span>(!size[to])</span><br><span class="line">        {</span><br><span class="line">            fa[to]=rt;</span><br><span class="line">            deep[to]=deep[rt]+<span class="number">1</span>;</span><br><span class="line">            dfs(to);</span><br><span class="line">            size[rt]+=size[to];</span><br><span class="line">            <span class="keyword">if</span>(size[to]&gt;size[son[rt]])son[rt]=to;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    top[x]=tp;</span><br><span class="line">    cnt++;</span><br><span class="line">    pos[x]=cnt;</span><br><span class="line">    dfn[cnt]=x;</span><br><span class="line">    <span class="keyword">if</span>(son[x]!=<span class="number">0</span>)dfs(son[x],tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size();i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> to=v[x][i];</span><br><span class="line">        <span class="keyword">if</span>(!top[to])dfs(to,to);</span><br><span class="line">    }</span><br><span class="line">    en[x]=cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    tr[x].l=l,tr[x].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    {</span><br><span class="line">        tr[x].mark=<span class="number">0</span>;</span><br><span class="line">        tr[x].val=a[dfn[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    Build(x*<span class="number">2</span>,l,mid);</span><br><span class="line">    Build(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tr[x].mark=<span class="number">0</span>;</span><br><span class="line">    tr[x].val=tr[x*<span class="number">2</span>].val+tr[x*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">    tr[x].val%=mod;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">relese</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(tr[x].mark==<span class="number">0</span>||tr[x].l==tr[x].r)<span class="keyword">return</span>;</span><br><span class="line">    tr[x*<span class="number">2</span>].val+=(tr[x*<span class="number">2</span>].r-tr[x*<span class="number">2</span>].l+<span class="number">1</span>)*tr[x].mark;</span><br><span class="line">    tr[x*<span class="number">2</span>].mark+=tr[x].mark;</span><br><span class="line">    tr[x*<span class="number">2</span>+<span class="number">1</span>].val+=(tr[x*<span class="number">2</span>+<span class="number">1</span>].r-tr[x*<span class="number">2</span>+<span class="number">1</span>].l+<span class="number">1</span>)*tr[x].mark;</span><br><span class="line">    tr[x*<span class="number">2</span>+<span class="number">1</span>].mark+=tr[x].mark; </span><br><span class="line">    tr[x*<span class="number">2</span>].val%=mod;</span><br><span class="line">    tr[x*<span class="number">2</span>].mark%=mod;</span><br><span class="line">    tr[x*<span class="number">2</span>+<span class="number">1</span>].mark%=mod;</span><br><span class="line">    tr[x*<span class="number">2</span>+<span class="number">1</span>].val%=mod;</span><br><span class="line">    tr[x].mark=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">    {</span><br><span class="line">        tr[x].val+=(tr[x].r-tr[x].l+<span class="number">1</span>)*val;</span><br><span class="line">        tr[x].val%=mod;</span><br><span class="line">        tr[x].mark+=val;</span><br><span class="line">        tr[x].mark%=mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">    relese(x);</span><br><span class="line">    <span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)Add(x*<span class="number">2</span>,l,r,val);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)Add(x*<span class="number">2</span>+<span class="number">1</span>,l,r,val);</span><br><span class="line">    tr[x].val=tr[x*<span class="number">2</span>].val+tr[x*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">    tr[x].val%=mod;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> tr[x].val;</span><br><span class="line">    }</span><br><span class="line">    relese(x);</span><br><span class="line">    <span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans+=Sum(x*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans+=Sum(x*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    ans%=mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCA_add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])swap(x,y);</span><br><span class="line">        Add(<span class="number">1</span>,pos[top[x]],pos[x],val);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//if(x!=y)</span></span><br><span class="line">    <span class="comment">//{</span></span><br><span class="line">        <span class="keyword">if</span>(pos[x]&gt;pos[y])swap(x,y);</span><br><span class="line">        Add(<span class="number">1</span>,pos[x],pos[y],val);</span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA_sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]])swap(x,y);</span><br><span class="line">        res+=Sum(<span class="number">1</span>,pos[top[x]],pos[x]);</span><br><span class="line">        res%=mod;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(pos[x]&gt;pos[y])swap(x,y);</span><br><span class="line">    res+=Sum(<span class="number">1</span>,pos[x],pos[y]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res%mod;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;r,&amp;mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        v[x].push_back(y);</span><br><span class="line">        v[y].push_back(x);</span><br><span class="line">    }</span><br><span class="line">    dfs(r);</span><br><span class="line">    dfs(r,r);</span><br><span class="line">    Build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> opt;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x,y,z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            LCA_add(x,y,z);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,LCA_sum(x,y));</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x,z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;z);</span><br><span class="line">            Add(<span class="number">1</span>,pos[x],en[x],z);</span><br><span class="line">        }<span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Sum(<span class="number">1</span>,pos[x],en[x]));</span><br><span class="line">        }</span><br><span class="line">    <span class="comment">//    for(int i=1;i&lt;=n;i++)</span></span><br><span class="line">    <span class="comment">//    {</span></span><br><span class="line">    <span class="comment">//        printf("%d: %d\n",i,Sum(1,pos[i],pos[i]));</span></span><br><span class="line">    <span class="comment">//    }</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">树状数组</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x </span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">    {</span><br><span class="line">        c[x]+=s;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    {</span><br><span class="line">        ans+=c[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        Add(i,a[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> o,x,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;o,&amp;x,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>(o==<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            Add(x,k);</span><br><span class="line">        }<span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get(k)-Get(x<span class="number">-1</span>));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">St表</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100008</span></span><br><span class="line"><span class="keyword">int</span> d[maxn][<span class="number">99</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)d[i][<span class="number">0</span>]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">        {</span><br><span class="line">            d[i][j]=max(d[i][j<span class="number">-1</span>],d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>)&lt;=(r-l+<span class="number">1</span>))k++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(d[l][k],d[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Dijkstra</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x,dis;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a)<span class="keyword">const</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> dis&gt;a.dis;</span><br><span class="line">    }</span><br><span class="line">}; </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> prt,<span class="keyword">int</span> to,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    son[prt].push_back(to);</span><br><span class="line">    v[prt].push_back(d);</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> to son[rt.x][i] </span></span><br><span class="line"><span class="keyword">int</span> dis[maxn],tim=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        dis[i]=inf;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    q.push((node){s,<span class="number">0</span>});</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    {</span><br><span class="line">        node rt=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[rt.x])</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        vis[rt.x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[rt.x].size();i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(dis[to]&gt;dis[rt.x]+v[rt.x][i])</span><br><span class="line">            {</span><br><span class="line">                dis[to]=dis[rt.x]+v[rt.x][i];</span><br><span class="line">                q.push((node){to,dis[to]});</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        Set(x,y,z);</span><br><span class="line">    }</span><br><span class="line">    dijkstra(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Spfa</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10009</span></span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    son[x].push_back(y);</span><br><span class="line">    v[x].push_back(val);</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=inf;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push((node){s,<span class="number">0</span>});</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    {</span><br><span class="line">        node now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[now.x].size();i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> to=son[now.x][i];</span><br><span class="line">            <span class="keyword">if</span>(dis[to]&gt;dis[now.x]+v[now.x][i])</span><br><span class="line">            {</span><br><span class="line">                dis[to]=dis[now.x]+v[now.x][i];</span><br><span class="line">                q.push((node){to,dis[to]});</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        Add(x,y,z);</span><br><span class="line">    }</span><br><span class="line">    spfa(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Tarjan</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10009</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn]; </span><br><span class="line"><span class="keyword">int</span> tim,size[maxn],belong[maxn],scc_cnt,cnt;</span><br><span class="line"><span class="keyword">bool</span> bein[maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    dfn[rt]=low[rt]=++tim;</span><br><span class="line">    st[++cnt]=rt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[rt].size();i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> to=son[rt][i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[to])<span class="comment">//正向边 </span></span><br><span class="line">        {</span><br><span class="line">            Tarjan(to);</span><br><span class="line">            low[rt]=min(low[rt],low[to]);</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(!belong[to])<span class="comment">//反向边 </span></span><br><span class="line">        {</span><br><span class="line">            low[rt]=min(low[rt],dfn[to]);<span class="comment">//能不能取到一个更早的点 </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(dfn[rt]==low[rt])</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//关键节点！！ </span></span><br><span class="line">        scc_cnt++;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="keyword">do</span>{</span><br><span class="line">            k=st[cnt--];</span><br><span class="line">            belong[k]=scc_cnt;</span><br><span class="line">            size[scc_cnt]++;</span><br><span class="line">        }<span class="keyword">while</span>(k!=rt);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">二分图匹配</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> n,m,e;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3009</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="keyword">int</span> hav[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> timemark=<span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> to=son[x][i];</span><br><span class="line">        <span class="keyword">if</span>(vis[to]==timemark)<span class="keyword">continue</span>;</span><br><span class="line">        vis[to]=timemark;</span><br><span class="line">        <span class="keyword">if</span>(!hav[to]||dfs(hav[to]))</span><br><span class="line">        {</span><br><span class="line">            hav[to]=x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;e);</span><br><span class="line">    <span class="keyword">while</span>(e--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="keyword">if</span>(v&gt;m||u&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">        v+=<span class="number">1009</span>;<span class="comment">//!!!</span></span><br><span class="line">        son[u].push_back(v);</span><br><span class="line">        son[v].push_back(u);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> s=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        timemark++;</span><br><span class="line">        <span class="keyword">if</span>(!dfs(i))s--;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">线性素数筛</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> p[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">1</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">    p[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(<span class="number">10000000</span>);i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(p[i])</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>;j&lt;=<span class="number">10000000</span>;j+=i)p[j]=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(p[x])<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">差分树状数组</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x </span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">    {</span><br><span class="line">        c[x]+=s;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    {</span><br><span class="line">        ans+=c[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        Add(i,a[i]);</span><br><span class="line">        Add(i+<span class="number">1</span>,-a[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> o;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;o);</span><br><span class="line">        <span class="keyword">if</span>(o==<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x,y,k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">            Add(x,k);</span><br><span class="line">            Add(y+<span class="number">1</span>,-k);</span><br><span class="line">        }<span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Get(k));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dinic</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> val,to;</span><br><span class="line">    <span class="keyword">int</span> rev;<span class="comment">//rev表示反边在to的vector当中下标是几 </span></span><br><span class="line">    node(<span class="keyword">int</span> _to,<span class="keyword">int</span> _val,<span class="keyword">int</span> _rev)</span><br><span class="line">    {</span><br><span class="line">        to=_to;</span><br><span class="line">        val=_val;</span><br><span class="line">        rev=_rev;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; son[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    son[x].push_back(node(y,w,son[y].size()));</span><br><span class="line">    son[y].push_back(node(x,<span class="number">0</span>,son[x].size()<span class="number">-1</span>));</span><br><span class="line">} </span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;  q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> y=son[x][i].to;</span><br><span class="line">            <span class="keyword">if</span>(d[y]==<span class="number">-1</span> &amp;&amp; son[x][i].val)</span><br><span class="line">            {</span><br><span class="line">                q.push(y);</span><br><span class="line">                d[y]=d[x]+<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(d[t]==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span><span class="comment">//x 表示当前节点，low表示当前到x的最小参量 </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(x==t||low==<span class="number">0</span>) <span class="keyword">return</span> low;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> y=son[x][i].to;</span><br><span class="line">        <span class="keyword">int</span> rev=son[x][i].rev;</span><br><span class="line">        <span class="keyword">if</span>(d[y]==d[x]+<span class="number">1</span>&amp;&amp;son[x][i].val&gt;<span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> a=dfs(y,min(low,son[x][i].val));<span class="comment">//当前 </span></span><br><span class="line">            son[x][i].val-=a;</span><br><span class="line">            son[y][rev].val+=a;</span><br><span class="line">            low-=a;</span><br><span class="line">            s+=a;</span><br><span class="line">            <span class="keyword">if</span>(low==<span class="number">0</span>) <span class="keyword">return</span> s; </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(low!=<span class="number">0</span>)<span class="comment">//流到x的流量会有冗余，在这一轮dfs之后就在不会到x了 </span></span><br><span class="line">    {</span><br><span class="line">        d[x]=<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">    {</span><br><span class="line">        ans+=dfs(s,inf);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        add(x,y,z);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//dinic</span></span><br><span class="line">    dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">快速幂取余</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll d,p,k;</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;x=x*x%k,y&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)ans=ans*x%k;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;d&gt;&gt;p&gt;&gt;k;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="string">"^"</span>&lt;&lt;p&lt;&lt;<span class="string">" mod "</span>&lt;&lt;k&lt;&lt;<span class="string">"="</span>&lt;&lt;cal(d,p)%k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;蒟蒻目前还是提高组选手，模板将会持续更新！目录：&lt;br&gt;
线段树 对拍 exgcd st 树状数组 树剖 dijsktra spfa tarjan 匈牙利 埃筛 差分树状数组&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P2476 [SCOI2008]着色方案</title>
    <link href="https://lzylzy.cf/posts/9189b2df.html"/>
    <id>https://lzylzy.cf/posts/9189b2df.html</id>
    <published>2020-09-13T08:30:39.000Z</published>
    <updated>2020-09-13T09:10:20.536Z</updated>
    
    <content type="html"><![CDATA[<p>本题为dp题，但状态设计奇特</p><p>类似题目：<a href="https://www.luogu.com.cn/problem/P1541" target="_blank" rel="external nofollow noopener noreferrer">P1541乌龟棋</a></p><p>发现k,c[i]均特别小，可以从这里入手设计状态</p><p>显然，c[i]相同的状态可以忽略，只要在转移中乘上常数即可，而C[i]的范围只有5</p><p>可以$ f[a][b][c][d][e][f] $ 表示剩下一个（能给一个格子上色的）颜色有a种，以此类推</p><p>f[e]表示剩下五个的颜色，而f[f]表示上次使用了哪种颜色</p><a id="more"></a><p>在转移过程中，我们需要乘上使用的这种颜色的颜色数量</p><p>但是注意如果这种颜色上次使用了，乘的时候数量要-1</p><p>由于超级复杂，于是使用记忆化搜索实现</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll f[<span class="number">16</span>][<span class="number">16</span>][<span class="number">16</span>][<span class="number">16</span>][<span class="number">16</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">//剩下1个的颜色有a种 剩下2个的颜色有b种 </span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d,<span class="keyword">int</span> e,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(f[a][b][c][d][e][last]!=<span class="number">-1</span>)<span class="keyword">return</span> f[a][b][c][d][e][last];</span><br><span class="line"><span class="keyword">if</span>(a+b+c+d+e==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a) ans=(ans+((a-(last==<span class="number">2</span>))*dfs(a<span class="number">-1</span>,b,c,d,e,<span class="number">1</span>)))%mod;</span><br><span class="line"><span class="keyword">if</span>(b) ans=(ans+((b-(last==<span class="number">3</span>))*dfs(a+<span class="number">1</span>,b<span class="number">-1</span>,c,d,e,<span class="number">2</span>)))%mod;</span><br><span class="line"><span class="keyword">if</span>(c) ans=(ans+((c-(last==<span class="number">4</span>))*dfs(a,b+<span class="number">1</span>,c<span class="number">-1</span>,d,e,<span class="number">3</span>)))%mod;</span><br><span class="line"><span class="keyword">if</span>(d) ans=(ans+((d-(last==<span class="number">5</span>))*dfs(a,b,c+<span class="number">1</span>,d<span class="number">-1</span>,e,<span class="number">4</span>)))%mod;</span><br><span class="line"><span class="keyword">if</span>(e) ans=(ans+((e)*dfs(a,b,c,d+<span class="number">1</span>,e<span class="number">-1</span>,<span class="number">5</span>)))%mod;</span><br><span class="line"><span class="keyword">return</span> f[a][b][c][d][e][last]=ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">s[z]++;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dfs(s[<span class="number">1</span>],s[<span class="number">2</span>],s[<span class="number">3</span>],s[<span class="number">4</span>],s[<span class="number">5</span>],<span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题为dp题，但状态设计奇特&lt;/p&gt;
&lt;p&gt;类似题目：&lt;a href=&quot;https://www.luogu.com.cn/problem/P1541&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;P1541乌龟棋&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现k,c[i]均特别小，可以从这里入手设计状态&lt;/p&gt;
&lt;p&gt;显然，c[i]相同的状态可以忽略，只要在转移中乘上常数即可，而C[i]的范围只有5&lt;/p&gt;
&lt;p&gt;可以$ f[a][b][c][d][e][f] $ 表示剩下一个（能给一个格子上色的）颜色有a种，以此类推&lt;/p&gt;
&lt;p&gt;f[e]表示剩下五个的颜色，而f[f]表示上次使用了哪种颜色&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="dp" scheme="https://lzylzy.cf/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CF484B Maximum Value</title>
    <link href="https://lzylzy.cf/posts/f64fe18a.html"/>
    <id>https://lzylzy.cf/posts/f64fe18a.html</id>
    <published>2020-09-06T12:09:14.000Z</published>
    <updated>2020-09-13T09:10:20.534Z</updated>
    
    <content type="html"><![CDATA[<p>又是最喜欢的暴力题</p><p>显然不能n^2枚举，所以复杂度要进行优化</p><p>考虑对于每一个数x，枚举他数据范围内的所有倍数</p><p>对于每一个倍数 n*x ，找出原数列中第一个小于它的数y（预处理或使用二分）并更新答案</p><p>显然这样做会使得y%x更大</p><p><img src="https://i.loli.net/2020/09/06/VZCa8v1HR6BzM2e.png" alt="无标题" loading="lazy"></p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200009</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">5000009</span>];<span class="comment">//这个数字左边第一个数字是谁 </span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">n=unique(a+<span class="number">1</span>,a+<span class="number">1</span>+n)-a<span class="number">-1</span>;</span><br><span class="line">a[n+<span class="number">1</span>]=inf;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[n]*<span class="number">2</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i&gt;a[t])</span><br><span class="line">{</span><br><span class="line">f[i]=a[t];</span><br><span class="line">t++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> f[i]=f[i<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=-inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> p=a[i]*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(p&lt;=a[n]+a[i])</span><br><span class="line">{</span><br><span class="line">ans=max(ans,f[p]%a[i]);</span><br><span class="line">p+=a[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是最喜欢的暴力题&lt;/p&gt;
&lt;p&gt;显然不能n^2枚举，所以复杂度要进行优化&lt;/p&gt;
&lt;p&gt;考虑对于每一个数x，枚举他数据范围内的所有倍数&lt;/p&gt;
&lt;p&gt;对于每一个倍数 n*x ，找出原数列中第一个小于它的数y（预处理或使用二分）并更新答案&lt;/p&gt;
&lt;p&gt;显然这样做会使得y%x更大&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/06/VZCa8v1HR6BzM2e.png&quot; alt=&quot;无标题&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="枚举" scheme="https://lzylzy.cf/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>P2857 [USACO06FEB]Steady Cow Assignment G&amp;&amp;SP741 STEAD - Steady Cow Assignment</title>
    <link href="https://lzylzy.cf/posts/1c7359ca.html"/>
    <id>https://lzylzy.cf/posts/1c7359ca.html</id>
    <published>2020-08-26T04:33:36.000Z</published>
    <updated>2020-09-13T08:44:14.280Z</updated>
    
    <content type="html"><![CDATA[<p>双指针法，一个头一个尾，表示所有的牛选择到的牛棚的座次都在这个区间里，答案就是（r-l+1）</p><p>验证所有的牛能不能都放开：牛向牛棚连权值为1的边，牛棚向汇点连权值为其容量的边</p><p>看看最大流是不是满流</p><p>如果是，返回1，区间长度-1，l+1</p><p>否则区间长度+1，r+1</p><p><s>双倍经验，双倍快乐</s></p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> rev;</span><br><span class="line">};</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> k,m,n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol[<span class="number">1009</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">e[x].push_back((node){y,z,e[y].size()});</span><br><span class="line">e[y].push_back((node){x,<span class="number">0</span>,e[x].size()<span class="number">-1</span>});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(S);</span><br><span class="line">d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[now].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[now][i].to;</span><br><span class="line"><span class="keyword">if</span>(d[to]==<span class="number">-1</span>&amp;&amp;e[now][i].val)</span><br><span class="line">{</span><br><span class="line">d[to]=d[now]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line"><span class="keyword">if</span>(to==T)<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==T||low==<span class="number">0</span>)<span class="keyword">return</span> low;</span><br><span class="line"><span class="keyword">int</span> totflow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i].to;</span><br><span class="line"><span class="keyword">int</span> val=e[x][i].val;</span><br><span class="line"><span class="keyword">int</span> rev=e[x][i].rev;</span><br><span class="line"><span class="keyword">if</span>(d[to]==d[x]+<span class="number">1</span>&amp;&amp;val)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a=dfs(to,min(low,val));</span><br><span class="line">e[x][i].val-=a;</span><br><span class="line">e[to][rev].val+=a;</span><br><span class="line">totflow+=a;</span><br><span class="line">low-=a;</span><br><span class="line"><span class="keyword">if</span>(low==<span class="number">0</span>)<span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low)d[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1009</span>][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+b+<span class="number">4</span>;i++)e[i].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">add(S,i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=x;j&lt;=y;j++)</span><br><span class="line">{</span><br><span class="line">add(i,n+a[i][j],<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++)add(n+i,T,c[i]);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs())ans+=dfs(S,inf);</span><br><span class="line"><span class="keyword">return</span> ans==n;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;b);</span><br><span class="line">S=n+b+<span class="number">2</span>,T=S+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(!work(i,j)&amp;&amp;j&lt;=b)</span><br><span class="line">{</span><br><span class="line">j++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(work(i,j))<span class="comment">//这里是防止j过了m跳出循环被错误记录 </span></span><br><span class="line">{</span><br><span class="line">ans=min(ans,j-i+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//P2857 [USACO06FEB]Steady Cow Assignment G&amp;&amp;SP741 STEAD - Steady Cow Assignment</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;双指针法，一个头一个尾，表示所有的牛选择到的牛棚的座次都在这个区间里，答案就是（r-l+1）&lt;/p&gt;
&lt;p&gt;验证所有的牛能不能都放开：牛向牛棚连权值为1的边，牛棚向汇点连权值为其容量的边&lt;/p&gt;
&lt;p&gt;看看最大流是不是满流&lt;/p&gt;
&lt;p&gt;如果是，返回1，区间长度-1，l+1&lt;/p&gt;
&lt;p&gt;否则区间长度+1，r+1&lt;/p&gt;
&lt;p&gt;&lt;s&gt;双倍经验，双倍快乐&lt;/s&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="网络流" scheme="https://lzylzy.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>P2763 试题库问题</title>
    <link href="https://lzylzy.cf/posts/1fdb09b6.html"/>
    <id>https://lzylzy.cf/posts/1fdb09b6.html</id>
    <published>2020-08-26T02:28:03.000Z</published>
    <updated>2020-09-13T08:43:27.288Z</updated>
    
    <content type="html"><![CDATA[<p>这题有个坑点，每个题目只能对应一种类别，例如，对于要求1,2两种类型题目的试卷，不能只由一道包含1,2两种属性的题目组成，每道题目只能对应他属性中的一个</p><p>于是想到二分图，一边是试题，另一边是所属类别</p><p>从源点向题目链接流量为1的边，因为每个题目只能用一次</p><p>从类别向汇点链接流量为<strong>这个类别需要的题目数量</strong>的边，表示这个类别需要被选这么多次</p><p>跑最大流，判断如果不是满流就是无解</p><p>接下来准备输出方案，我们可以在残余的图上遍历每一个题目，看看他流向所属题目的出边哪一条流量为0，被选择了</p><p>这就证明这个题目连向了那个所属的类别，使用vector记录下来输出就可以了</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> rev;</span><br><span class="line">};</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> k,m,n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sol[<span class="number">1009</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">e[x].push_back((node){y,z,e[y].size()});</span><br><span class="line">e[y].push_back((node){x,<span class="number">0</span>,e[x].size()<span class="number">-1</span>});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(S);</span><br><span class="line">d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[now].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[now][i].to;</span><br><span class="line"><span class="keyword">if</span>(d[to]==<span class="number">-1</span>&amp;&amp;e[now][i].val)</span><br><span class="line">{</span><br><span class="line">d[to]=d[now]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line"><span class="keyword">if</span>(to==T)<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==T||low==<span class="number">0</span>)<span class="keyword">return</span> low;</span><br><span class="line"><span class="keyword">int</span> totflow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i].to;</span><br><span class="line"><span class="keyword">int</span> val=e[x][i].val;</span><br><span class="line"><span class="keyword">int</span> rev=e[x][i].rev;</span><br><span class="line"><span class="keyword">if</span>(d[to]==d[x]+<span class="number">1</span>&amp;&amp;val)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a=dfs(to,min(low,val));</span><br><span class="line">e[x][i].val-=a;</span><br><span class="line">e[to][rev].val+=a;</span><br><span class="line">totflow+=a;</span><br><span class="line">low-=a;</span><br><span class="line"><span class="keyword">if</span>(low==<span class="number">0</span>)<span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low)d[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;k,&amp;n);</span><br><span class="line">S=k+n+<span class="number">2</span>,T=S+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">add(i+n,T,x);</span><br><span class="line">m+=x;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p);</span><br><span class="line">add(S,i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">add(i,x+n,<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs())ans+=dfs(S,inf);</span><br><span class="line"><span class="keyword">if</span>(ans!=m)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No Solution!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;e[i].size();j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[i][j].to;</span><br><span class="line"><span class="keyword">if</span>(!e[i][j].val&amp;&amp;to&gt;n&amp;&amp;to&lt;=n+k)</span><br><span class="line">{</span><br><span class="line">sol[to-n].push_back(i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d: "</span>,i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sol[i].size();j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,sol[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题有个坑点，每个题目只能对应一种类别，例如，对于要求1,2两种类型题目的试卷，不能只由一道包含1,2两种属性的题目组成，每道题目只能对应他属性中的一个&lt;/p&gt;
&lt;p&gt;于是想到二分图，一边是试题，另一边是所属类别&lt;/p&gt;
&lt;p&gt;从源点向题目链接流量为1的边，因为每个题目只能用一次&lt;/p&gt;
&lt;p&gt;从类别向汇点链接流量为&lt;strong&gt;这个类别需要的题目数量&lt;/strong&gt;的边，表示这个类别需要被选这么多次&lt;/p&gt;
&lt;p&gt;跑最大流，判断如果不是满流就是无解&lt;/p&gt;
&lt;p&gt;接下来准备输出方案，我们可以在残余的图上遍历每一个题目，看看他流向所属题目的出边哪一条流量为0，被选择了&lt;/p&gt;
&lt;p&gt;这就证明这个题目连向了那个所属的类别，使用vector记录下来输出就可以了&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="网络流" scheme="https://lzylzy.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>P4304 [TJOI2013]攻击装置 &amp;&amp; P3355 骑士共存问题</title>
    <link href="https://lzylzy.cf/posts/10394e70.html"/>
    <id>https://lzylzy.cf/posts/10394e70.html</id>
    <published>2020-08-25T04:39:28.000Z</published>
    <updated>2020-10-01T05:17:27.651Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/09/13/UtrNkbGQjdSK8HE.png" alt="2669" loading="lazy"></p><p>通过图片发现，马只能从一个黄色点攻击到红色点</p><p>这就是一个二分图，把行列和为奇数的点连向源点，偶数连向汇点</p><p>互相能攻击到的格子记得连<strong>单向边</strong></p><a id="more"></a><p>于是变成了一个二分图，求最大独立集=点数-最大匹配</p><p>关于不能放东西的点，可以当他不存在二分图中，直接跳过就完事</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//P3355</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> rev;</span><br><span class="line">}; </span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">e[x].push_back((node){y,z,e[y].size()});</span><br><span class="line">e[y].push_back((node){x,<span class="number">0</span>,e[x].size()<span class="number">-1</span>});</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(S);</span><br><span class="line">d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[now].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[now][i].to;</span><br><span class="line"><span class="keyword">if</span>(d[to]==<span class="number">-1</span>&amp;&amp;e[now][i].val)</span><br><span class="line">{</span><br><span class="line">q.push(to);</span><br><span class="line">d[to]=d[now]+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(d[T]==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==T||low==<span class="number">0</span>)<span class="keyword">return</span> low;</span><br><span class="line"><span class="keyword">int</span> totflow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i].to;</span><br><span class="line"><span class="keyword">int</span> val=e[x][i].val;</span><br><span class="line"><span class="keyword">int</span> rev=e[x][i].rev;</span><br><span class="line"><span class="keyword">if</span>(val&amp;&amp;d[to]==d[x]+<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a=dfs(to,min(low,val));</span><br><span class="line">e[x][i].val-=a;</span><br><span class="line">e[to][rev].val+=a;</span><br><span class="line">totflow+=a;</span><br><span class="line">low-=a;</span><br><span class="line"><span class="keyword">if</span>(low==<span class="number">0</span>)<span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low)d[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> gox[<span class="number">8</span>]={<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>};</span><br><span class="line"><span class="keyword">int</span> goy[<span class="number">8</span>]={<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>};</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pos(x,y) ((x-1)*n+y)</span></span><br><span class="line"><span class="keyword">char</span> f[<span class="number">209</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">a[x][y]=<span class="number">1</span>; </span><br><span class="line">}</span><br><span class="line">S=n*n+<span class="number">5</span>,T=n*n+<span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sum=n*n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">add(pos(i,j),T,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">add(S,pos(i,j),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> nx=i+gox[k];</span><br><span class="line"><span class="keyword">int</span> ny=j+goy[k];</span><br><span class="line"><span class="keyword">if</span>(a[nx][ny]!=<span class="number">1</span>&amp;&amp;nx&lt;=n&amp;&amp;nx&gt;<span class="number">0</span>&amp;&amp;ny&lt;=n&amp;&amp;ny&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">add(pos(i,j),pos(nx,ny),<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> sum--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(bfs())</span><br><span class="line">{</span><br><span class="line">sum-=dfs(S,inf);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//P4304</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> rev;</span><br><span class="line">}; </span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">e[x].push_back((node){y,z,e[y].size()});</span><br><span class="line">e[y].push_back((node){x,<span class="number">0</span>,e[x].size()<span class="number">-1</span>});</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(S);</span><br><span class="line">d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[now].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[now][i].to;</span><br><span class="line"><span class="keyword">if</span>(d[to]==<span class="number">-1</span>&amp;&amp;e[now][i].val)</span><br><span class="line">{</span><br><span class="line">q.push(to);</span><br><span class="line">d[to]=d[now]+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(d[T]==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==T||low==<span class="number">0</span>)<span class="keyword">return</span> low;</span><br><span class="line"><span class="keyword">int</span> totflow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i].to;</span><br><span class="line"><span class="keyword">int</span> val=e[x][i].val;</span><br><span class="line"><span class="keyword">int</span> rev=e[x][i].rev;</span><br><span class="line"><span class="keyword">if</span>(val&amp;&amp;d[to]==d[x]+<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a=dfs(to,min(low,val));</span><br><span class="line">e[x][i].val-=a;</span><br><span class="line">e[to][rev].val+=a;</span><br><span class="line">totflow+=a;</span><br><span class="line">low-=a;</span><br><span class="line"><span class="keyword">if</span>(low==<span class="number">0</span>)<span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low)d[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> gox[<span class="number">8</span>]={<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>};</span><br><span class="line"><span class="keyword">int</span> goy[<span class="number">8</span>]={<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>};</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pos(x,y) ((x-1)*n+y)</span></span><br><span class="line"><span class="keyword">char</span> f[<span class="number">209</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,f);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line">a[i][j+<span class="number">1</span>]=f[j]-<span class="string">'0'</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">S=n*n+<span class="number">5</span>,T=n*n+<span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sum=n*n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">add(pos(i,j),T,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">add(S,pos(i,j),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> nx=i+gox[k];</span><br><span class="line"><span class="keyword">int</span> ny=j+goy[k];</span><br><span class="line"><span class="keyword">if</span>(a[nx][ny]!=<span class="number">1</span>&amp;&amp;nx&lt;=n&amp;&amp;nx&gt;<span class="number">0</span>&amp;&amp;ny&lt;=n&amp;&amp;ny&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">add(pos(i,j),pos(nx,ny),<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> sum--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(bfs())</span><br><span class="line">{</span><br><span class="line">sum-=dfs(S,inf);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/13/UtrNkbGQjdSK8HE.png&quot; alt=&quot;2669&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过图片发现，马只能从一个黄色点攻击到红色点&lt;/p&gt;
&lt;p&gt;这就是一个二分图，把行列和为奇数的点连向源点，偶数连向汇点&lt;/p&gt;
&lt;p&gt;互相能攻击到的格子记得连&lt;strong&gt;单向边&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="网络流" scheme="https://lzylzy.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>P5295 [北京省选集训2019]图的难题</title>
    <link href="https://lzylzy.cf/posts/31d43541.html"/>
    <id>https://lzylzy.cf/posts/31d43541.html</id>
    <published>2020-08-24T06:34:22.000Z</published>
    <updated>2020-09-06T07:06:39.556Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个性质：一个图符合条件当且仅当满足任意一个点集满足</p><p>E&lt;=2*V-2</p><p>假设图中有2*V-2条边，为了符合条件，一定有一棵白色的生成树和黑色的生成树。</p><p>而如果多一条边，肯定会有一棵树增加一条边，变成环，不符合条件</p><p>所以我们判断任意一个子图是否满足E-2*V&lt;=-2</p><p>如果所有子图都满足条件就是yes</p><a id="more"></a><hr><p>闭合子图：假设U为一个子图</p><p>且i∈U 则任意j满足i-&gt;J都必须在子图内</p><p>最大权闭合子图：每个点有点权，求权值最大的闭合子图</p><p>求法：所有点权为正的点向S连边，权值为点权；所有点权为负的点向T连边，权值为点权的绝对值</p><p>原图中的无向边权值为inf</p><p>我们先求出所有正点权的和S，再对这个图做最小割</p><p>如果割掉了连向T的边，说明这个点被选择了</p><p>如果割掉了连向S的边，说明这个点没被选</p><p>则最大权闭合子图的答案为S-dinic()</p><hr><p>本题做法：边化成点，点权为1</p><p>原有的点点权为-2</p><p>这样选出最大子图权值总和为E-2*V 直接判断他和-2的大小关系即可</p><p>另外，我们要枚举哪个点被强制选中，因为空集是不合法的</p><p>code:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500009</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">500020</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">60020</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">60020</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,l,S,T;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">tot++;</span><br><span class="line">a[tot][<span class="number">0</span>]=h[x];</span><br><span class="line">a[tot][<span class="number">1</span>]=y;</span><br><span class="line">a[tot][<span class="number">2</span>]=z;</span><br><span class="line">h[x]=tot;</span><br><span class="line"></span><br><span class="line">tot++;</span><br><span class="line">a[tot][<span class="number">0</span>]=h[y];</span><br><span class="line">a[tot][<span class="number">1</span>]=x;</span><br><span class="line">a[tot][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">h[y]=tot;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> now,p,i;</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line">v[S]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(S);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line">now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(i=h[now];i;i=a[i][<span class="number">0</span>])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!v[a[i][<span class="number">1</span>]]&amp;&amp;a[i][<span class="number">2</span>])</span><br><span class="line">{</span><br><span class="line">v[a[i][<span class="number">1</span>]]=v[now]+<span class="number">1</span>;</span><br><span class="line">q.push(a[i][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(a[i][<span class="number">1</span>]==T)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> u=y,k,i;</span><br><span class="line"><span class="keyword">if</span>(x==T)</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">for</span>(i=h[x];i;i=a[i][<span class="number">0</span>])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(u&amp;&amp;a[i][<span class="number">2</span>]&amp;&amp;v[a[i][<span class="number">1</span>]]==v[x]+<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">k=dfs(a[i][<span class="number">1</span>],min(a[i][<span class="number">2</span>],u));</span><br><span class="line"><span class="keyword">if</span>(!k)</span><br><span class="line">v[a[i][<span class="number">1</span>]]=<span class="number">0</span>;</span><br><span class="line">u-=k;</span><br><span class="line">a[i][<span class="number">2</span>]-=k;</span><br><span class="line">a[i^<span class="number">1</span>][<span class="number">2</span>]+=k;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> y-u;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ex[maxn],ey[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line">tot=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//原来的点集 </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i!=x)</span><br><span class="line">{</span><br><span class="line">add(i,T,<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line">add(S,i+n,<span class="number">1</span>);</span><br><span class="line">add(i+n,ex[i],inf);</span><br><span class="line">add(i+n,ey[i],inf);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> s=m<span class="number">-2</span>;<span class="comment">//强制选了一个点所以m-2 </span></span><br><span class="line"><span class="keyword">while</span>(bfs())</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">int</span> dd=dfs(S,inf))</span><br><span class="line">{</span><br><span class="line">s-=dd;</span><br><span class="line"><span class="comment">//cout&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">nT</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">nT</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">   <span class="keyword">char</span> c;</span><br><span class="line">   <span class="keyword">while</span>(c=getchar(),!<span class="built_in">isdigit</span>(c));</span><br><span class="line">   x=c^<span class="number">48</span>;</span><br><span class="line">   <span class="keyword">while</span>(c=getchar(),<span class="built_in">isdigit</span>(c)) x=x*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">S=n+m+<span class="number">3</span>,T=n+m+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;ex[i],&amp;ey[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=-inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">ans=max(ans,work(i));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ans&lt;=<span class="number">-2</span>)<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现一个性质：一个图符合条件当且仅当满足任意一个点集满足&lt;/p&gt;
&lt;p&gt;E&amp;lt;=2*V-2&lt;/p&gt;
&lt;p&gt;假设图中有2*V-2条边，为了符合条件，一定有一棵白色的生成树和黑色的生成树。&lt;/p&gt;
&lt;p&gt;而如果多一条边，肯定会有一棵树增加一条边，变成环，不符合条件&lt;/p&gt;
&lt;p&gt;所以我们判断任意一个子图是否满足E-2*V&amp;lt;=-2&lt;/p&gt;
&lt;p&gt;如果所有子图都满足条件就是yes&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="网络流" scheme="https://lzylzy.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>P2774 方格取数问题</title>
    <link href="https://lzylzy.cf/posts/daa4c01e.html"/>
    <id>https://lzylzy.cf/posts/daa4c01e.html</id>
    <published>2020-08-20T10:06:05.000Z</published>
    <updated>2020-08-20T12:29:18.401Z</updated>
    
    <content type="html"><![CDATA[<p>给定n*m的网格，要选择四个方向不相邻的数字，使得结果最大</p><p>我们转化题目 要求构造这样的结构：</p><ul><li>能表示n个点</li><li><strong>不选择</strong>一个数的代价为 $ a[i][j]$</li><li>要么能反悔，要么选择出来就是最优解</li></ul><p>显然容易想到网络流</p><p>建立一个二分图，</p><p>源点连向<strong>横纵坐标之和</strong>为奇数的格子，<strong>权值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></strong></p><p>汇点连向<strong>横纵坐标之和</strong>为偶数的格子，<strong>权值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></strong></p><p>两边的格子连<strong>双向边</strong>，<strong>权值为inf</strong>,表示中间这些边不能被割断</p><p>对这个图求最小割，割掉一条边表示不选择这个点，代价为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></p><p>最终状态图不联通，即没有选择相邻的点</p><p>用所有点权总和减去最小割即可</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400009</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> rev;</span><br><span class="line">};</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pos(i,j) (m*i+j)</span></span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">e[x].push_back((node){y,z,e[y].size()});</span><br><span class="line">e[y].push_back((node){x,<span class="number">0</span>,e[x].size()<span class="number">-1</span>});</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(S);</span><br><span class="line">d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> now=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[now].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[now][i].to;</span><br><span class="line"><span class="keyword">if</span>(d[to]==<span class="number">-1</span>&amp;&amp;e[now][i].val)</span><br><span class="line">{</span><br><span class="line">q.push(to);</span><br><span class="line">d[to]=d[now]+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(d[T]==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==T||low==<span class="number">0</span>)<span class="keyword">return</span> low;</span><br><span class="line"><span class="keyword">int</span> totflow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i].to;</span><br><span class="line"><span class="keyword">int</span> rev=e[x][i].rev;</span><br><span class="line"><span class="keyword">int</span> val=e[x][i].val;</span><br><span class="line"><span class="keyword">if</span>(d[to]==d[x]+<span class="number">1</span>&amp;&amp;val)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a=dfs(to,min(low,val));</span><br><span class="line">e[x][i].val-=a;</span><br><span class="line">totflow+=a;</span><br><span class="line">e[to][rev].val+=a;</span><br><span class="line">low-=a;</span><br><span class="line"><span class="keyword">if</span>(low==<span class="number">0</span>)<span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low)d[x]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> gi[<span class="number">4</span>]={<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>};</span><br><span class="line"><span class="keyword">int</span> gj[<span class="number">4</span>]={<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>};</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">S=<span class="number">0</span>,T=pos(n,m)+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">ans+=x;</span><br><span class="line"><span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">add(S,pos(i,j),x);<span class="comment">//奇数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> ni=i+gi[k];</span><br><span class="line"><span class="keyword">int</span> nj=j+gj[k];</span><br><span class="line"><span class="keyword">if</span>(ni&gt;=<span class="number">1</span>&amp;&amp;nj&gt;=<span class="number">1</span>&amp;&amp;ni&lt;=n&amp;&amp;nj&lt;=m)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//add(pos(ni,nj),pos(i,j),inf);</span></span><br><span class="line">add(pos(i,j),pos(ni,nj),inf);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">{</span><br><span class="line">add(pos(i,j),T,x);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(bfs())</span><br><span class="line">{</span><br><span class="line">ans-=dfs(S,inf);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定n*m的网格，要选择四个方向不相邻的数字，使得结果最大&lt;/p&gt;
&lt;p&gt;我们转化题目 要求构造这样的结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能表示n个点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不选择&lt;/strong&gt;一个数的代价为 $ a[i][j]$&lt;/li&gt;
&lt;li&gt;要么能反悔
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="网络流" scheme="https://lzylzy.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>P2172 [国家集训队]部落战争</title>
    <link href="https://lzylzy.cf/posts/6ba2df32.html"/>
    <id>https://lzylzy.cf/posts/6ba2df32.html</id>
    <published>2020-08-18T04:06:52.000Z</published>
    <updated>2020-08-20T09:48:38.838Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二分图的最小边覆盖"><a class="markdownIt-Anchor" href="#二分图的最小边覆盖"></a> 二分图的最小边覆盖</h3><h4 id="定义用最少的边覆盖整个子图的边的数量"><a class="markdownIt-Anchor" href="#定义用最少的边覆盖整个子图的边的数量"></a> 定义：用最少的边覆盖整个子图的边的数量</h4><h4 id="求法n-最大匹配"><a class="markdownIt-Anchor" href="#求法n-最大匹配"></a> 求法：n-最大匹配</h4><h3 id="本题具体做法"><a class="markdownIt-Anchor" href="#本题具体做法"></a> 本题具体做法</h3><p>每个点拆为两个点，入点和出点</p><p>入点出点<strong>不连边</strong>，<strong>入点</strong>向能到达的所有点的<strong>出点</strong>连边</p><p>所有入点连向源点，所有出点连向汇点</p><p>发现这是一个二分图</p><p>为什么入点出点不连边？</p><p><strong>入点连向了源点，出点连向了汇点，再把入点出点连起来就全通了</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100069 </span></span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> m,n,r,c;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> rev;</span><br><span class="line">};</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; e[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">e[x].push_back((node){y,v,e[y].size()});</span><br><span class="line">e[y].push_back((node){x,<span class="number">0</span>,e[x].size()<span class="number">-1</span>});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">d[S]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(S);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i].to;</span><br><span class="line"><span class="keyword">if</span>(d[to]==<span class="number">-1</span>&amp;&amp;e[x][i].val)</span><br><span class="line">{</span><br><span class="line">d[to]=d[x]+<span class="number">1</span>;</span><br><span class="line">q.push(to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(d[T]==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> low)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==T||low==<span class="number">0</span>)<span class="keyword">return</span> low;</span><br><span class="line"><span class="keyword">int</span> totflow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> y=e[x][i].to;</span><br><span class="line"><span class="keyword">int</span> rev=e[x][i].rev;</span><br><span class="line"><span class="keyword">if</span>(d[y]==d[x]+<span class="number">1</span>&amp;&amp;e[x][i].val)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a=dfs(y,min(e[x][i].val,low));</span><br><span class="line">e[x][i].val-=a;</span><br><span class="line">e[y][rev].val+=a;</span><br><span class="line">low-=a;</span><br><span class="line">totflow+=a;;</span><br><span class="line"><span class="keyword">if</span>(low==<span class="number">0</span>)<span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(low!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">d[x]=<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> totflow;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(bfs())</span><br><span class="line">{</span><br><span class="line">ans+=dfs(S,inf);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;r,&amp;c);</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">99</span>][<span class="number">99</span>];</span><br><span class="line"><span class="keyword">int</span> gox[<span class="number">4</span>]={r,c,r,c};</span><br><span class="line"><span class="keyword">int</span> goy[<span class="number">4</span>]={c,r,-c,-r};</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch[i]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">S=<span class="number">0</span>,T=n*m+n*m+m+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ch[i][j]==<span class="string">'.'</span>)<span class="comment">//这是一个正常的点 </span></span><br><span class="line">{</span><br><span class="line">add(S,i*m+j,<span class="number">1</span>);<span class="comment">//源点到入点 </span></span><br><span class="line">add(i*m+j+n*m,T,<span class="number">1</span>);<span class="comment">//出点到汇点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> ni=i+gox[k];</span><br><span class="line"><span class="keyword">int</span> nj=j+goy[k];</span><br><span class="line"><span class="keyword">if</span>(ni&gt;<span class="number">0</span>&amp;&amp;nj&gt;<span class="number">0</span>&amp;&amp;nj&lt;=m&amp;&amp;ni&lt;=n&amp;&amp;ch[ni][nj]==<span class="string">'.'</span>)</span><br><span class="line">{</span><br><span class="line">add(i*m+j,ni*m+nj+n*m,inf);<span class="comment">//入点到其他出点 </span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> sum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(bfs())</span><br><span class="line">{</span><br><span class="line">ans+=dfs(S,inf);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n*m-ans-sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二分图的最小边覆盖&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二分图的最小边覆盖&quot;&gt;&lt;/a&gt; 二分图的最小边覆盖&lt;/h3&gt;
&lt;h4 id=&quot;定义用最少的边覆盖整个子图的边的数量&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
      <category term="网络流" scheme="https://lzylzy.cf/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>几个在线画图工具</title>
    <link href="https://lzylzy.cf/posts/d92d95d1.html"/>
    <id>https://lzylzy.cf/posts/d92d95d1.html</id>
    <published>2020-08-16T09:39:55.000Z</published>
    <updated>2020-09-19T11:38:43.191Z</updated>
    
    <content type="html"><![CDATA[<p>一、黑色背景绿色字体……<br><a href="https://www.ddosi.com/hs/index.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.ddosi.com/hs/index.html</a></p><p>二、<br><a href="https://www.desmos.com/calculator" target="_blank" rel="external nofollow noopener noreferrer">https://www.desmos.com/calculator</a></p><p>三、访问稍稍有点慢……<br><a href="https://www.geogebra.org/classic" target="_blank" rel="external nofollow noopener noreferrer">https://www.geogebra.org/classic</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、黑色背景绿色字体……&lt;br&gt;
&lt;a href=&quot;https://www.ddosi.com/hs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://www.ddosi.com/hs/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、&lt;br&gt;
&lt;a href=&quot;https://www.desmos.com/calculator&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://www.desmos.com/calculator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、访问稍稍有点慢……&lt;br&gt;
&lt;a href=&quot;https://www.geogebra.org/classic&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://www.geogebra.org/classic&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>NOIP 2018 提高组初赛试题 题目-答案-简要解析</title>
    <link href="https://lzylzy.cf/posts/dadba983.html"/>
    <id>https://lzylzy.cf/posts/dadba983.html</id>
    <published>2020-08-16T09:33:51.000Z</published>
    <updated>2020-08-17T01:55:44.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-单项选择题共-10-题每题-2-分共计-20-分-每题有且仅有一个正确选项"><a class="markdownIt-Anchor" href="#一-单项选择题共-10-题每题-2-分共计-20-分-每题有且仅有一个正确选项"></a> 一、单项选择题（共 10 题，每题 2 分，共计 20 分； 每题有且仅有一个正确选项）</h3><p>\1. 下列四个不同进制的数中，与其它三项数值上不相等的是（ ）。</p><p>A. (269) 16</p><p>B. (617) 10</p><p>C. (1151) 8</p><p>D. (1001101011) 2</p><p>答案：D</p><p>解析：进制转换，把所有的选项都转换成相同的进制即可。至于转成几进制，看个人喜好</p><p>\2. 下列属于解释执行的程序设计语言是（ ）。</p><p>A. C</p><p>B. C++</p><p>C. Pascal</p><p>D. Python</p><p>答案：D</p><p>解析：可以理解为：需要编译的就是非解释性语言。本人印象最深的解释型语言是Java，有什么错写完一句就报出来。</p><p>C,C++,pascal都是需要编译的语言，就是非解释性语言</p><p>而python是交互式的，也是解释性语言</p><p>\3. 中国计算机学会于（ ）年创办全国青少年计算机程序设计竞赛。</p><p>A. 1983</p><p>B. 1984</p><p>C. 1985</p><p>D. 1986</p><p>答案：B</p><p>解析：？？？我也不知道</p><p>\4. 设根节点深度为 0，一棵深度为 h 的满 k（k&gt;1）叉树，即除最后一层无任何</p><p>子节点外，每一层上的所有结点都有 k 个子结点的树，共有（ ）个结点。</p><p>A.</p><p>(k^{h+1}-1)/(k-1)(kh+1−1)/(k−1)</p><p>B.</p><p>k^{h-1}kh−1</p><p>C.</p><p>k^hkh</p><p>D.</p><p>(k^{h-1})/(k-1)(kh−1)/(k−1)</p><p>答案：A</p><p>解析：等比数列求和。我是蒟蒻不会？多画两棵树自己试（逃</p><p>\5. 设某算法的时间复杂度函数的递推方程是 T(n) = T(n - 1) + n（n 为正整数）</p><p>及 T(0) = 1，则该算法的时间复杂度为（ ）。</p><p>A. O(log n)<br>B. O(n log n)<br>C. O(n)<br>D. O(n^2)</p><p>答案：D</p><p>解析：</p><p><em>NOIP初赛中的时间复杂度分析题就是授人以鱼，考人以鱽鱾鲀鱿鲃鲂鲉鲌鲄鲆鲅鲇鲏鲊鲋鲐鲈鲍鲎鲝鲘鲙鲗鲓鲖鲞鲛鲒鲚鲜鲟鲔鲕鲑鲧鲬鲪鲫鲩鲣鲨鲡鲢鲤鲠鲥鲦鲺鲯鲹鲴鲶鲳鲮鲭鲵鲲鲰鲱鲻鲷鲸鳋鳊鳁鳀鲾鲼鳈鳉鳃鳄鲿鳇鳂鳆鳅鲽鳌鳒鳎鳏鳑鳐鳍鳘鳛鳕鳓鳙鳗鳚鳔鳖鳜鳟鳞鳝鳡鳠鳢鳣鳤。</em></p><p>引自洛谷日报（逃</p><p>求和……要把式子展开，变成</p><p>1+1+2+3+…+(n-1)+n=1+n*(n+1)/2然后忽略常数复杂度总和变成n^2</p><p>A. a d * b c * -<br>B. - * a d * b c<br>C. a * d - b * c<br>D. - * * a d b c</p><p>答案：B</p><p>解析：先建一棵表达式树，先序遍历就是前缀表达式</p><p>\7. 在一条长度为 1 的线段上随机取两个点，则以这两个点为端点的线段的期望</p><p>长度是（ ）。</p><p>A. 1 / 2</p><p>B. 1 / 3</p><p>C. 2 / 3</p><p>D. 3 / 5</p><p>答案：B</p><p>解析：全靠猜</p><p>我们设这个区间[l,r]l=0,因题目0&lt;r&lt;1</p><p>0-r长度的期望为1/2，显然l-r的期望会比0-r小……所以就是1/3了（</p><p>\8. 关于 Catalan 数 Cn = (2n)! / (n + 1)! / n！，下列说法中错误的是（ ）。</p><p>A. Cn 表示有 n + 1 个结点的不同形态的二叉树的个数。</p><p>B. Cn 表示含 n 对括号的合法括号序列的个数。</p><p>C. Cn 表示长度为 n 的入栈序列对应的合法出栈序列个数。</p><p>D. Cn 表示通过连接顶点而将 n + 2 边的凸多边形分成三角形的方法个数。</p><p>答案：A</p><p>解析：基本知识？反正我不会QwQ</p><p>找个数带进去就行</p><p>\9. 假设一台抽奖机中有红、蓝两色的球，任意时刻按下抽奖按钮，都会等概率</p><p>获得红球或蓝球之一。有足够多的人每人都用这台抽奖机抽奖，假如他们的</p><p>策略均为：抽中蓝球则继续抽球，抽中红球则停止。最后每个人都把自己获</p><p>得的所有球放到一个大箱子里，最终大箱子里的红球与蓝球的比例接近于</p><p>（ ）。</p><p>A. 1 : 2</p><p>B. 2 : 1</p><p>C. 1 : 3</p><p>D. 1 : 1</p><p>答案：D</p><p>解析：算出每一轮拿到红球的期望为1，拿到蓝球必定1个，所以比例会接近1:1</p><p>\10. 为了统计一个非负整数的二进制形式中 1 的个数，代码如下：</p><p>int CountBit(int x)</p><p>{</p><p>int ret = 0;</p><p>while (x)</p><p>{</p><p>ret++;</p><p>________;</p><p>}</p><p>return ret;</p><p>}</p><p>则空格内要填入的语句是（ ）。</p><p>A. x &gt;&gt;= 1</p><p>B. x &amp;= x - 1</p><p>C. x |= x &gt;&gt; 1</p><p>D. x &lt;&lt;= 1</p><p>答案：B</p><p>解析：排除法+手算</p><h3 id="二-不定-项选择题共-5-题每题-2-分共计-10-分-每题有一个或多个正确选"><a class="markdownIt-Anchor" href="#二-不定-项选择题共-5-题每题-2-分共计-10-分-每题有一个或多个正确选"></a> 二 、 不定 项选择题（共 5 题，每题 2 分，共计 10 分 ；每题有一个或多个正确选</h3><p>项，多选或少选均不得分 ）</p><p>\1. NOIP 初赛中，选手可以带入考场的有（ ）。</p><p>A. 笔</p><p>B. 橡皮</p><p>C. 手机（关机）</p><p>D. 草稿纸</p><p>答案：AB</p><p>解析：凭感觉</p><p>\2. 2-3 树是一种特殊的树，它满足两个条件：</p><p>（1）每个内部结点有两个或三个子结点；</p><p>（2）所有的叶结点到根的路径长度相同。</p><p>如果一棵 2-3 树有 10 个叶结点，那么它可能有（ ）个非叶结点。</p><p>A. 5</p><p>B. 6</p><p>C. 7</p><p>D. 8</p><p>答案：CD</p><p>解析：自己构造树</p><p>\3. 下列关于最短路算法的说法正确的有（ ）。</p><p>A. 当图中不存在负权回路但是存在负权边时，Dijkstra 算法不一定能求出源</p><p>点到所有点的最短路。</p><p>B. 当图中不存在负权边时，调用多次 Dijkstra 算法能求出每对顶点间最短路</p><p>径。</p><p>C. 图中存在负权回路时，调用一次 Dijkstra 算法也一定能求出源点到所有点</p><p>的最短路。</p><p>D. 当图中不存在负权边时，调用一次 Dijkstra 算法不能用于每对顶点间最短</p><p>路计算。</p><p>答案：ABD</p><p>解析：dijstra算法不适用于负权图，而且它用于求单点到其他点的最短路</p><p>\4. 下列说法中，是树的性质的有（ ）。</p><p>A. 无环</p><p>B. 任意两个结点之间有且只有一条简单路径</p><p>C. 有且只有一个简单环</p><p>D. 边的数目恰是顶点数目减 1</p><p>答案：ABD</p><p>解析：树的基本知识</p><p>\5. 下列关于图灵奖的说法中，正确的有（ ）。</p><p>A. 图灵奖是由电气和电子工程师协会（IEEE）设立的。</p><p>B. 目前获得该奖项的华人学者只有姚期智教授一人。</p><p>C. 其名称取自计算机科学的先驱、英国科学家艾伦·麦席森·图灵。</p><p>D. 它是计算机界最负盛名、最崇高的一个奖项，有“计算机界的诺贝尔奖”</p><p>之称。</p><p>答案：BCD</p><p>解析：你觉得A能对吗</p><p>---------------------</p><h3 id="二-问题求解每题5分共10分"><a class="markdownIt-Anchor" href="#二-问题求解每题5分共10分"></a> 二、问题求解（每题5分，共10分）</h3><p><strong>1.</strong> 甲乙丙丁四人在考虑周末要不要外出郊游。</p><p>已知①如果周末下雨，并且乙不去，则甲一定不去；②如果乙去，则丁一定去；③如果丙去，则丁一定不去；④如果丁不去，而且甲不去，则丙一定不去。如果周末丙去了，则甲_____（去了/没去）(1分)，乙_____（去了/没去）(1分)，丁_____（去了/没去）(1分)，周末_____（下雨/没下雨）(2分)。</p><p>答案：去了，没去，没去，没下雨</p><p>解析：送分题，根据条件判断即可</p><p><strong>2.</strong> 方程 a*b =(a or b)  *  (a and b)，在a, b都取[0、31]中的整数时，共有______组解。（*表示乘法；or表示按位或运算；and表示按位与运算）</p><p>解析：使得a|b== max(a,b),a&amp;b == min(a,b)</p><p>显然，a，b存在子集关系时上面的式子才能成立。</p><p>例如：1011|1001=1011=max(1011,1001)</p><p>可以自己举例验证QwQ</p><p>我们设b是a的子集，枚举a在二进制下有多少个1，即从5里面取i个1，i从0到5。每个i都是一个C(5, i)</p><p>接着枚举子集，有2^i中方案（每一个1都看看放还是不放）</p><p>C(5,0)*2^0 +C(5,1)*2<sup>1+…+C(5,5)*2</sup>5</p><p>= 1<em>1 + 5</em>2 + 10<em>4 + 10</em>8 + 5<em>16 + 1</em>32</p><p>= 243</p><p>最后，由于我们限制了a&gt;b，所以答案要*2</p><p>但是a==b的情况会被多算，所以答案减去32</p><p>最后结果：2*243 – 32 = 452</p><h3 id="四-阅读程序写结果共-4-题每题8-分共计-32-分"><a class="markdownIt-Anchor" href="#四-阅读程序写结果共-4-题每题8-分共计-32-分"></a> 四、阅读程序写结果（共 4 题，每题8 分，共计 32 分）</h3><ol><li></li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; ++i) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i * i % x == <span class="number">1</span>) {</span><br><span class="line"></span><br><span class="line">​    ++res;</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输入：15</p><p>输出：4</p><p>解析：简单模拟</p><ol start="2"><li></li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, d[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, d + i);</span><br><span class="line"></span><br><span class="line">  v[i] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!v[i]) {</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; !v[j]; j = d[j]) {</span><br><span class="line"></span><br><span class="line">​      v[j] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    ++cnt;</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输入：10 7 1 4 3 2 5 9 8 0 6</p><p>输出：6</p><p>解析：继续模拟（逃</p><ol start="3"><li></li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">longmagic</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) {</span><br><span class="line"></span><br><span class="line">  ans = ans * <span class="number">4</span> + s[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l1 = <span class="number">0</span>; l1 &lt; len; ++l1) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r1 = l1; r1 &lt; len; ++r1) {</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">bool</span> bo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> l2 = <span class="number">0</span>; l2 &lt; len; ++l2) {</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">for</span> (<span class="keyword">int</span> r2 = l2; r2 &lt; len; ++r2) {</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (magic(l1, r1) == magic(l2, r2)&amp;&amp; (l1 != l2 || r1 != r2)) {</span><br><span class="line"></span><br><span class="line">​          bo = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">​        }</span><br><span class="line"></span><br><span class="line">​      }</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (bo) {</span><br><span class="line"></span><br><span class="line">​      ans += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输入：abacaba</p><p>输出：16</p><p>解析：magic(l,r)是l-r的hash，枚举两个子串，答案就是不重复出现的子串个数，手动枚举。</p><ol start="4"><li></li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isUse[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSmall</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a[i] != b[i]) <span class="keyword">return</span> a[i] &lt; b[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">boolgetPermutation(<span class="keyword">int</span> pos) {</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos &gt; n) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isSmall();</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isUse[i]) {</span><br><span class="line"></span><br><span class="line">​     b[pos] = i; isUse[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (getPermutation(pos + <span class="number">1</span>)) {</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    isUse[i] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">      isUse[i] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">getPermutation(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">      a[i] = b[i];</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; ++i) {</span><br><span class="line"></span><br><span class="line">      getNext();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line"></span><br><span class="line">      if (i == n) putchar('\n'); else putchar('');</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输入1：6 10 1 6 4 5 32</p><p>输出 1：2 1 3 5 6 4 (3 分)</p><p>输入2：6 200 1 5 3 4 26</p><p>输出 2：3 2 5 6 1 4 (5 分)</p><p>解析：这一大堆函数就是求这个排列的下一个……手算即可（当然如果你觉得200算不出来可以使用康托展开）</p><h3 id="五-完善程序共-2-题每题-14-分共计-28-分"><a class="markdownIt-Anchor" href="#五-完善程序共-2-题每题-14-分共计-28-分"></a> 五、完善程序（共 2 题，每题 14 分，共计 28 分）</h3><p>\1. 对于一个1到n的排列p(即1到n中每一个数在p中出现了恰好一次)，令qi为第i个位置之后第一个比pi值更大的位置，如果不存在这样的位置，则qi =n+1。</p><p>举例来说，如果n=5且p为1 5 4 2 3，则q为2 6 6 5 6。</p><p>下列程序读入了排列p，使用双向链表求解了答案。试补全程序。（第二空2分，其余3分）</p><p>数据范围 1 ≤ n ≤ 105。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L[N], R[N],a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">  a[x] = i ;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">  R[i]= i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  L[i] = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">  L[ R[a[i]]] = L[a[i]];</span><br><span class="line"></span><br><span class="line">  R[L[a[i]]] = R[a[i] ];</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; R[i]&lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解析：</p><p>纯靠猜。1空发现没有直接读入，肯定有鬼……瞎猜一种方法就行</p><p>2空仿写下句……</p><p>3,4空互相仿写……</p><p>5空我们肯定要求这个数右边比他大的数的位置，所以输出R</p><p>当然我蒻看不懂，有心情研究的julao们可以再去找找……</p><p>\2. 一只小猪要买 N 件物品(N 不超过 1000)。</p><p>它要买的所有物品在两家商店里都有卖。第 i 件物品在第一家商店的价格是 a[i]，在第二家商店的价格是 b[i]，两个价格都不小于 0 且不超过 10000。如果在第一家商店买的物品的总额不少于 50000，那么在第一家店买的物品都可以打 95 折（价格变为原来的 0.95 倍）。</p><p>求小猪买齐所有物品所需最少的总额。</p><p>输入：第一行一个数 N。接下来 N 行，每行两个数。第 i 行的两个数分别代表 a[i]，b[i]。</p><p>输出：输出一行一个数，表示最少需要的总额，保留两位小数。</p><p>试补全程序。（第一空 2 分，其余 3 分）</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Inf = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> threshold = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> put_a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> total_a,total_b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"></span><br><span class="line">intf[threshold];</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第一部分</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">  total_a= total_b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,a + i, b + i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a[i] &lt;= b[i]) total_a += a[i];</span><br><span class="line"></span><br><span class="line">    elsetotal_b += b[i];</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  ans =total_a + total_b;</span><br><span class="line"></span><br><span class="line">  total_a= total_b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (<span class="number">1</span>) ) {</span><br><span class="line"></span><br><span class="line">      put_a[i]= <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      total_a+= a[i];</span><br><span class="line"></span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">      put_a[i]= <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      total_b+= b[i];</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((<span class="number">2</span>) ) {</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,total_a * <span class="number">0.95</span> + total_b);</span><br><span class="line"></span><br><span class="line">    return0;</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二部分</span></span><br><span class="line"></span><br><span class="line">  f[<span class="number">0</span>]= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; threshold; ++i)</span><br><span class="line"></span><br><span class="line">    f[i]= Inf;</span><br><span class="line"></span><br><span class="line">  inttotal_b_prefix = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!put_a[i]) {</span><br><span class="line"></span><br><span class="line">      total_b_prefix += b[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = threshold - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) {</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( (<span class="number">3</span>) &gt;= threshold &amp;&amp; f[j] != Inf)</span><br><span class="line"></span><br><span class="line">   ans = min(ans, (total_a + j +a[i]) * <span class="number">0.95</span>+ (<span class="number">4</span>) );</span><br><span class="line"></span><br><span class="line">        f[j] = min(f[j] + b[i], j &gt;= a[i] ? (<span class="number">5</span>) :Inf);</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,ans);</span><br><span class="line"></span><br><span class="line">  return0;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解析：</p><p>代码分为两个部分。</p><p>第一部分是一个贪心，我们假设满足了优惠条件，按照折后价格进行贪心，如果结果满足了优惠条件就直接输出，此时如果放弃某些b商品来买a不会再有更优策略</p><p>第二部分是一个dp……策略就是把原先买了b的东西买a以获得折扣</p><p>f[i,j]表示前i个物品，在额外在A店花了j元的情况下，购买B店物品花费的最小值。i呢？想想你的01背包是怎么优化的。</p><p>3空是一个转移判断条件，tot_a+j+a[i]是在a店话费的总钱数（本来花的钱+前面改了的钱+当前物品价格）</p><p>4空表示在b商店买的物品总价， total_b  + f[j] -  total_b_prefix</p><p>5空更新，看看这个商品在a商店买还是b商店买</p><p>太毒瘤了QwQ</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-单项选择题共-10-题每题-2-分共计-20-分-每题有且仅有一个正确选项&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-单项选择题共-10-题每题-2-分共计-20-分-每题有且仅有一个正确选项&quot;&gt;&lt;/a&gt; 一、单项选择题（共
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>如何手动开大系统栈?</title>
    <link href="https://lzylzy.cf/posts/a4454329.html"/>
    <id>https://lzylzy.cf/posts/a4454329.html</id>
    <published>2020-08-16T09:32:23.000Z</published>
    <updated>2020-08-17T01:55:44.356Z</updated>
    
    <content type="html"><![CDATA[<p>Dev-c++:手动开大系统栈，防止爆栈</p><p>在各大OJ上，系统栈都会开大，而在本地调试时，常用到云端下载的各种毒瘤数据，一不小心就可能在本机上爆掉系统栈，在oj上却没事。</p><p>Devc++：工具-&gt;编译选项-&gt;选择编译时加入以下命令-&gt;输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,--stack=134217728</span><br></pre></td></tr></tbody></table></figure><p>Dev-c++神奇操作，请看：</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dev-c++:手动开大系统栈，防止爆栈&lt;/p&gt;
&lt;p&gt;在各大OJ上，系统栈都会开大，而在本地调试时，常用到云端下载的各种毒瘤数据，一不小心就可能在本机上爆掉系统栈，在oj上却没事。&lt;/p&gt;
&lt;p&gt;Devc++：工具-&amp;gt;编译选项-&amp;gt;选择编译时加入以下命令-&amp;gt
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>安装完Dev-c++如何设置?Dev-c++神奇配置指北</title>
    <link href="https://lzylzy.cf/posts/d537899.html"/>
    <id>https://lzylzy.cf/posts/d537899.html</id>
    <published>2020-08-16T09:29:21.000Z</published>
    <updated>2020-08-17T01:55:44.358Z</updated>
    
    <content type="html"><![CDATA[<p>安装完Dev-c++后，我们通常会根据自己的喜好调整设置，以下是个人的做法，欢迎参考。</p><h3 id="1字体"><a class="markdownIt-Anchor" href="#1字体"></a> 1.字体</h3><p>字体在安装界面就可以更改。默认字体是consoles，个人喜欢下面的courier new</p><p>有些字体很奇怪，甚至根本不能显示。。。</p><h3 id="2符号补全"><a class="markdownIt-Anchor" href="#2符号补全"></a> 2.符号补全</h3><p>位置：工具-&gt;编译器选项-&gt;代码补全-&gt;完成符号</p><p>建议把所有的都打开，当然可以根据习惯调整。</p><h3 id="3缺省源"><a class="markdownIt-Anchor" href="#3缺省源"></a> 3.缺省源</h3><p>位置：工具-&gt;编译器选项-&gt;代码-&gt;缺省源</p><p>勾选“向项目初始源文件插入代码”，在下面一栏写入以下代码：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解释：第一行万能头文件，不喜欢可以自己写别的</p><p>第二行不讲。。。</p><p>第三行的意思是当你写ll的时候系统就会认为你写了long long，比如你可以这么写： ll a=0;</p><p>第四行设置最大值，0x7fffffff是int的最大值，有的时候用的不好容易爆掉</p><p>最大值还有一个常用的0x3f3f3f3f,但我觉得这个太小了，用过一次被卡了。。。</p><p>signed main：signed就等于int，两者可以通用，为什么写signed呢？个人有一种习惯：</p><p>#define int long long</p><p>这时main就会出编译错误。。。</p><p>根据喜好还可以加入freopen</p><p>这一步的作用是：每当你创建一个新文件，里面都会有这样一段代码，省去敲头文件的麻烦。</p><h3 id="4自动保存"><a class="markdownIt-Anchor" href="#4自动保存"></a> 4.自动保存</h3><p>省去断电重写的麻烦QwQ</p><p>位置：工具-&gt;编译器选项-&gt;自动保存</p><p>先勾选“启动编译器自动保存”，然后选择间隔时间</p><p>个人喜欢两分钟一保存</p><p>下面的不用动</p><h3 id="5代码警告"><a class="markdownIt-Anchor" href="#5代码警告"></a> 5.代码警告</h3><p>这是我用过最好的功能……</p><p>当你写<strong>long long</strong> a;scanf("<strong>%d</strong>",&amp;a);的时候就会报警提示，省去很多不必要的麻烦</p><p>位置：工具-&gt;编译选项-&gt;代码生成/优化-&gt;代码警告</p><p>把第二个显示最多警告信息变成yes</p><h3 id="6手动开大系统栈"><a class="markdownIt-Anchor" href="#6手动开大系统栈"></a> 6.手动开大系统栈</h3><p>在各大OJ上，系统栈都会开大，而在本地调试时，常用到云端下载的各种毒瘤数据，一不小心就可能在本机上爆掉系统栈，在oj上却没事。</p><p>目录：工具-&gt;编译选项-&gt;编译器</p><p>勾选 选择编译时加入以下命令，输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,--stack=134217728</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装完Dev-c++后，我们通常会根据自己的喜好调整设置，以下是个人的做法，欢迎参考。&lt;/p&gt;
&lt;h3 id=&quot;1字体&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1字体&quot;&gt;&lt;/a&gt; 1.字体&lt;/h3&gt;
&lt;p&gt;字体在安装界面就可以更改。默认字体
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P2290 [HNOI2004]树的计数</title>
    <link href="https://lzylzy.cf/posts/2bc1a32b.html"/>
    <id>https://lzylzy.cf/posts/2bc1a32b.html</id>
    <published>2020-07-28T09:45:04.000Z</published>
    <updated>2020-07-28T09:55:32.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前置知识prufer序列"><a class="markdownIt-Anchor" href="#前置知识prufer序列"></a> 前置知识：prufer序列</h3><p>对于一颗无根树，可以生成一个唯一的长度为n-2的序列</p><h4 id="转化1从无根树到prefurprefur序列"><a class="markdownIt-Anchor" href="#转化1从无根树到prefurprefur序列"></a> 转化1：从无根树到prefur<em>p<strong>r</strong>e<strong>f</strong>u**r</em>序列</h4><p>以下过程引用洛谷博客，格式可能错乱，可以自行百度或去原文章访问</p><p><a href="https://www.cnblogs.com/chenxiaoran666/p/Luogu2290.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/chenxiaoran666/p/Luogu2290.html</a></p><p>如果你不想看了解那么多 可以跳转到 **这道题需要的知识 ** 部分</p><p>现在，给你一棵树，我们要考虑如何把它变成prefur<em>p<strong>r</strong>e<strong>f</strong>u**r</em>序列。</p><p><img src="https://cdn.luogu.com.cn/upload/pic/54939.png" alt="img" loading="lazy"></p><p>我们需要重复进行以下操作，直至树中只剩下两个点：</p><ul><li>找到一个<strong>度数为1</strong>，且<strong>编号最小</strong>的点。（其中编号最小保证了后面将会提到的prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列的唯一对应性，同时也方便从prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列转化回无根树）</li><li>把这个点的父亲节点加入序列，然后把这个点从树中删除。</li></ul><p>然后我们就得到了一个长度为n-2<em>n</em>−2的序列，这就是prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列。</p><p>所以它有什么实际意义呢？</p><p>我也不知道。</p><a id="more"></a><p>以上面的图为例，我们可以模拟这一过程如下：</p><ul><li>找到4号节点，将其父结点加入序列，然后将其删去。此时序列：{2}{2}。</li><li>找到5号节点，将其父结点加入序列，然后将其删去。此时序列：{2,3}{2,3}。</li><li>找到3号节点，将其父结点加入序列，然后将其删去。此时序列：{2,3,1}{2,3,1}。</li><li>找到6号节点，将其父结点加入序列，然后将其删去。此时序列：{2,3,1,2}{2,3,1,2}。</li><li>找到2号节点，将其父结点加入序列，然后将其删去。此时序列：{2,3,1,2,1}{2,3,1,2,1}。</li></ul><p>所以，最后得到的prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列就是{2,3,1,2,1}{2,3,1,2,1}。</p><h4 id="转化22从pruferprufer序列到无根树"><a class="markdownIt-Anchor" href="#转化22从pruferprufer序列到无根树"></a> 转化22：从prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列到无根树</h4><p>还是以刚才那棵树为例吧，我们要考虑如何把它的prefur<em>p<strong>r</strong>e<strong>f</strong>u**r</em>序列变回它本身。</p><p>我们需要重复进行以下操作，直至点集中只剩下两个点：（初始化所有点都在点集中）</p><ul><li>取出prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列最前面的元素x<em>x</em>。</li><li>取出<strong>在点集中</strong>的、且<strong>当前</strong>不在prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列中的最小元素y<em>y</em>。（这恰好呼应了前面提到过的选取编号最小的节点）</li><li>在x,y<em>x</em>,<em>y</em>之间连接一条边。（注意前面的取出相当于删除）</li></ul><p>最后，我们在点集中剩下的两个点中连一条边。</p><p>显然这有n-1<em>n</em>−1条边，且绝对不会形成环，因此它是一棵树，且就是原树。</p><p>以上面的序列为例，我们可以模拟这一过程如下：</p><ul><li>取出2,42,4连边。此时prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列：{3,1,2,1}{3,1,2,1}，点集：{1,2,3,5,6,7}{1,2,3,5,6,7}。</li><li>取出3,53,5连边。此时prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列：{1,2,1}{1,2,1}，点集：{1,2,3,6,7}{1,2,3,6,7}。</li><li>取出1,31,3连边。此时prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列：{2,1}{2,1}，点集：{1,2,6,7}{1,2,6,7}。</li><li>取出2,62,6连边。此时prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列：{1}{1}，点集：{1,2,7}{1,2,7}。</li><li>取出1,21,2连边。此时prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列：{}{}，点集：{1,7}{1,7}。</li></ul><p>最后再在1,71,7间连边，就可以得到原树了。</p><h4 id="pruferprufer序列的性质及相关结论"><a class="markdownIt-Anchor" href="#pruferprufer序列的性质及相关结论"></a> prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列的性质及相关结论</h4><p>讲了这么多，我们最关键的还是prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列的一些性质，以及与其有关的一些结论。（毕竟前面也提到过，我也不知道这东西有什么实际意义）</p><ul><li><p>**重要性质：prufer*p**r**u**f*<em>e*<em>r*序列与无根树一一对应。</em></em></p><p>这应该显然吧，通过前面的介绍应该可以直接得出。</p><p>而由这个性质，我们才能推导出后面的结论。</p></li><li><p>**度数为d_i*d**i*的节点会在prufer*p**r**u**f**e*<em>r*序列中出现d_i-1*d*<em>i*−1次</em></em>。</p><p>当某个节点度数为11时，会直接被删掉，否则每少掉一个相邻的节点，它就会在序列中出现11次。</p><p>因此共出现d_i-1<em>d**i</em>−1次。</p></li><li><p>*<em>一个n*n*个节点的完全图的生成树个数为n^{n-2}*n*<em>n*−2。</em></em></p><p>对于一个n<em>n</em>个点的无根树，它的prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列长为n-2<em>n</em>−2，而每个位置有n<em>n</em>种可能性，因此可能的prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列有n^{n-2}<em>n**n</em>−2种。</p><p>又由于prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列与无根树一一对应，因此生成树个数应与prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列种树相同，即n^{n-2}<em>n**n</em>−2。</p></li><li><p><strong>对于给定度数为d_{1\sim n}*d*1∼*n*的一棵无根树共有_</strong></p><p><em>$ \frac{(n-2)!}{\prod</em>{i=1}^n(d_i-1)!}∏*i*=1*n*(*d**i*−1)!(*n*−2)! $</p></li><li><p><strong>种情况</strong>。</p><p>由上面的性质可以知道，度数为d_i<em>d**i</em>的节点会在prufer<em>p<strong>r</strong>u<strong>f</strong>e**r</em>序列中出现d_i-1<em>d**i</em>−1次。</p><p>则就是要求出d_i-1<em>d**i</em>−1个i(1\le i\le n)<em>i</em>(1≤<em>i</em>≤<em>n</em>)的全排列个数。</p><p>而上面那个式子就是可重全排列公式。（即<strong>全排列个数</strong>除以<strong>重复元素内部的全排列个数</strong>）</p></li></ul><p>大致就是这些。</p><p>——引自洛谷UID28382的大佬的题解</p><h4 id="解决这题需要知道的"><a class="markdownIt-Anchor" href="#解决这题需要知道的"></a> 解决这题需要知道的</h4><p>序列长度为n-2，每个数字出现度数-1次</p><h3 id="解决问题"><a class="markdownIt-Anchor" href="#解决问题"></a> 解决问题</h3><p>问题转化为给a序列，生成由n个数组成的长度为n-2的序列</p><p>每个数字出现次数为a[i]-1次 求方案数</p><p>类似摆花那题</p><p>使用递推解决</p><p>预处理组合数+long long可以避免精度爆炸</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 199</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">ll C[maxn][maxn]; </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(x!=<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> } </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">a[i]--;</span><br><span class="line">sum+=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(sum!=n<span class="number">-2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">{</span><br><span class="line">C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题转化为，生成长度为n-2的序列，每个数字出现a[i]-1次 </span></span><br><span class="line"><span class="comment">求有多少种序列 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y=n<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">ans*=C[y][a[i]];</span><br><span class="line">y-=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前置知识prufer序列&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前置知识prufer序列&quot;&gt;&lt;/a&gt; 前置知识：prufer序列&lt;/h3&gt;
&lt;p&gt;对于一颗无根树，可以生成一个唯一的长度为n-2的序列&lt;/p&gt;
&lt;h4 id=&quot;转化1从无根树到prefurprefur序列&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#转化1从无根树到prefurprefur序列&quot;&gt;&lt;/a&gt; 转化1：从无根树到prefur&lt;em&gt;p&lt;strong&gt;r&lt;/strong&gt;e&lt;strong&gt;f&lt;/strong&gt;u**r&lt;/em&gt;序列&lt;/h4&gt;
&lt;p&gt;以下过程引用洛谷博客，格式可能错乱，可以自行百度或去原文章访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/chenxiaoran666/p/Luogu2290.html&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;https://www.cnblogs.com/chenxiaoran666/p/Luogu2290.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你不想看了解那么多 可以跳转到 **这道题需要的知识 ** 部分&lt;/p&gt;
&lt;p&gt;现在，给你一棵树，我们要考虑如何把它变成prefur&lt;em&gt;p&lt;strong&gt;r&lt;/strong&gt;e&lt;strong&gt;f&lt;/strong&gt;u**r&lt;/em&gt;序列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.luogu.com.cn/upload/pic/54939.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们需要重复进行以下操作，直至树中只剩下两个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到一个&lt;strong&gt;度数为1&lt;/strong&gt;，且&lt;strong&gt;编号最小&lt;/strong&gt;的点。（其中编号最小保证了后面将会提到的prufer&lt;em&gt;p&lt;strong&gt;r&lt;/strong&gt;u&lt;strong&gt;f&lt;/strong&gt;e**r&lt;/em&gt;序列的唯一对应性，同时也方便从prufer&lt;em&gt;p&lt;strong&gt;r&lt;/strong&gt;u&lt;strong&gt;f&lt;/strong&gt;e**r&lt;/em&gt;序列转化回无根树）&lt;/li&gt;
&lt;li&gt;把这个点的父亲节点加入序列，然后把这个点从树中删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后我们就得到了一个长度为n-2&lt;em&gt;n&lt;/em&gt;−2的序列，这就是prufer&lt;em&gt;p&lt;strong&gt;r&lt;/strong&gt;u&lt;strong&gt;f&lt;/strong&gt;e**r&lt;/em&gt;序列。&lt;/p&gt;
&lt;p&gt;所以它有什么实际意义呢？&lt;/p&gt;
&lt;p&gt;我也不知道。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P6004 [USACO20JAN]Wormhole Sort S</title>
    <link href="https://lzylzy.cf/posts/f5582704.html"/>
    <id>https://lzylzy.cf/posts/f5582704.html</id>
    <published>2020-07-28T09:41:14.000Z</published>
    <updated>2020-07-28T09:55:32.398Z</updated>
    
    <content type="html"><![CDATA[<p>从题目“最小宽度的最大值”看出二分答案</p><p>不是最小生成树 最小生成树求的是最小值</p><p>二分虫洞的最小宽度 每次check就把宽度大于等于x的边加入</p><p>对于所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">a[i]!=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的奶牛 看看 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>在不在同一连通块内</p><p>在的话说明这个奶牛可以到达自己的位置 如果有一只不在的话就return false</p><p>使用并查集实现</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> a,b,w;</span><br><span class="line">}e[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x]=Find(fa[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">fa[i]=i;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(e[i].w&gt;=x)</span><br><span class="line">{</span><br><span class="line">fa[Find(e[i].a)]=Find(e[i].b);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]!=i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Find(i)!=Find(a[i]))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(a[i]!=i)ok=<span class="number">0</span>;</span><br><span class="line">fa[i]=i;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ok)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> l=inf,r=-inf,ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].a,&amp;e[i].b,&amp;e[i].w);</span><br><span class="line">r=max(r,e[i].w);</span><br><span class="line">l=min(l,e[i].w);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))</span><br><span class="line">{</span><br><span class="line">l=mid+<span class="number">1</span>;</span><br><span class="line">ans=mid;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">r=mid<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从题目“最小宽度的最大值”看出二分答案&lt;/p&gt;
&lt;p&gt;不是最小生成树 最小生成树求的是最小值&lt;/p&gt;
&lt;p&gt;二分虫洞的最小宽度 每次check就把宽度大于等于x的边加入&lt;/p&gt;
&lt;p&gt;对于所有&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;!&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a[i]!=i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的奶牛 看看 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a[i]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;在不在同一连通块内&lt;/p&gt;
&lt;p&gt;在的话说明这个奶牛可以到达自己的位置 如果有一只不在的话就return false&lt;/p&gt;
&lt;p&gt;使用并查集实现&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1334 瑞瑞的木板</title>
    <link href="https://lzylzy.cf/posts/3b455b9e.html"/>
    <id>https://lzylzy.cf/posts/3b455b9e.html</id>
    <published>2020-07-28T09:35:08.000Z</published>
    <updated>2020-07-28T09:55:32.393Z</updated>
    
    <content type="html"><![CDATA[<p>发现这题就是合并果子反过来</p><p>做法与合并果子相同，因为每次拆开的代价与合并果子中合并的代价其实相同</p><p>整个把顺序倒过来即可</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">priority_queue&lt;ll,<span class="built_in">vector</span>&lt;ll&gt; ,greater&lt;ll&gt; &gt; q;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20009</span></span><br><span class="line">ll n;</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">ll s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">q.push(a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">ll p1=q.top(),q2;</span><br><span class="line">q.pop();</span><br><span class="line">q2=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">q.push(p1+q2);</span><br><span class="line">s+=p1+q2;</span><br><span class="line"><span class="comment">//cout&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现这题就是合并果子反过来&lt;/p&gt;
&lt;p&gt;做法与合并果子相同，因为每次拆开的代价与合并果子中合并的代价其实相同&lt;/p&gt;
&lt;p&gt;整个把顺序倒过来即可&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1194 买礼物</title>
    <link href="https://lzylzy.cf/posts/55a00e88.html"/>
    <id>https://lzylzy.cf/posts/55a00e88.html</id>
    <published>2020-07-28T09:31:57.000Z</published>
    <updated>2020-07-28T09:55:32.390Z</updated>
    
    <content type="html"><![CDATA[<p>kruscal板子题</p><p>把有优惠活动的两个商品之间连一条边，跑最小生成树</p><p>不用管没有连接上的就可以</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a,n;</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line">}e[<span class="number">500009</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.s&lt;b.s;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">509</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x]=Find(fa[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(j&lt;=i&amp;&amp;x&lt;a&amp;&amp;x!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">e[++m].y=j;</span><br><span class="line">e[m].x=i;</span><br><span class="line">e[m].s=x;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmp);</span><br><span class="line">ll ans=a*n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x=e[i].x,y=e[i].y;</span><br><span class="line"><span class="keyword">if</span>(Find(x)!=Find(y))</span><br><span class="line">{</span><br><span class="line">fa[Find(x)]=Find(y);</span><br><span class="line">ans=ans-a+e[i].s; </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kruscal板子题&lt;/p&gt;
&lt;p&gt;把有优惠活动的两个商品之间连一条边，跑最小生成树&lt;/p&gt;
&lt;p&gt;不用管没有连接上的就可以&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P6033 合并果子 加强版</title>
    <link href="https://lzylzy.cf/posts/e0bcdb1b.html"/>
    <id>https://lzylzy.cf/posts/e0bcdb1b.html</id>
    <published>2020-07-28T09:28:06.000Z</published>
    <updated>2020-09-19T11:38:01.611Z</updated>
    
    <content type="html"><![CDATA[<p>合并果子的加强版，扩大了数据范围</p><ul><li>Subtask 1（10 points）：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">1 \leq n \leq 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>。</li><li>Subtask 2（20 points）：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq n \leq 10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></li><li>Subtask 3（30 points）：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq n \leq 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></li><li>Subtask 4（40 points）：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq n \leq 10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></li></ul><p>对于全部的测试点，保证<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">1 \leq a_i \leq 10^5。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">。</span></span></span></span></p><p>由于n太大，复杂度必须为O(N)</p><p>发现a[i]不大，可以使用桶排</p><a id="more"></a><p>不能使用优先队列，改用数组模拟</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">10000000000000000</span>;<span class="comment">//小心inf </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f(x) x=(x==0?inf:x) </span></span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">100009</span>];</span><br><span class="line">ll st1[maxn];</span><br><span class="line">ll st2[maxn];</span><br><span class="line"><span class="keyword">int</span> h1=<span class="number">1</span>,t1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> h2=<span class="number">1</span>,t2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span><span class="comment">//必须快读 </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)</span><br><span class="line">{</span><br><span class="line">c=getchar();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">{</span><br><span class="line">x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">c=getchar();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//freopen("h.in","r",stdin);</span></span><br><span class="line">n=read();</span><br><span class="line">ll s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//通排 </span></span><br><span class="line">{</span><br><span class="line">t[read()]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(t[i]--)</span><br><span class="line">{</span><br><span class="line">st1[++t1]=i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">ll w=st1[h1];</span><br><span class="line">ll x=st1[h1+<span class="number">1</span>];</span><br><span class="line">ll y=st2[h2];</span><br><span class="line">ll z=st2[h2+<span class="number">1</span>];</span><br><span class="line">f(w);f(x);f(y);f(z);</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(w&lt;y)<span class="comment">//第一个用w </span></span><br><span class="line">{</span><br><span class="line">ans+=w;</span><br><span class="line">h1++;</span><br><span class="line"><span class="keyword">if</span>(x&lt;y)</span><br><span class="line">{</span><br><span class="line">h1++;</span><br><span class="line">ans+=x;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">h2++;</span><br><span class="line">ans+=y;</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">ans+=y;</span><br><span class="line">h2++;</span><br><span class="line"><span class="keyword">if</span>(w&lt;z)</span><br><span class="line">{</span><br><span class="line">h1++;</span><br><span class="line">ans+=w;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">h2++;</span><br><span class="line">ans+=z;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">s+=ans;</span><br><span class="line">st2[++t2]=ans;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;合并果子的加强版，扩大了数据范围&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subtask 1（10 points）：&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 \leq n \leq 8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7719400000000001em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;Subtask 2（20 points）：&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 \leq n \leq 10^3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7719400000000001em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Subtask 3（30 points）：&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 \leq n \leq 10^5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7719400000000001em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Subtask 4（40 points）：&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;7&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 \leq n \leq 10^7&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7719400000000001em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于全部的测试点，保证&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/msup&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;。&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 \leq a_i \leq 10^5。&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.78041em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7859700000000001em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.31166399999999994em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord cjk_fallback&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由于n太大，复杂度必须为O(N)&lt;/p&gt;
&lt;p&gt;发现a[i]不大，可以使用桶排&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1241 括号序列</title>
    <link href="https://lzylzy.cf/posts/3c1d2f82.html"/>
    <id>https://lzylzy.cf/posts/3c1d2f82.html</id>
    <published>2020-07-24T04:08:52.000Z</published>
    <updated>2020-09-19T11:37:41.665Z</updated>
    
    <content type="html"><![CDATA[<p>原题目：扫描一遍原序列，对每一个右括号，找到在它左边最靠近它的左括号匹配，如果没有就放弃。</p><p>翻译：扫描一遍原序列，当找到一个右括号（即找到一个 ’ ) ’ 或者 ’ ] ’ 时），以它为起点向左找，找到一个<strong>没被标记成功匹配</strong>的左括号（即找到一个 ’ ( ’ 或者 ’ [ ’ ），如果两者匹配的话，标记它们成功 牵手 匹配，如果不匹配，或者找不到左括号的话，不做任何标记。</p><a id="more"></a><p>原题目：在以这种方式把原序列匹配完成后，把剩下的未匹配的括号补全。</p><p>翻译：上面扫描一遍标记完成功匹配的括号之后，扫描一遍序列，对于标记过的括号，则直接输出；对于没有标记的括号，则补全成对输出</p><p>举例：如果有个 ’ [ ’ 或 ’ ] ’ 没被标记匹配，则输出 [ ]</p><p>如果还不理解的话，给个测试样例：</p><p>输入：( [ ) ] )</p><p>输出：( [ ( ) ] )</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a==<span class="string">'('</span>&amp;&amp;b==<span class="string">')'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="string">'['</span>&amp;&amp;b==<span class="string">']'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">swap(a,b);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="string">'('</span>&amp;&amp;b==<span class="string">')'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="string">'['</span>&amp;&amp;b==<span class="string">']'</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">2590</span>];</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; adi[<span class="number">2590</span>];</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cy=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; pos;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'('</span>||a[i]==<span class="string">'['</span>)</span><br><span class="line">{</span><br><span class="line">st.push(a[i]);</span><br><span class="line">pos.push(x);<span class="comment">//不能push i 因为中间插队的括号会导致位置错乱 </span></span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(st.empty())<span class="comment">//!!!!小心RE！ </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">')'</span>)ans[++x]=<span class="string">'('</span>;</span><br><span class="line"><span class="keyword">else</span> ans[++x]=<span class="string">'['</span>;</span><br><span class="line">ans[++x]=a[i];<span class="comment">//小心WA~！ </span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"> } </span><br><span class="line"><span class="keyword">char</span> p=st.top();</span><br><span class="line"><span class="comment">//cout&lt;&lt;"CP:"&lt;&lt;p&lt;&lt;" "&lt;&lt;a[i]&lt;&lt;endl; </span></span><br><span class="line"><span class="keyword">if</span>(ck(p,a[i]))</span><br><span class="line">{</span><br><span class="line">st.pop();</span><br><span class="line">pos.pop();</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">')'</span>)ans[++x]=<span class="string">'('</span>;</span><br><span class="line"><span class="keyword">else</span> ans[++x]=<span class="string">'['</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ans[++x]=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">while</span>(!st.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> p=st.top();</span><br><span class="line"><span class="keyword">int</span> q=pos.top()+<span class="number">1</span>;</span><br><span class="line">st.pop();pos.pop(); </span><br><span class="line">y++;</span><br><span class="line">adi[y].first=q;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="string">'('</span>)adi[y].second=<span class="string">')'</span>;</span><br><span class="line"><span class="keyword">else</span> adi[y].second=<span class="string">']'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">0</span>)sort(adi+<span class="number">1</span>,adi+<span class="number">1</span>+y);<span class="comment">//好像reverse就行 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">0</span>&amp;&amp;adi[cy].first==i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;adi[cy].second;</span><br><span class="line">cy++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题目：扫描一遍原序列，对每一个右括号，找到在它左边最靠近它的左括号匹配，如果没有就放弃。&lt;/p&gt;
&lt;p&gt;翻译：扫描一遍原序列，当找到一个右括号（即找到一个 ’ ) ’ 或者 ’ ] ’ 时），以它为起点向左找，找到一个&lt;strong&gt;没被标记成功匹配&lt;/strong&gt;的左括号（即找到一个 ’ ( ’ 或者 ’ [ ’ ），如果两者匹配的话，标记它们成功 牵手 匹配，如果不匹配，或者找不到左括号的话，不做任何标记。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P4913 【深基16.例3】二叉树深度</title>
    <link href="https://lzylzy.cf/posts/32e85e5a.html"/>
    <id>https://lzylzy.cf/posts/32e85e5a.html</id>
    <published>2020-07-16T12:36:23.000Z</published>
    <updated>2020-09-19T11:39:03.543Z</updated>
    
    <content type="html"><![CDATA[<p>可以建树之后进行dfs求出每个节点的深度找最大值</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000009</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="keyword">int</span> ans=-inf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ans=max(ans,dep);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[now].size();i++)</span><br><span class="line">{</span><br><span class="line">dfs(son[now][i],dep+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(x!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">son[i].push_back(x);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">son[i].push_back(y);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以建树之后进行dfs求出每个节点的深度找最大值&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="code" scheme="https://lzylzy.cf/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>P1102 A-B 数对</title>
    <link href="https://lzylzy.cf/posts/48d1c4ef.html"/>
    <id>https://lzylzy.cf/posts/48d1c4ef.html</id>
    <published>2020-07-16T12:35:07.000Z</published>
    <updated>2020-07-24T04:10:14.934Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="comment">//转化题目 </span></span><br><span class="line"><span class="comment">//把数列从小到大排序，每次求ai+C出现了几次 </span></span><br><span class="line"><span class="comment">//可以用upperbound-lowerbound实现 </span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200009</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">ans+=upper_bound(a+<span class="number">1</span>,a+<span class="number">1</span>+n,a[i]+c)-lower_bound(a+<span class="number">1</span>,a+<span class="number">1</span>+n,a[i]+c);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1918 保龄球 </title>
    <link href="https://lzylzy.cf/posts/68dc17be.html"/>
    <id>https://lzylzy.cf/posts/68dc17be.html</id>
    <published>2020-07-16T12:32:39.000Z</published>
    <updated>2020-07-24T04:10:23.843Z</updated>
    
    <content type="html"><![CDATA[<p>大意是输入一个数组a</p><p>求x在a中出现的位置</p><p>可以用map映射int解决</p><p>或者是离散化</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">mp[x]=i;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mp.count(x)?mp[x]:<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大意是输入一个数组a&lt;/p&gt;
&lt;p&gt;求x在a中出现的位置&lt;/p&gt;
&lt;p&gt;可以用map映射int解决&lt;/p&gt;
&lt;p&gt;或者是离散化&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1030 求先序排列</title>
    <link href="https://lzylzy.cf/posts/39eaac2a.html"/>
    <id>https://lzylzy.cf/posts/39eaac2a.html</id>
    <published>2020-07-16T12:29:39.000Z</published>
    <updated>2020-07-24T04:10:07.800Z</updated>
    
    <content type="html"><![CDATA[<p>模拟了好一大通 QAQ</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先序遍历：根左右 </span></span><br><span class="line"><span class="comment">中序遍历：左根右 </span></span><br><span class="line"><span class="comment">后序遍历：左右根 </span></span><br><span class="line"><span class="comment">可以直接求出根，在中序遍历里找出左右儿子，继续递归 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="built_in">string</span> s1,s2; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> l2,<span class="keyword">int</span> r2)</span><span class="comment">//对应s1,s2的哪个区间 </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s2[r2];<span class="comment">//s2最后一个直接是根 </span></span><br><span class="line"><span class="keyword">int</span> pos=s1.find(s2[r2]);<span class="comment">//找出根在s1里的位置 </span></span><br><span class="line"><span class="keyword">int</span> sizel=pos-l;</span><br><span class="line"><span class="keyword">int</span> sizer=r-l+<span class="number">1</span><span class="number">-1</span>-sizel;</span><br><span class="line"><span class="keyword">if</span>(sizel&gt;<span class="number">0</span>)dfs(l,l+sizel<span class="number">-1</span>,l2,l2+sizel<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(sizer&gt;<span class="number">0</span>)dfs(l+sizel+<span class="number">1</span>,r,l2+sizel,r2<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">int</span> len=s1.size()<span class="number">-1</span>;</span><br><span class="line">dfs(<span class="number">0</span>,len,<span class="number">0</span>,len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模拟了好一大通 QAQ&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1347 排序</title>
    <link href="https://lzylzy.cf/posts/b60d629.html"/>
    <id>https://lzylzy.cf/posts/b60d629.html</id>
    <published>2020-07-14T11:29:39.000Z</published>
    <updated>2020-07-14T11:32:15.793Z</updated>
    
    <content type="html"><![CDATA[<p>一道拓扑排序题，<s>但是我不会</s></p><p>由于数据范围小得吓人，可以每读入一个关系就进行一遍topsort</p><p>如果发现条件不足就继续读入，矛盾或者遍历成功就直接结束</p><p>如果读入完了还是条件不足，那就是条件不足了</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 29</span></span><br><span class="line"><span class="keyword">int</span> b[maxn][maxn];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">b[i][j]=1 i&gt;j</span></span><br><span class="line"><span class="comment">b[i][j]=-1 i&lt;j</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],id[maxn];</span><br><span class="line"><span class="keyword">int</span> inn[maxn],in[maxn];</span><br><span class="line"><span class="keyword">bool</span> app[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="keyword">int</span> oo=inf;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x]=Find(fa[x]); </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">memcpy</span>(in,inn,<span class="keyword">sizeof</span>(inn));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> ns=inf;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>&amp;&amp;app[i])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ns!=inf)</span><br><span class="line">{</span><br><span class="line">res=<span class="number">0</span>;<span class="comment">//条件不足 </span></span><br><span class="line">}</span><br><span class="line">q.push(i);</span><br><span class="line">ns=i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ns==inf)<span class="comment">//有矛盾 </span></span><br><span class="line">{</span><br><span class="line">res=<span class="number">-1</span>;</span><br><span class="line"> } </span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">ans.push(x);</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(ans.size()==n&amp;&amp;res==<span class="number">1</span>)<span class="comment">//全部入队 </span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Sorted sequence determined after %d relations: "</span>,k);</span><br><span class="line"><span class="keyword">while</span>(!ans.empty())</span><br><span class="line">{</span><br><span class="line"><span class="built_in">putchar</span>((<span class="keyword">char</span>)(ans.front()+<span class="string">'A'</span>));</span><br><span class="line">ans.pop();</span><br><span class="line">}</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'.'</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[x][i];</span><br><span class="line">in[to]--;</span><br><span class="line"><span class="keyword">if</span>(in[to]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">q.push(to);</span><br><span class="line"><span class="keyword">if</span>(p)res=<span class="number">0</span>;<span class="comment">//条件不足 </span></span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ans.size()!=cnt||res==<span class="number">-1</span>)<span class="comment">//没能遍历当前的图 说明有环 </span></span><br><span class="line">{</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Inconsistency found after %d relations."</span>,k);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> s=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line"><span class="keyword">int</span> x=a[<span class="number">0</span>]-<span class="string">'A'</span>,y=a[<span class="number">2</span>]-<span class="string">'A'</span>;</span><br><span class="line">cnt+=(!app[x])+(!app[y]);</span><br><span class="line">app[x]=<span class="number">1</span>,app[y]=<span class="number">1</span>;</span><br><span class="line">s=min(s,min(x,y));</span><br><span class="line">fa[Find(x)]=Find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="comment">//自环 </span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Inconsistency found after %d relations.\n"</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(b[x][y]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">b[x][y]=<span class="number">-1</span>;</span><br><span class="line">b[y][x]=<span class="number">1</span>;</span><br><span class="line">son[x].push_back(y);</span><br><span class="line">id[x].push_back(i);</span><br><span class="line">inn[y]++;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(b[x][y]==<span class="number">-1</span>)<span class="comment">//重边 </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}<span class="keyword">else</span><span class="comment">//矛盾 </span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Inconsistency found after %d relations.\n"</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">topsort(i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Sorted sequence cannot be determined.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一道拓扑排序题，&lt;s&gt;但是我不会&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;由于数据范围小得吓人，可以每读入一个关系就进行一遍topsort&lt;/p&gt;
&lt;p&gt;如果发现条件不足就继续读入，矛盾或者遍历成功就直接结束&lt;/p&gt;
&lt;p&gt;如果读入完了还是条件不足，那就是条件不足了&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>P1127 词链</title>
    <link href="https://lzylzy.cf/posts/aedc3926.html"/>
    <id>https://lzylzy.cf/posts/aedc3926.html</id>
    <published>2020-07-13T10:32:41.000Z</published>
    <updated>2020-10-01T05:16:56.818Z</updated>
    
    <content type="html"><![CDATA[<p>//作为首次出现的 入度比出度大1<br>//要是找不到 就按照第一个来<br>//剩下部分通过搜索解决】</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1009</span></span><br><span class="line"><span class="built_in">string</span> x[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn],num[maxn];</span><br><span class="line"><span class="keyword">int</span> h[maxn];<span class="comment">//出现次数 </span></span><br><span class="line"><span class="keyword">int</span> t[maxn];</span><br><span class="line"><span class="comment">//作为首次出现的 入度比出度大1 </span></span><br><span class="line"><span class="comment">//要是找不到 就按照第一个来</span></span><br><span class="line"><span class="comment">//剩下部分通过搜索解决</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> rt,<span class="built_in">string</span> now,<span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//cout&lt;&lt;rt&lt;&lt;" "&lt;&lt;now&lt;&lt;" "&lt;&lt;tot&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(ok)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(tot==n)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">ok=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;son[rt].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=son[rt][i];</span><br><span class="line"><span class="keyword">int</span> nt=num[rt][i];</span><br><span class="line"><span class="keyword">if</span>(vis[nt])<span class="keyword">continue</span>;</span><br><span class="line">vis[nt]=<span class="number">1</span>;</span><br><span class="line">dfs(to,now+<span class="string">"."</span>+x[nt],tot+<span class="number">1</span>);</span><br><span class="line">vis[nt]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x]=Find(fa[x]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> app[<span class="number">99</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//连边 </span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x[i];</span><br><span class="line">}</span><br><span class="line">sort(x+<span class="number">1</span>,x+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">son[x[i][<span class="number">0</span>]-<span class="string">'a'</span>].push_back(x[i][x[i].size()<span class="number">-1</span>]-<span class="string">'a'</span>);</span><br><span class="line">num[x[i][<span class="number">0</span>]-<span class="string">'a'</span>].push_back(i);</span><br><span class="line">h[x[i][<span class="number">0</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">t[x[i][x[i].size()<span class="number">-1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">app[x[i][x[i].size()<span class="number">-1</span>]-<span class="string">'a'</span>]=<span class="number">1</span>;</span><br><span class="line">app[x[i][<span class="number">0</span>]-<span class="string">'a'</span>]=<span class="number">1</span>;</span><br><span class="line">fa[x[i][<span class="number">0</span>]-<span class="string">'a'</span>]=Find(x[i][x[i].size()<span class="number">-1</span>]-<span class="string">'a'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//确定第一个出现的 </span></span><br><span class="line"><span class="keyword">int</span> af=-inf;</span><br><span class="line"><span class="keyword">int</span> s=x[<span class="number">1</span>][<span class="number">0</span>]-<span class="string">'a'</span>;<span class="comment">//默认1 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(app[i])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(af==-inf)af=Find(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Find(i)!=af)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"***"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(h[i]-t[i]==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">s=i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>;i++)</span><br><span class="line">{</span><br><span class="line">vis[num[s][i]]=<span class="number">1</span>;</span><br><span class="line">dfs(son[s][i],x[num[s][i]],<span class="number">1</span>);</span><br><span class="line">vis[num[s][i]]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(!ok)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"***"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;//作为首次出现的 入度比出度大1&lt;br&gt;
//要是找不到 就按照第一个来&lt;br&gt;
//剩下部分通过搜索解决】&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1801 黑匣子</title>
    <link href="https://lzylzy.cf/posts/fd017f76.html"/>
    <id>https://lzylzy.cf/posts/fd017f76.html</id>
    <published>2020-07-12T07:00:02.000Z</published>
    <updated>2020-09-19T11:40:00.928Z</updated>
    
    <content type="html"><![CDATA[<p>对顶堆</p><p>发现i是单调不降的，可以使用对顶堆解决问题</p><p>类似问题：P1168中位数</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; q2;<span class="comment">//小的在上头</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; q1;<span class="comment">//大的在上头，大小控制为i </span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200009</span>],t[<span class="number">200009</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//freopen("h.in","r",stdin);</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">for</span>(;j&lt;=x;j++)</span><br><span class="line">{</span><br><span class="line">q1.push(a[j]);</span><br><span class="line"><span class="keyword">while</span>(q1.size()&lt;i)<span class="comment">//保证q1的长度为i</span></span><br><span class="line">{</span><br><span class="line">q1.push(q2.top());</span><br><span class="line">q2.pop();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(q1.size()&gt;i)</span><br><span class="line">{</span><br><span class="line">q2.push(q1.top());</span><br><span class="line">q1.pop();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(!q1.empty()&amp;&amp;!q2.empty()&amp;&amp;q1.top()&gt;q2.top())<span class="comment">//保证q1的top更小</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> l=q1.top(),k=q2.top();</span><br><span class="line">q1.pop();q2.pop();</span><br><span class="line">q2.push(l);q1.push(k);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//printf("i:%dj:%d %d\n",i,j,q1.top());</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(q1.size()&lt;i)</span><br><span class="line">{</span><br><span class="line">q1.push(q2.top());</span><br><span class="line">q2.pop();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(q1.size()&gt;i)</span><br><span class="line">{</span><br><span class="line">q2.push(q1.top());</span><br><span class="line">q1.pop();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(!q1.empty()&amp;&amp;!q2.empty()&amp;&amp;q1.top()&gt;q2.top())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> l=q1.top(),k=q2.top();</span><br><span class="line">q1.pop();q2.pop();</span><br><span class="line">q2.push(l);q1.push(k);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,q1.top());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对顶堆&lt;/p&gt;
&lt;p&gt;发现i是单调不降的，可以使用对顶堆解决问题&lt;/p&gt;
&lt;p&gt;类似问题：P1168中位数&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1621 集合</title>
    <link href="https://lzylzy.cf/posts/2f1e5e04.html"/>
    <id>https://lzylzy.cf/posts/2f1e5e04.html</id>
    <published>2020-06-21T10:58:12.000Z</published>
    <updated>2020-07-24T04:10:46.241Z</updated>
    
    <content type="html"><![CDATA[<p>用埃筛枚举质数作为质因子，看看能不能变成区间里的数字</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">100020</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">100020</span>];</span><br><span class="line"><span class="keyword">int</span> a,b,p,s=<span class="number">0</span>;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x]=Find(fa[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=b;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!v[i])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=b;j+=i)</span><br><span class="line">{</span><br><span class="line">v[j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=p&amp;&amp;j-i&gt;=a)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(Find(j)!=Find(j-i))</span><br><span class="line">{</span><br><span class="line">fa[Find(j)]=Find(j-i);</span><br><span class="line">s++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b-a+<span class="number">1</span>-s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用埃筛枚举质数作为质因子，看看能不能变成区间里的数字&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P3613 【深基15.例2】寄包柜</title>
    <link href="https://lzylzy.cf/posts/5d1bcc2a.html"/>
    <id>https://lzylzy.cf/posts/5d1bcc2a.html</id>
    <published>2020-06-21T10:57:21.000Z</published>
    <updated>2020-06-21T10:59:52.793Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; mp;<span class="comment">//直接用map映射pair实现 </span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> opt,x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">mp[make_pair(x,y)]=z;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mp.count(make_pair(x,y))==<span class="number">0</span>?<span class="number">0</span>:mp[make_pair(x,y)]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>P4715 【深基16.例1】淘汰赛</title>
    <link href="https://lzylzy.cf/posts/27fe52af.html"/>
    <id>https://lzylzy.cf/posts/27fe52af.html</id>
    <published>2020-06-21T10:56:09.000Z</published>
    <updated>2020-06-21T10:59:52.797Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">250</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">n=<span class="number">1</span>&lt;&lt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//上半区的最大值   下半区的最大值  两个中较小的一个就是答案 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;max_element(a,a+n/<span class="number">2</span>)-max_element(a,a+n)+max_element(a+n/<span class="number">2</span>,a+n)-a+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>P3884 [JLOI2009]二叉树问题</title>
    <link href="https://lzylzy.cf/posts/13a5bcc7.html"/>
    <id>https://lzylzy.cf/posts/13a5bcc7.html</id>
    <published>2020-06-21T10:55:20.000Z</published>
    <updated>2020-07-24T04:10:54.012Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">120</span>],d[<span class="number">120</span>],f[<span class="number">120</span>];</span><br><span class="line"><span class="keyword">int</span> x,y,n;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> md=<span class="number">0</span>;</span><br><span class="line">c[d[<span class="number">1</span>]]++; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">f[y]=x;</span><br><span class="line">d[y]=d[x]+<span class="number">1</span>; </span><br><span class="line">md=max(md,d[y]);</span><br><span class="line">c[d[y]]++;<span class="comment">//宽度就是某一个深度的节点个数 </span></span><br><span class="line">}<span class="keyword">int</span> mc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)mc=max(mc,c[i]);</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">int</span> z=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x!=y)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(d[x]&lt;d[y])</span><br><span class="line">{</span><br><span class="line">y=f[y];</span><br><span class="line">z++;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">x=f[x];</span><br><span class="line">z+=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n%d"</span>,md+<span class="number">1</span>,mc,z);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P1364 医院设置</title>
    <link href="https://lzylzy.cf/posts/d3586754.html"/>
    <id>https://lzylzy.cf/posts/d3586754.html</id>
    <published>2020-06-21T10:54:30.000Z</published>
    <updated>2020-06-21T10:59:52.790Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">120</span>];<span class="comment">//size</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">120</span>];</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">120</span>];<span class="comment">//lson</span></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">120</span>];<span class="comment">//rson</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(x)</span><br><span class="line">{</span><br><span class="line">dfs(l[x]);</span><br><span class="line">s[x]+=s[l[x]];</span><br><span class="line">f[x]+=f[l[x]]+s[l[x]];</span><br><span class="line">dfs(r[x]);</span><br><span class="line">s[x]+=s[r[x]];</span><br><span class="line">f[x]+=f[r[x]]+s[r[x]];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;s[i],&amp;l[i],&amp;r[i]);</span><br><span class="line">}</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>,z=f[x];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(s[l[x]]*<span class="number">2</span>&gt;s[<span class="number">1</span>])<span class="comment">//左边人多，他的两倍比总人数多 </span></span><br><span class="line">{</span><br><span class="line">z+=s[<span class="number">1</span>]<span class="number">-2</span>*s[l[x]];<span class="comment">//往左走 </span></span><br><span class="line">x=l[x]; </span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(s[r[x]]*<span class="number">2</span>&gt;s[<span class="number">1</span>])<span class="comment">//同理往右 </span></span><br><span class="line">{</span><br><span class="line">z+=s[<span class="number">1</span>]<span class="number">-2</span>*s[r[x]];</span><br><span class="line">x=r[x];</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">break</span>; </span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,z);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>P1160 队列安排</title>
    <link href="https://lzylzy.cf/posts/b71d7c5c.html"/>
    <id>https://lzylzy.cf/posts/b71d7c5c.html</id>
    <published>2020-06-21T08:48:39.000Z</published>
    <updated>2020-09-19T11:39:43.477Z</updated>
    
    <content type="html"><![CDATA[<p>太水 直接上code</p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100020</span></span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn],v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(!x)<span class="keyword">return</span>;</span><br><span class="line">dfs(l[x]);</span><br><span class="line"><span class="keyword">if</span>(!v[x])<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">dfs(r[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">0</span>)<span class="comment">//加入，替换掉原来这个位置的人把他接到这个加入的人后面 </span></span><br><span class="line">{</span><br><span class="line">l[i]=l[x];</span><br><span class="line">l[x]=i;</span><br><span class="line">}<span class="keyword">else</span><span class="comment">//同理 </span></span><br><span class="line">{</span><br><span class="line">r[i]=r[x];</span><br><span class="line">r[x]=i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">v[x]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;太水 直接上code&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>P4387【深基15.习9】验证栈序列</title>
    <link href="https://lzylzy.cf/posts/b494a7bf.html"/>
    <id>https://lzylzy.cf/posts/b494a7bf.html</id>
    <published>2020-06-21T08:27:48.000Z</published>
    <updated>2020-06-21T08:28:24.262Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//一直push，直到匹配到一个pop </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">栗子： </span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">5 4 3 2 1</span></span><br><span class="line"><span class="comment">用一个栈模拟，一直入队直到当前入队的是出栈队列的第一项 </span></span><br><span class="line"><span class="comment">出栈，继续模拟 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">200020</span>],ss;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100020</span>]; </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">ss=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">while</span>(i&lt;n&amp;&amp;(s[ss]!=x))</span><br><span class="line">{</span><br><span class="line">s[++ss]=a[i++];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(s[ss]==x)</span><br><span class="line">{</span><br><span class="line">ss--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">puts</span>(ss&gt;<span class="number">0</span>?<span class="string">"No"</span>:<span class="string">"Yes"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>P5250【深基17.例5】木材仓库</title>
    <link href="https://lzylzy.cf/posts/9462a6a7.html"/>
    <id>https://lzylzy.cf/posts/9462a6a7.html</id>
    <published>2020-06-21T07:22:54.000Z</published>
    <updated>2020-06-21T07:35:17.971Z</updated>
    
    <content type="html"><![CDATA[<p>水一发板子题</p><p>合理使用map和c++11</p><p>auto类型可以自动识别，在c++11下，可以节省很多代码</p><p>这里用auto代替了iterator</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;opt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> sc;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;name&gt;&gt;sc;</span><br><span class="line">mp[name]=sc;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"OK"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(opt!=<span class="number">4</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;name;</span><br><span class="line"><span class="keyword">auto</span>  it=mp.find(name);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(it!=mp.end())</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mp[name]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Not found"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(it!=mp.end())</span><br><span class="line">{</span><br><span class="line">mp.erase(name);</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Deleted successfully"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Not found"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;mp.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> } </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//c++11</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;水一发板子题&lt;/p&gt;
&lt;p&gt;合理使用map和c++11&lt;/p&gt;
&lt;p&gt;auto类型可以自动识别，在c++11下，可以节省很多代码&lt;/p&gt;
&lt;p&gt;这里用auto代替了iterator&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何安全的举报自己的学校？</title>
    <link href="https://lzylzy.cf/posts/ada246ea.html"/>
    <id>https://lzylzy.cf/posts/ada246ea.html</id>
    <published>2020-05-21T13:39:08.000Z</published>
    <updated>2020-08-16T11:15:12.833Z</updated>
    
    <content type="html"><![CDATA[<p>蒟蒻开学了emm</p><p>今天教教大家两种安全举报学校的方法</p><h1 id="法1"><a class="markdownIt-Anchor" href="#法1"></a> 法1</h1><h4 id="首先找到你所在省市的教育主管部门"><a class="markdownIt-Anchor" href="#首先找到你所在省市的教育主管部门"></a> 首先，找到你所在省/市的教育主管部门</h4><p>由于咱们是山东人，所以找到山东省教育厅:<a href="http://edu.shandong.gov.cn/" target="_blank" rel="external nofollow noopener noreferrer">http://edu.shandong.gov.cn/</a></p><p><strong>重点，什么信访条例，什么匿名不公开，全部是假的，举报不能留下任何个人身份信息，包括自己的ip地址</strong></p><h4 id="接下来连接到vpn"><a class="markdownIt-Anchor" href="#接下来连接到vpn"></a> 接下来，连接到VPN</h4><p>是的，<s>根据前人的惨痛教训</s>你的IP可能会被卖掉</p><p>这边奉上百度第一条https://www.xicidaili.com/nn/</p><p>最好是高匿代理，国内外都可</p><p><strong>注意，有很多代理简直上不了网，可以多试几个，另外不要输入敏感信息，因为你所有联网的数据都会发送给代理服务器，最好退掉微信QQ啥的，搞完之后一定断开代理</strong></p><p>连接方法：</p><p>PC：<a href="https://jingyan.baidu.com/article/6fb756ec5f5dd4241858fb85.html" target="_blank" rel="external nofollow noopener noreferrer">https://jingyan.baidu.com/article/6fb756ec5f5dd4241858fb85.html</a></p><p>手机：<a href="https://jingyan.baidu.com/article/6fb756ec5f5dd4241858fb85.html" target="_blank" rel="external nofollow noopener noreferrer">https://jingyan.baidu.com/article/6fb756ec5f5dd4241858fb85.html</a></p><h4 id="填写信息"><a class="markdownIt-Anchor" href="#填写信息"></a> 填写信息</h4><p>这边山东省教育厅需要点击“留言咨询”</p><p><img src="https://i.loli.net/2020/08/16/Lt731VlbZWuImC8.jpg" alt="a" loading="lazy"></p><p>姓名瞎编，手机号和邮箱一定要使用<strong>临时的</strong></p><p>这边有一篇推荐临时邮箱的文章：<a href="https://www.jianshu.com/p/adc971eb5cfe" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/adc971eb5cfe</a></p><p><a href="https://temp-mail.org/" target="_blank" rel="external nofollow noopener noreferrer">https://temp-mail.org/</a></p><p>这个我觉得速度还行，其他的要么时间短，要么上不去</p><p>临时手机号来这里：<a href="https://www.materialtools.com/" target="_blank" rel="external nofollow noopener noreferrer">https://www.materialtools.com/</a></p><p>证件的话，<strong>如果必须填真实的，不要写你自己或者家人，最好找一个和你们学校和你关系不大的人，当然，搞个假的最好</strong></p><p>剩下的大家随意发挥，切记不要留下任何真实信息（除了举报内容</p><p>本方法有一定暴露风险~不过应该不大，我觉得防护措施已经足够严密了2333</p><p><s>小心内鬼</s></p><h1 id="法2"><a class="markdownIt-Anchor" href="#法2"></a> 法2</h1><p>写封信不就完了</p><p>不要留下真实信息，直接寄到教育局，谁都查不出来hhhh</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;蒟蒻开学了emm&lt;/p&gt;
&lt;p&gt;今天教教大家两种安全举报学校的方法&lt;/p&gt;
&lt;h1 id=&quot;法1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#法1&quot;&gt;&lt;/a&gt; 法1&lt;/h1&gt;
&lt;h4 id=&quot;首先找到你所在省市的教育主管部门&quot;&gt;&lt;a class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CF1178D Prime Graph</title>
    <link href="https://lzylzy.cf/posts/2a07be94.html"/>
    <id>https://lzylzy.cf/posts/2a07be94.html</id>
    <published>2020-05-21T13:38:00.000Z</published>
    <updated>2020-07-24T04:11:44.064Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">显然1000以内，n到3/2n中肯定有一个质数（没有证明，但是可以枚举试试 </span></span><br><span class="line"><span class="comment">所以 先把n个点连成环，在中间两点之间加边，每个点的度为2或3，控制边数是个质数就可以 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x);i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(x%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> m=n;</span><br><span class="line"><span class="keyword">while</span>(!Prime(m))</span><br><span class="line">{</span><br><span class="line">m++;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;n)x=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m-n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;n/<span class="number">2</span>+i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>CF1220D Alex and Julian</title>
    <link href="https://lzylzy.cf/posts/ed89373b.html"/>
    <id>https://lzylzy.cf/posts/ed89373b.html</id>
    <published>2020-05-19T12:49:46.000Z</published>
    <updated>2020-07-24T04:11:32.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识二分图的判定"><a class="markdownIt-Anchor" href="#前置知识二分图的判定"></a> 前置知识：二分图的判定</h2><p>没有奇环</p><h2 id="做法"><a class="markdownIt-Anchor" href="#做法"></a> 做法</h2><p>考虑从0开始，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">lcm(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>构成的环为奇环</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>l</mi><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mi>a</mi></mfrac><mo>+</mo><mfrac><mrow><mi>l</mi><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mi>b</mi></mfrac><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac { lcm(a,b)} { a }+\frac{ lcm ( a,b ) } { b}   \equiv 1(mod 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{a+b}{gcd(a,b)} \equiv 1(mod  2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>当且仅当a,b中2的因子个数相等时，ab无法构成奇环，这种情况下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>a</mi><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{a}{gcd(a,b)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.215392em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">d</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>b</mi><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{b}{gcd(a,b)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.400108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">d</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>都是奇数</p><p><strong>（本句话引自lg大佬，不会可以手动验证，好好想，蒟蒻数学这么差都想通了，画画图）</strong></p><p>也就是说，对于任意两个数字，如果他们的lowbit相等，他们不会构成奇环</p><p>于是问题变成了 求n个数中lowbit相等的数字最多有多少个</p><p>code:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200009</span></span><br><span class="line">ll a[maxn]; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; num[<span class="number">69</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//两个数lowbit相同就可以保留 </span></span><br><span class="line"><span class="comment">//直接枚举lowbit？</span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">60</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//cout&lt;&lt;lowbit(a[j])&lt;&lt;" "&lt;&lt;(1&lt;&lt;i)&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(lowbit(a[j])==(<span class="number">1l</span>l&lt;&lt;i))</span><br><span class="line">{</span><br><span class="line">s++;</span><br><span class="line">}<span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">num[i].push_back(a[j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(s&gt;ans)</span><br><span class="line">{</span><br><span class="line">w=i,ans=s;</span><br><span class="line">}</span><br><span class="line"> } </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-ans);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num[w].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,num[w][i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置知识二分图的判定&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前置知识二分图的判定&quot;&gt;&lt;/a&gt; 前置知识：二分图的判定&lt;/h2&gt;
&lt;p&gt;没有奇环&lt;/p&gt;
&lt;h2 id=&quot;做法&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>P6275 [USACO20OPEN]Sprinklers 2: Return of the Alfalfa P </title>
    <link href="https://lzylzy.cf/posts/5f2781ba.html"/>
    <id>https://lzylzy.cf/posts/5f2781ba.html</id>
    <published>2020-05-12T13:41:15.000Z</published>
    <updated>2020-09-19T11:37:15.123Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="6275.png" alt="6275" loading="lazy"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//轮廓线dp</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发现A、C作物之间一定有一条分割线，</span></span><br><span class="line"><span class="comment">分割线的拐角处必须放灌溉器，剩下位置可以不放 </span></span><br><span class="line"><span class="comment">但是如果要放，放的灌溉器种类是一定的 </span></span><br><span class="line"><span class="comment">dp合法轮廓线的数量 </span></span><br><span class="line"><span class="comment">设每一条轮廓线的权值是-2^拐角数量 </span></span><br><span class="line"><span class="comment">每一次转移，如果拐弯了就要除以二 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> c[maxn][maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inv (500000004)</span></span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];<span class="comment">//f表示横着来的 </span></span><br><span class="line"><span class="comment">//有什么方法可以转移到f[i][j]?</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f[i][j-1]-&gt;f[i][j]</span></span><br><span class="line"><span class="comment">g[i][j-1]/2-&gt;f[i][j]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">f[i-1][j]/2-&gt;g[i][j]</span></span><br><span class="line"><span class="comment">g[i-1][j]-&gt;g[i][j]</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn];<span class="comment">//g表示竖着来的 </span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll ans=<span class="number">1</span>,base=a;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">ans*=base;</span><br><span class="line">ans%=mod;</span><br><span class="line">}</span><br><span class="line">base*=base;</span><br><span class="line">base%=mod;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c[i]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">{</span><br><span class="line">f[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">g[i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)<span class="comment">//i可以取到n+1 </span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=n+<span class="number">1</span>;j++)</span><br><span class="line">{</span><br><span class="line">f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(c[i<span class="number">-1</span>][j<span class="number">-1</span>]!=<span class="string">'W'</span>)<span class="comment">//这边ij从1开始，所以要减一 </span></span><br><span class="line">{</span><br><span class="line">f[i][j]=(f[i][j]+(ll)g[i][j<span class="number">-1</span>]*inv)%mod;</span><br><span class="line">}</span><br><span class="line">g[i][j]=g[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(c[i<span class="number">-1</span>][j<span class="number">-1</span>]!=<span class="string">'W'</span>)</span><br><span class="line">{</span><br><span class="line">g[i][j]=(g[i][j]+(ll)f[i<span class="number">-1</span>][j]*inv)%mod;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;f[i][j]&lt;&lt;" "&lt;&lt;g[i][j]&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=(g[n+<span class="number">1</span>][n+<span class="number">1</span>]+f[n+<span class="number">1</span>][n+<span class="number">1</span>])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(c[i][j]!=<span class="string">'W'</span>)</span><br><span class="line">{</span><br><span class="line">ans=(ans*<span class="number">2</span>)%mod;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;6275.png&quot; alt=&quot;6275&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>母亲节快乐！</title>
    <link href="https://lzylzy.cf/posts/c20ab536.html"/>
    <id>https://lzylzy.cf/posts/c20ab536.html</id>
    <published>2020-05-10T14:32:34.000Z</published>
    <updated>2020-06-21T05:06:29.668Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=28875156&amp;auto=0&amp;height=66"></iframe><p>1.妈妈 你把心铺成路，还怕我磕了脚</p><p><img src="/mother/1.jpg" alt="alt" loading="lazy"></p><p>2<br>感谢你不是超人，却为我变成了万能</p><p>3<br>岁月从不败我的美人妈妈 ️</p><p><img src="/mother/2.jpg" alt="alt" loading="lazy"></p><p>4<br>小棉袄会努力成为你的防弹衣</p><p>5<br>你说你是妈妈的防弹衣，后来才知道你是妈妈的催泪弹</p><p>6<br>别问你妈想要什么礼物，她就是想要我这样的女婿(儿媳妇）</p><p><img src="/mother/3.webp" alt="alt" loading="lazy"></p><p>7<br>听说神不能无处不在，所以创造了妈妈</p><p>8<br>我加倍努力，就是希望成长的脚步，可以赶上您老去的速度</p><p>9<br>曾厌恶你的市侩圆滑，却忘了你也曾松花酿酒，春水煮茶</p><p><img src="/mother/4.gif" alt="alt" loading="lazy"></p><p>10<br>从前的愿望是仗剑走天涯，现在只想赖在你身边，听你细数年华</p><p>11<br>整个世界都在催我长大，而你却心疼我的小翅膀</p><p>12<br>羡慕我爸，娶到了世界上最好的女人</p><p><img src="/mother/5.gif" alt="alt" loading="lazy"></p><p>13<br>和妈妈吵架的时候，摸摸自己肚子的肉，那是妈妈在外面赚钱养的。</p><p>14<br>这个世界上只有你，愿意包容我的一千种任性。</p><p>15<br>我快快长大，你慢慢变老ᵀᴴᴱ ᴮᴱˢᵀ ᴵˢ ᶠᴼᴿ ᵞᴼᵁ</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;amp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>P3258</title>
    <link href="https://lzylzy.cf/posts/b173244f.html"/>
    <id>https://lzylzy.cf/posts/b173244f.html</id>
    <published>2020-05-07T07:24:38.000Z</published>
    <updated>2020-07-24T04:10:38.191Z</updated>
    
    <content type="html"><![CDATA[<p>树剖裸题啦</p><p>每走一次路径+1</p><p>最后一个房间答案-1</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></span><br><span class="line"><span class="keyword">int</span> fa[maxn],son[maxn],top[maxn],pos[maxn],dfn[maxn],size[maxn],dep[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> mark;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">}tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">size[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i];</span><br><span class="line"><span class="keyword">if</span>(!size[to])</span><br><span class="line">{</span><br><span class="line">dep[to]=dep[x]+<span class="number">1</span>;</span><br><span class="line">fa[to]=x;</span><br><span class="line">dfs(to);</span><br><span class="line">size[x]+=size[to];</span><br><span class="line"><span class="keyword">if</span>(size[son[x]]&lt;size[to])</span><br><span class="line">{</span><br><span class="line">son[x]=to;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cnt++;</span><br><span class="line">pos[x]=cnt;</span><br><span class="line">dfn[cnt]=x;</span><br><span class="line">top[x]=tp;</span><br><span class="line"><span class="keyword">if</span>(son[x]!=<span class="number">0</span>)dfs2(son[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> to=e[x][i];</span><br><span class="line"><span class="keyword">if</span>(top[to])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(to,to);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">tr[x].l=l,tr[x].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">{</span><br><span class="line">tr[x].mark=<span class="number">0</span>;</span><br><span class="line">tr[x].val=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(x*<span class="number">2</span>,l,mid);</span><br><span class="line">Build(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">tr[x].mark=<span class="number">0</span>;</span><br><span class="line">tr[x].val=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">relese</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(tr[x].l==tr[x].r||<span class="number">0</span>==tr[x].mark)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ma=tr[x].mark;</span><br><span class="line"><span class="keyword">int</span> ls=x*<span class="number">2</span>,rs=x*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> lsl=tr[ls].r-tr[ls].l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> rsl=tr[rs].r-tr[rs].l+<span class="number">1</span>;</span><br><span class="line">tr[ls].val+=lsl*ma;</span><br><span class="line">tr[ls].mark+=ma;</span><br><span class="line">tr[rs].mark+=ma;</span><br><span class="line">tr[rs].val+=rsl*ma;</span><br><span class="line">tr[x].mark=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[x].l&amp;&amp;tr[x].r&lt;=r)</span><br><span class="line">{</span><br><span class="line">tr[x].val+=val*(tr[x].r-tr[x].l+<span class="number">1</span>);</span><br><span class="line">tr[x].mark+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">relese(x);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)Add(x*<span class="number">2</span>,l,r,val);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)Add(x*<span class="number">2</span>+<span class="number">1</span>,l,r,val);</span><br><span class="line">tr[x].val=tr[x*<span class="number">2</span>].val+tr[x*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">L_Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;dep[top[x]]&lt;&lt;" "&lt;&lt;dep[top[y]]&lt;&lt;endl;</span></span><br><span class="line">Add(<span class="number">1</span>,pos[top[x]],pos[x],<span class="number">1</span>);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(pos[x]&gt;pos[y])swap(x,y);</span><br><span class="line">Add(<span class="number">1</span>,pos[x],pos[y],<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span><span class="comment">//单点查询 </span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(tr[x].l==tr[x].r)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> tr[x].val;</span><br><span class="line">}</span><br><span class="line">relese(x);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[x].l+tr[x].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=mid)<span class="keyword">return</span> Query(x*<span class="number">2</span>,p);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Query(x*<span class="number">2</span>+<span class="number">1</span>,p);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">e[x].push_back(y);</span><br><span class="line">e[y].push_back(x);</span><br><span class="line">}</span><br><span class="line">dep[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">L_Add(a[i<span class="number">-1</span>],a[i]);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>!=i)Add(<span class="number">1</span>,pos[a[i<span class="number">-1</span>]],pos[a[i<span class="number">-1</span>]],<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i-1]&lt;&lt;" "&lt;&lt;a[i]&lt;&lt;endl; </span></span><br><span class="line">}</span><br><span class="line">Add(<span class="number">1</span>,pos[a[n]],pos[a[n]],<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query(<span class="number">1</span>,pos[j]));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树剖裸题啦&lt;/p&gt;
&lt;p&gt;每走一次路径+1&lt;/p&gt;
&lt;p&gt;最后一个房间答案-1&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://lzylzy.cf/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lzylzy.cf/posts/4a17b156.html"/>
    <id>https://lzylzy.cf/posts/4a17b156.html</id>
    <published>2020-05-02T10:12:05.890Z</published>
    <updated>2020-05-08T10:13:33.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="啊这里是lzy"><a class="markdownIt-Anchor" href="#啊这里是lzy"></a> 啊这里是lzy</h3><h3 id="lzy是一个正在初中挣扎的蒟蒻-qaq"><a class="markdownIt-Anchor" href="#lzy是一个正在初中挣扎的蒟蒻-qaq"></a> lzy是一个正在初中挣扎的蒟蒻   QAQ</h3><h3 id="信竞和文化课都好难嘤嘤嘤"><a class="markdownIt-Anchor" href="#信竞和文化课都好难嘤嘤嘤"></a> 信竞和文化课都好难嘤嘤嘤</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;啊这里是lzy&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#啊这里是lzy&quot;&gt;&lt;/a&gt; 啊这里是lzy&lt;/h3&gt;
&lt;h3 id=&quot;lzy是一个正在初中挣扎的蒟蒻-qaq&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
